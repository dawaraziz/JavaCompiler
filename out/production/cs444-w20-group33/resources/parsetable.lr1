Warning: extra input lines after grammar; maybe your production count is wrong.64
EPSILON
BOF
EOF

!
%
&&
&
*
+
,
-
.
/
;
<
<=
=
==
!=
>
>=
CHARACTER_LITERAL
FALSE
INTEGER_LITERAL
NULL
STRING_LITERAL
TRUE
VARIABLE_ID
[
]
(
)
abstract
boolean
byte
char
class
else
extends
final
for
if
implements
import
instanceof
int
interface
native
new
package
protected
public
return
short
static
super
this
void
while
{
|
||
}
~
106
S
H
PACKAGEopt
MULT_IMPORTopt
TYPE_DECLARATIONopt
CLASS_NAME
PACKAGE_NAME
TYPE_NAME
EXPRESSION_NAME
AMBIGUOUS_NAME
METHOD_NAME
PACKAGE_OR_TYPE_NAME
LITERAL
REFERENCE_TYPE
CLASS_OR_INTERFACE_TYPE
CLASS_TYPE
INTERFACE_TYPE
ARRAY_TYPE
RETURN_TYPE
TYPE
NON_ARRAY_TYPE
PRIM_TYPE
NUM_TYPE
PACKAGE
MULT_IMPORT
IMPORT
TYPE_DECLARATION
INTERFACE_DECLARATION
INTERFACE_MODIFIERS
INTERFACE_MODIFIER
EXTENDS_INTERFACESopt
EXTENDS_INTERFACES
EXTENDS_INTERFACE
INTERFACE_BODYopt
INTERFACE_BODY
ABSTRACT_METHOD_DECLARATION
ABSTRACT_METHOD_MODIFIERSopt
ABSTRACT_METHOD_MODIFIERS
ABSTRACT_METHOD_MODIFIER
CLASS_DECLARATION
CLASS_MODIFIERS
CLASS_MODIFIER
SUPERopt
SUPER
INTERFACESopt
INTERFACES
INTERFACE_TYPE_LIST
CLASS_BODY
PROPERTY
PROPERTY_MODIFIER
PROPERTY_MODIFIERS
INSTANTIATION
METHOD
METHOD_MODIFIERS
METHOD_MODIFIER
METHOD_DECLARATOR
METHOD_PARAMSopt
METHOD_PARAMS
METHOD_PARAM
METHOD_IMPLEMENTATION
BLOCK
BLOCK_STATEMENTSopt
BLOCK_STATEMENTS
BLOCK_STATEMENT
STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT_NO_SHORT_IF
EXPRESSION_STATEMENT
IF_STATEMENT
IF_ELSE_STATEMENT
IF_ELSE_STATEMENT_NO_SHORT_IF
WHILE_STATEMENT
WHILE_STATEMENT_NO_SHORT_IF
LOCAL_VARIABLE_DECLARATION
FOR_STATEMENT
FOR_STATEMENT_NO_SHORT_IF
FOR_INITopt
FOR_INIT
FOR_UPDATEopt
RETURN_STATEMENT
EXPRESSIONopt
EXPRESSION
ASSIGNMENT
LEFT_HAND_SIDE
ASSIGNMENT_EXPRESSION
CONDITIONAL_AND_EXPRESSION
CONDITIONAL_OR_EXPRESSION
INCLUSIVE_OR_EXPRESSION
AND_EXPRESSION
EQUALITY_EXPRESSION
RELATIONAL_EXPRESSION
ADDITIVE_EXPRESSION
MULTIPLICATIVE_EXPRESSION
UNARY_EXPRESSION
UNARY_EXPRESSION_NOT_PLUS_MINUS
CAST_EXPRESSION
POST_FIX_EXPRESSION
PRIMARY_EXPRESSION
PRIMARY_EXPRESSION_NO_NEW_ARRAY
CLASS_INSTANCE_CREATION_EXPRESSION
ARGUMENT_LISTopt
ARGUMENT_LIST
ARRAY_CREATION_EXPRESSION
FIELD_ACCESS
METHOD_INVOCATION
ARRAY_ACCESS
S
230
S BOF H EOF
H PACKAGEopt MULT_IMPORTopt TYPE_DECLARATIONopt
CLASS_NAME VARIABLE_ID
PACKAGE_NAME VARIABLE_ID
PACKAGE_NAME PACKAGE_NAME . VARIABLE_ID
TYPE_NAME VARIABLE_ID
TYPE_NAME PACKAGE_OR_TYPE_NAME . VARIABLE_ID
EXPRESSION_NAME VARIABLE_ID
EXPRESSION_NAME AMBIGUOUS_NAME . VARIABLE_ID
METHOD_NAME VARIABLE_ID
METHOD_NAME AMBIGUOUS_NAME . VARIABLE_ID
PACKAGE_OR_TYPE_NAME VARIABLE_ID
PACKAGE_OR_TYPE_NAME PACKAGE_OR_TYPE_NAME . VARIABLE_ID
AMBIGUOUS_NAME VARIABLE_ID
AMBIGUOUS_NAME AMBIGUOUS_NAME . VARIABLE_ID
LITERAL INTEGER_LITERAL
LITERAL CHARACTER_LITERAL
LITERAL STRING_LITERAL
LITERAL NULL
LITERAL TRUE
LITERAL FALSE
REFERENCE_TYPE CLASS_OR_INTERFACE_TYPE
REFERENCE_TYPE ARRAY_TYPE
CLASS_OR_INTERFACE_TYPE CLASS_TYPE
CLASS_OR_INTERFACE_TYPE INTERFACE_TYPE
CLASS_TYPE TYPE
INTERFACE_TYPE TYPE
ARRAY_TYPE TYPE
RETURN_TYPE TYPE
RETURN_TYPE void
TYPE PRIM_TYPE [ ]
TYPE VARIABLE_ID [ ]
TYPE NON_ARRAY_TYPE
NON_ARRAY_TYPE VARIABLE_ID
NON_ARRAY_TYPE PRIM_TYPE
PRIM_TYPE boolean
PRIM_TYPE NUM_TYPE
PRIM_TYPE char
NUM_TYPE byte
NUM_TYPE int
NUM_TYPE short
PACKAGEopt PACKAGE
PACKAGEopt EPSILON
PACKAGE package TYPE_NAME ;
MULT_IMPORTopt MULT_IMPORT
MULT_IMPORTopt EPSILON
MULT_IMPORT IMPORT
MULT_IMPORT IMPORT MULT_IMPORT
IMPORT import TYPE_NAME ;
IMPORT import TYPE_NAME . * ;
TYPE_DECLARATIONopt TYPE_DECLARATION
TYPE_DECLARATIONopt EPSILON
TYPE_DECLARATION CLASS_DECLARATION
TYPE_DECLARATION INTERFACE_DECLARATION
TYPE_DECLARATION ;
INTERFACE_DECLARATION INTERFACE_MODIFIERS interface VARIABLE_ID EXTENDS_INTERFACESopt { INTERFACE_BODYopt }
INTERFACE_MODIFIERS INTERFACE_MODIFIER INTERFACE_MODIFIERS
INTERFACE_MODIFIERS INTERFACE_MODIFIER
INTERFACE_MODIFIER abstract
INTERFACE_MODIFIER public
EXTENDS_INTERFACESopt EXTENDS_INTERFACES
EXTENDS_INTERFACESopt EPSILON
EXTENDS_INTERFACES extends EXTENDS_INTERFACE
EXTENDS_INTERFACE EXTENDS_INTERFACE , INTERFACE_TYPE
EXTENDS_INTERFACE INTERFACE_TYPE
INTERFACE_BODYopt INTERFACE_BODY
INTERFACE_BODYopt EPSILON
INTERFACE_BODY INTERFACE_BODY ABSTRACT_METHOD_DECLARATION
INTERFACE_BODY INTERFACE_BODY ;
ABSTRACT_METHOD_DECLARATION ABSTRACT_METHOD_MODIFIERSopt RETURN_TYPE METHOD_DECLARATOR ;
ABSTRACT_METHOD_MODIFIERSopt ABSTRACT_METHOD_MODIFIERS
ABSTRACT_METHOD_MODIFIERSopt EPSILON
ABSTRACT_METHOD_MODIFIERS ABSTRACT_METHOD_MODIFIER ABSTRACT_METHOD_MODIFIERS
ABSTRACT_METHOD_MODIFIERS ABSTRACT_METHOD_MODIFIER
ABSTRACT_METHOD_MODIFIER abstract
ABSTRACT_METHOD_MODIFIER public
CLASS_DECLARATION CLASS_MODIFIERS class VARIABLE_ID SUPERopt INTERFACESopt { CLASS_BODY }
CLASS_MODIFIERS CLASS_MODIFIER CLASS_MODIFIERS
CLASS_MODIFIERS CLASS_MODIFIER
CLASS_MODIFIER static
CLASS_MODIFIER abstract
CLASS_MODIFIER public
CLASS_MODIFIER final
SUPERopt SUPER
SUPERopt EPSILON
SUPER extends CLASS_TYPE
INTERFACESopt INTERFACES
INTERFACESopt EPSILON
INTERFACES implements INTERFACE_TYPE_LIST
INTERFACE_TYPE_LIST INTERFACE_TYPE
INTERFACE_TYPE_LIST INTERFACE_TYPE_LIST , INTERFACE_TYPE
CLASS_BODY CLASS_BODY METHOD
CLASS_BODY CLASS_BODY PROPERTY
CLASS_BODY CLASS_BODY ;
CLASS_BODY EPSILON
PROPERTY PROPERTY_MODIFIERS TYPE VARIABLE_ID INSTANTIATION ;
PROPERTY_MODIFIERS PROPERTY_MODIFIER
PROPERTY_MODIFIERS PROPERTY_MODIFIER PROPERTY_MODIFIERS
PROPERTY_MODIFIER static
PROPERTY_MODIFIER public
PROPERTY_MODIFIER protected
INSTANTIATION = EXPRESSION
INSTANTIATION EPSILON
METHOD METHOD_MODIFIERS RETURN_TYPE METHOD_DECLARATOR METHOD_IMPLEMENTATION
METHOD_MODIFIERS METHOD_MODIFIER METHOD_MODIFIERS
METHOD_MODIFIERS METHOD_MODIFIER
METHOD_MODIFIER static
METHOD_MODIFIER abstract
METHOD_MODIFIER public
METHOD_MODIFIER final
METHOD_MODIFIER protected
METHOD_MODIFIER native
METHOD_DECLARATOR VARIABLE_ID ( METHOD_PARAMSopt )
METHOD_PARAMSopt METHOD_PARAMS
METHOD_PARAMSopt EPSILON
METHOD_PARAMS METHOD_PARAM
METHOD_PARAMS METHOD_PARAMS , METHOD_PARAM
METHOD_PARAM TYPE VARIABLE_ID
METHOD_IMPLEMENTATION BLOCK
METHOD_IMPLEMENTATION ;
BLOCK { BLOCK_STATEMENTSopt }
BLOCK_STATEMENTSopt BLOCK_STATEMENTS
BLOCK_STATEMENTSopt EPSILON
BLOCK_STATEMENTS BLOCK_STATEMENT
BLOCK_STATEMENTS BLOCK_STATEMENTS BLOCK_STATEMENT
BLOCK_STATEMENT TYPE VARIABLE_ID INSTANTIATION
BLOCK_STATEMENT STATEMENT
STATEMENT STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT IF_STATEMENT
STATEMENT IF_ELSE_STATEMENT
STATEMENT WHILE_STATEMENT
STATEMENT FOR_STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT BLOCK
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT ;
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT EXPRESSION_STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT RETURN_STATEMENT
STATEMENT_NO_SHORT_IF STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT_NO_SHORT_IF IF_ELSE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF WHILE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF FOR_STATEMENT_NO_SHORT_IF
EXPRESSION_STATEMENT ASSIGNMENT ;
EXPRESSION_STATEMENT METHOD_INVOCATION ;
EXPRESSION_STATEMENT CLASS_INSTANCE_CREATION_EXPRESSION ;
IF_STATEMENT if ( EXPRESSION ) STATEMENT
IF_ELSE_STATEMENT if ( EXPRESSION ) STATEMENT_NO_SHORT_IF else STATEMENT
IF_ELSE_STATEMENT_NO_SHORT_IF if ( EXPRESSION ) STATEMENT_NO_SHORT_IF else STATEMENT_NO_SHORT_IF
WHILE_STATEMENT while ( EXPRESSION ) STATEMENT
WHILE_STATEMENT_NO_SHORT_IF while ( EXPRESSION ) STATEMENT_NO_SHORT_IF
FOR_STATEMENT for ( FOR_INITopt ; EXPRESSIONopt ; FOR_UPDATEopt ) STATEMENT
FOR_STATEMENT_NO_SHORT_IF for ( FOR_INITopt ; EXPRESSIONopt ; FOR_UPDATEopt ) STATEMENT_NO_SHORT_IF
LOCAL_VARIABLE_DECLARATION TYPE VARIABLE_ID INSTANTIATION ;
FOR_INITopt FOR_INIT
FOR_INIT LOCAL_VARIABLE_DECLARATION
FOR_INIT EXPRESSION_STATEMENT
FOR_INITopt EPSILON
FOR_UPDATEopt EXPRESSION_STATEMENT
RETURN_STATEMENT return EXPRESSIONopt
EXPRESSIONopt EXPRESSION
EXPRESSIONopt EPSILON
EXPRESSION CONDITIONAL_OR_EXPRESSION
EXPRESSION ASSIGNMENT
ASSIGNMENT LEFT_HAND_SIDE = ASSIGNMENT_EXPRESSION
LEFT_HAND_SIDE EXPRESSION_NAME
LEFT_HAND_SIDE FIELD_ACCESS
LEFT_HAND_SIDE ARRAY_ACCESS
ASSIGNMENT_EXPRESSION LEFT_HAND_SIDE
ASSIGNMENT_EXPRESSION METHOD_INVOCATION
ASSIGNMENT_EXPRESSION ARRAY_CREATION_EXPRESSION
ASSIGNMENT_EXPRESSION CLASS_INSTANCE_CREATION_EXPRESSION
ASSIGNMENT_EXPRESSION ARGUMENT_LIST
CONDITIONAL_OR_EXPRESSION CONDITIONAL_AND_EXPRESSION
CONDITIONAL_OR_EXPRESSION CONDITIONAL_OR_EXPRESSION || CONDITIONAL_AND_EXPRESSION
CONDITIONAL_AND_EXPRESSION INCLUSIVE_OR_EXPRESSION
CONDITIONAL_AND_EXPRESSION CONDITIONAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION
INCLUSIVE_OR_EXPRESSION AND_EXPRESSION
INCLUSIVE_OR_EXPRESSION INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION
AND_EXPRESSION EQUALITY_EXPRESSION
AND_EXPRESSION AND_EXPRESSION & EQUALITY_EXPRESSION
EQUALITY_EXPRESSION RELATIONAL_EXPRESSION
EQUALITY_EXPRESSION EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION
EQUALITY_EXPRESSION EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION
RELATIONAL_EXPRESSION ADDITIVE_EXPRESSION
RELATIONAL_EXPRESSION RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION
RELATIONAL_EXPRESSION RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION
RELATIONAL_EXPRESSION RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION
RELATIONAL_EXPRESSION RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION
RELATIONAL_EXPRESSION RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION
ADDITIVE_EXPRESSION MULTIPLICATIVE_EXPRESSION
ADDITIVE_EXPRESSION ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION
ADDITIVE_EXPRESSION ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION
MULTIPLICATIVE_EXPRESSION UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION
UNARY_EXPRESSION - UNARY_EXPRESSION
UNARY_EXPRESSION UNARY_EXPRESSION_NOT_PLUS_MINUS
UNARY_EXPRESSION_NOT_PLUS_MINUS POST_FIX_EXPRESSION
UNARY_EXPRESSION_NOT_PLUS_MINUS ~ UNARY_EXPRESSION
UNARY_EXPRESSION_NOT_PLUS_MINUS ! UNARY_EXPRESSION
UNARY_EXPRESSION_NOT_PLUS_MINUS CAST_EXPRESSION UNARY_EXPRESSION
CAST_EXPRESSION ( PRIM_TYPE ) UNARY_EXPRESSION
CAST_EXPRESSION ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS
POST_FIX_EXPRESSION PRIMARY_EXPRESSION
POST_FIX_EXPRESSION EXPRESSION_NAME
PRIMARY_EXPRESSION PRIMARY_EXPRESSION_NO_NEW_ARRAY
PRIMARY_EXPRESSION ARRAY_CREATION_EXPRESSION
PRIMARY_EXPRESSION_NO_NEW_ARRAY LITERAL
PRIMARY_EXPRESSION_NO_NEW_ARRAY this
PRIMARY_EXPRESSION_NO_NEW_ARRAY CLASS_NAME . this
PRIMARY_EXPRESSION_NO_NEW_ARRAY ( EXPRESSION )
PRIMARY_EXPRESSION_NO_NEW_ARRAY CLASS_INSTANCE_CREATION_EXPRESSION
PRIMARY_EXPRESSION_NO_NEW_ARRAY FIELD_ACCESS
PRIMARY_EXPRESSION_NO_NEW_ARRAY METHOD_INVOCATION
PRIMARY_EXPRESSION_NO_NEW_ARRAY ARRAY_ACCESS
CLASS_INSTANCE_CREATION_EXPRESSION new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt )
CLASS_INSTANCE_CREATION_EXPRESSION PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt )
ARGUMENT_LISTopt ARGUMENT_LIST
ARGUMENT_LISTopt EPSILON
ARGUMENT_LIST EXPRESSION
ARGUMENT_LIST ARGUMENT_LIST , EXPRESSION
ARRAY_CREATION_EXPRESSION new NON_ARRAY_TYPE [ EXPRESSIONopt ]
FIELD_ACCESS PRIMARY_EXPRESSION . VARIABLE_ID
FIELD_ACCESS super . VARIABLE_ID
FIELD_ACCESS CLASS_NAME . super . VARIABLE_ID
METHOD_INVOCATION METHOD_NAME ( ARGUMENT_LISTopt )
METHOD_INVOCATION PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt )
METHOD_INVOCATION super . VARIABLE_ID ( ARGUMENT_LISTopt )
METHOD_INVOCATION CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt )
ARRAY_ACCESS EXPRESSION_NAME [ EXPRESSION ]
ARRAY_ACCESS PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ]
Here1
Here2
Computing start state
Computing states
erging states
.....................................................................................................................................................................................................................................................................................................................................................................................................Computing goto actions
....................................................................................................................................................................................................................................................................................................................................................................................................Computing reduce actions
Error performing LALR(1) construction: com.project.Parser.Error: Conflict on symbol ( in state 
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), [)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ||)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), short)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, {)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, STRING_LITERAL)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, *)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ;)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, .)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), /)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), if)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ==)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, })
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, else)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), byte)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ==)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), instanceof)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, char)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, while)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), !=)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, +)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, boolean)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, INTEGER_LITERAL)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), TRUE)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ))
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, return)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, for)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, byte)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), while)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, %)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), char)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, CHARACTER_LITERAL)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, TRUE)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), >=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), .)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), <)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, if)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), for)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ()
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), {)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, >)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), +)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), STRING_LITERAL)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, [)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ])
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, -)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, instanceof)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), >)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, short)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ~)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, <=)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, &&)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), &&)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, |)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), -)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, super)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, =)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, >=)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, !)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, this)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, /)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), this)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), &)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), !)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), return)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), *)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ||)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ~)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, FALSE)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), })
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), boolean)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ;)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, <)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), NULL)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, !=)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, &)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ,)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), FALSE)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), INTEGER_LITERAL)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, VARIABLE_ID)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, new)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), int)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, int)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, NULL)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), super)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), |)
(FIELD_ACCESS -> CLASS_NAME . super . VARIABLE_ID ##, ()
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), %)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), new)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), CHARACTER_LITERAL)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ])
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), ,)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), else)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ## ( ARGUMENT_LISTopt ), VARIABLE_ID)

Possible actions:
shift 
(EXPRESSION_NAME -> ## VARIABLE_ID, -)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, !=)
(LITERAL -> ## NULL, [)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, |)
(LITERAL -> ## STRING_LITERAL, <)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), ==)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, ||)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, |)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), &&)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, -)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, -)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), >)
(LITERAL -> ## INTEGER_LITERAL, &&)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, |)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, >=)
(ARGUMENT_LIST -> ## ARGUMENT_LIST , EXPRESSION, ))
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, instanceof)
(LITERAL -> ## NULL, instanceof)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, %)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, |)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, <)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], +)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, /)
(LITERAL -> ## FALSE, *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, -)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], -)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), TRUE)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, .)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), %)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, &)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, ,)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, ==)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, |)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, &)
(LITERAL -> ## NULL, ||)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], |)
(LITERAL -> ## STRING_LITERAL, !=)
(LITERAL -> ## STRING_LITERAL, [)
(LITERAL -> ## CHARACTER_LITERAL, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, ,)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), %)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, ||)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), !)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, &)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ~)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ])
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, .)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, >)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, |)
(FIELD_ACCESS -> ## super . VARIABLE_ID, =)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], /)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, ||)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, ()
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], [)
(AMBIGUOUS_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, .)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, &)
(FIELD_ACCESS -> ## super . VARIABLE_ID, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, +)
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_OR_EXPRESSION || CONDITIONAL_AND_EXPRESSION, ||)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, -)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, ==)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, ,)
(ASSIGNMENT -> ## LEFT_HAND_SIDE = ASSIGNMENT_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, [)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, +)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, ||)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, *)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, |)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, &&)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), else)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, !=)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], <)
(EXPRESSION -> ## ASSIGNMENT, ,)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), ,)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, /)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, <)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, ==)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, ==)
(LITERAL -> ## TRUE, %)
(LITERAL -> ## FALSE, +)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), <=)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], ==)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, |)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), boolean)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), STRING_LITERAL)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, |)
(LITERAL -> ## INTEGER_LITERAL, ||)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], ||)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), -)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), <=)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), >=)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, CHARACTER_LITERAL)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, +)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, *)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, -)
(CLASS_NAME -> ## VARIABLE_ID, .)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ||)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), /)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), byte)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), +)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, >=)
(LITERAL -> ## INTEGER_LITERAL, .)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, ,)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], ||)
(LITERAL -> ## FALSE, instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, ,)
(LITERAL -> ## NULL, .)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, &)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), ))
(LITERAL -> ## TRUE, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, ,)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, &&)
(FIELD_ACCESS -> ## super . VARIABLE_ID, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, ))
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, <=)
(CONDITIONAL_AND_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION, &&)
(LITERAL -> ## FALSE, &)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), -)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), .)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, &)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, !=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, &)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), +)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, %)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, >=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), FALSE)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, /)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, &&)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, &&)
(LITERAL -> ## NULL, <=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, !=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, >=)
(FIELD_ACCESS -> ## super . VARIABLE_ID, |)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), [)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, %)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), >=)
(EXPRESSION -> ## CONDITIONAL_OR_EXPRESSION, ,)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, VARIABLE_ID)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, ==)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, %)
(INCLUSIVE_OR_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION, &&)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], |)
(FIELD_ACCESS -> ## super . VARIABLE_ID, ||)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], =)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, [)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, ==)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, <)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), &&)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, ||)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, ,)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, ,)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, >=)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, >)
(CONDITIONAL_AND_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION, ,)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, >)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), /)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, <=)
(LITERAL -> ## FALSE, >=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, ==)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, &&)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, >=)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), ))
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, ,)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], <=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, <=)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), <=)
(LITERAL -> ## NULL, ,)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, -)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, &&)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, <=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, ==)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, <=)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), <=)
(INCLUSIVE_OR_EXPRESSION -> ## AND_EXPRESSION, ||)
(LITERAL -> ## FALSE, ==)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), -)
(ARGUMENT_LIST -> ## ARGUMENT_LIST , EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, |)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, !=)
(LITERAL -> ## CHARACTER_LITERAL, instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, instanceof)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), &)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), ,)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, &&)
(LITERAL -> ## CHARACTER_LITERAL, +)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, !=)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, ||)
(LITERAL -> ## NULL, +)
(LITERAL -> ## INTEGER_LITERAL, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, +)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), .)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, !=)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, !)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), [)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, ==)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, ||)
(EXPRESSION_NAME -> ## VARIABLE_ID, &&)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, &&)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, ,)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, +)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], ))
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), |)
(INCLUSIVE_OR_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, /)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, this)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, instanceof)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, ~)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, ||)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, ||)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, %)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, >=)
(CONDITIONAL_AND_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION, ||)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, &&)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, >)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, /)
(LITERAL -> ## FALSE, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, ||)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), /)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, instanceof)
(LITERAL -> ## INTEGER_LITERAL, |)
(CONDITIONAL_AND_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION, ))
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, ==)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, *)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, /)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, *)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, &)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, >=)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, ))
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, +)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), &)
(LITERAL -> ## TRUE, |)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, &&)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), ,)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, >=)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, >)
(LITERAL -> ## FALSE, &&)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), .)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), instanceof)
(LITERAL -> ## INTEGER_LITERAL, >)
(EXPRESSION_NAME -> ## VARIABLE_ID, ,)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), +)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), instanceof)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), .)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, .)
(LITERAL -> ## TRUE, <=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, &)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, ))
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, instanceof)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), >)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, *)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, ))
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, >)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, +)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, <)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), NULL)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), .)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, ||)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, |)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, !=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, ==)
(LITERAL -> ## INTEGER_LITERAL, /)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, [)
(LITERAL -> ## NULL, |)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, >=)
(FIELD_ACCESS -> ## super . VARIABLE_ID, instanceof)
(LITERAL -> ## FALSE, !=)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, ))
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, =)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, &)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), instanceof)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, instanceof)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, <=)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], %)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, &)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, instanceof)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), ))
(LITERAL -> ## STRING_LITERAL, .)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, <=)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, &&)
(LITERAL -> ## FALSE, -)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, <)
(LITERAL -> ## INTEGER_LITERAL, %)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), +)
(FIELD_ACCESS -> ## super . VARIABLE_ID, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, .)
(LITERAL -> ## TRUE, .)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, &&)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, +)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, ==)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, -)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, ||)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, ==)
(EXPRESSION_NAME -> ## VARIABLE_ID, ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, *)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), *)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, &&)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, >=)
(LITERAL -> ## TRUE, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, <=)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, ||)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, !=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, %)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), !=)
(LITERAL -> ## NULL, !=)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, /)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, <=)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, <)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, -)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), %)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, instanceof)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], .)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, *)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, ,)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, %)
(LITERAL -> ## CHARACTER_LITERAL, !=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, -)
(ARGUMENT_LISTopt -> ## EPSILON, ))
(LITERAL -> ## STRING_LITERAL, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, instanceof)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], <=)
(FIELD_ACCESS -> ## super . VARIABLE_ID, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, .)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, +)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, *)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, <=)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, <)
(EXPRESSION_NAME -> ## VARIABLE_ID, =)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, ,)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, <=)
(LITERAL -> ## TRUE, -)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, >=)
(LITERAL -> ## FALSE, ||)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], ||)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), /)
(LITERAL -> ## INTEGER_LITERAL, >=)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, &&)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, &&)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, >)
(EXPRESSION_NAME -> ## VARIABLE_ID, !=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), ||)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), this)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, INTEGER_LITERAL)
(EXPRESSION_NAME -> ## VARIABLE_ID, &)
(ARGUMENT_LIST -> ## EXPRESSION, ))
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, %)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, ==)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), ))
(EXPRESSION_NAME -> ## VARIABLE_ID, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, ))
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, >=)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], !=)
(LITERAL -> ## CHARACTER_LITERAL, *)
(EXPRESSION_NAME -> ## VARIABLE_ID, [)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, !=)
(CONDITIONAL_AND_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION, ,)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, INTEGER_LITERAL)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, &)
(LITERAL -> ## FALSE, [)
(EXPRESSION_NAME -> ## VARIABLE_ID, %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, &)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, +)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, <)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], ==)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, -)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, ||)
(FIELD_ACCESS -> ## super . VARIABLE_ID, <=)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, ,)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, instanceof)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), instanceof)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, <=)
(LEFT_HAND_SIDE -> ## EXPRESSION_NAME, =)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, !=)
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, ))
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, -)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), super)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, <)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, <)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, =)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, STRING_LITERAL)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), &&)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, ))
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, |)
(LITERAL -> ## INTEGER_LITERAL, *)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, ==)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ,)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], -)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, <=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, ||)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, >=)
(INCLUSIVE_OR_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION, ,)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, +)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, +)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, !=)
(INCLUSIVE_OR_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION, ||)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, ||)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, !=)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), ==)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, ))
(LITERAL -> ## NULL, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, !=)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, >=)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], ,)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), !=)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, &)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, +)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, &&)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), if)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, >)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), CHARACTER_LITERAL)
(METHOD_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, ()
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, ,)
(LITERAL -> ## STRING_LITERAL, ==)
(FIELD_ACCESS -> ## super . VARIABLE_ID, *)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), |)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], &)
(LITERAL -> ## STRING_LITERAL, >=)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], -)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), ))
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, |)
(LITERAL -> ## INTEGER_LITERAL, &)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, !=)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, >=)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, new)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ()
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), >=)
(LITERAL -> ## FALSE, ,)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, |)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], ,)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, instanceof)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, !=)
(INCLUSIVE_OR_EXPRESSION -> ## AND_EXPRESSION, &&)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, +)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, >)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), &)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), [)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, ,)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), [)
(LITERAL -> ## TRUE, +)
(LITERAL -> ## CHARACTER_LITERAL, |)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, ||)
(CONDITIONAL_AND_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION, &&)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, ==)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, ==)
(LITERAL -> ## CHARACTER_LITERAL, &&)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, ))
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, new)
(LITERAL -> ## STRING_LITERAL, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, ,)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, -)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), INTEGER_LITERAL)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], =)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, /)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, -)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, >)
(LITERAL -> ## TRUE, ))
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), +)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), &&)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, ==)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, &)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, <=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, instanceof)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, &)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, ||)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, ||)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, >=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, >)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, !=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, ==)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, &)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, ==)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, <)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], !=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, &&)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, |)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, |)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, >)
(LITERAL -> ## NULL, <)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, ,)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, %)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, +)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, &&)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], <)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), int)
(ASSIGNMENT -> ## LEFT_HAND_SIDE = ASSIGNMENT_EXPRESSION, ,)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, >=)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, NULL)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, !=)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, -)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], >)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, >)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, !=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, %)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), <)
(EXPRESSION -> ## ASSIGNMENT, ))
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, &)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, ||)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), <)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), &)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, -)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, <=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, %)
(EXPRESSION_NAME -> ## VARIABLE_ID, <=)
(LITERAL -> ## FALSE, >)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, TRUE)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, >=)
(LITERAL -> ## STRING_LITERAL, &&)
(LITERAL -> ## STRING_LITERAL, *)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, &)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), !=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), <)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, ||)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, NULL)
(LITERAL -> ## FALSE, ))
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), >)
(LITERAL -> ## TRUE, *)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, ,)
(LITERAL -> ## INTEGER_LITERAL, +)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, /)
(EXPRESSION_NAME -> ## VARIABLE_ID, >)
(LITERAL -> ## STRING_LITERAL, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, [)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, &&)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, |)
(LITERAL -> ## INTEGER_LITERAL, ==)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, ))
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), >=)
(EXPRESSION_NAME -> ## VARIABLE_ID, /)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, >=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, &)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, %)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), <)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, &&)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, &&)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, /)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), |)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, |)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, ||)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), ,)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, |)
(LITERAL -> ## CHARACTER_LITERAL, ,)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, &&)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, |)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), [)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, ==)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), -)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, &&)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), short)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, <=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, ||)
(FIELD_ACCESS -> ## super . VARIABLE_ID, ,)
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION, ))
(EXPRESSION_NAME -> ## VARIABLE_ID, instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, .)
(LITERAL -> ## TRUE, instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, &&)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, |)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, >)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, instanceof)
(LITERAL -> ## TRUE, [)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, instanceof)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), !=)
(EXPRESSION_NAME -> ## VARIABLE_ID, <)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, ~)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, !=)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, *)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], +)
(FIELD_ACCESS -> ## super . VARIABLE_ID, <)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, >)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, &)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), VARIABLE_ID)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), return)
(LITERAL -> ## NULL, -)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ))
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, <)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], >)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, >)
(LITERAL -> ## TRUE, &)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, .)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, ,)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], +)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, >)
(FIELD_ACCESS -> ## super . VARIABLE_ID, ))
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), .)
(LITERAL -> ## NULL, &)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, %)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), <)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, >)
(LITERAL -> ## NULL, &&)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, ))
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, ==)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, &&)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, ,)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), ||)
(LITERAL -> ## FALSE, /)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, >=)
(LITERAL -> ## STRING_LITERAL, +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, <=)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, !=)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, !=)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, VARIABLE_ID)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, !=)
(LITERAL -> ## NULL, *)
(LITERAL -> ## CHARACTER_LITERAL, .)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, !=)
(LITERAL -> ## INTEGER_LITERAL, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, -)
(EXPRESSION_NAME -> ## VARIABLE_ID, |)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), ,)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, instanceof)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], &&)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, *)
(CONDITIONAL_AND_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION, ))
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, >=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), .)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, >)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), *)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, <=)
(LITERAL -> ## NULL, >)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, <)
(LITERAL -> ## STRING_LITERAL, /)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, |)
(LITERAL -> ## FALSE, .)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, ,)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, -)
(LITERAL -> ## FALSE, %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, *)
(LITERAL -> ## CHARACTER_LITERAL, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, !=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, *)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, *)
(FIELD_ACCESS -> ## super . VARIABLE_ID, &&)
(LITERAL -> ## TRUE, /)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, &&)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], /)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, instanceof)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], >=)
(LITERAL -> ## CHARACTER_LITERAL, <=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, ,)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, instanceof)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, ))
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, +)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), })
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, !=)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, FALSE)
(LITERAL -> ## FALSE, <)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), >)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), /)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, !=)
(INCLUSIVE_OR_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION | AND_EXPRESSION, |)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, instanceof)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), ==)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], /)
(LITERAL -> ## NULL, %)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], &&)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, instanceof)
(LITERAL -> ## CHARACTER_LITERAL, ||)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, -)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), &&)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, <=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, |)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, &)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, super)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), &&)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, instanceof)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, |)
(LITERAL -> ## TRUE, >)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, +)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, <=)
(LEFT_HAND_SIDE -> ## FIELD_ACCESS, =)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, ==)
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_OR_EXPRESSION || CONDITIONAL_AND_EXPRESSION, ))
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), !=)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, |)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, |)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), <)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, ,)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, +)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, ))
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION >= ADDITIVE_EXPRESSION, >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, /)
(CONDITIONAL_AND_EXPRESSION -> ## INCLUSIVE_OR_EXPRESSION, ||)
(EXPRESSION_NAME -> ## VARIABLE_ID, >=)
(LITERAL -> ## INTEGER_LITERAL, ))
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, .)
(LITERAL -> ## NULL, ==)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), %)
(INCLUSIVE_OR_EXPRESSION -> ## AND_EXPRESSION, ,)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, ,)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), !=)
(EXPRESSION -> ## CONDITIONAL_OR_EXPRESSION, ))
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, >=)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, %)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, ==)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), ||)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, +)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), new)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, |)
(LITERAL -> ## INTEGER_LITERAL, !=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), ,)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, ))
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, !=)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), |)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), %)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), |)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, +)
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_AND_EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, <)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, ==)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), &)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], instanceof)
(METHOD_NAME -> ## VARIABLE_ID, ()
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], instanceof)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, +)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), <)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, +)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, |)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, /)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, ||)
(LITERAL -> ## CHARACTER_LITERAL, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), *)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), while)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, >)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, >=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, *)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), +)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), |)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, ))
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, /)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, ==)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), %)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, <=)
(LITERAL -> ## CHARACTER_LITERAL, &)
(INCLUSIVE_OR_EXPRESSION -> ## AND_EXPRESSION, |)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, *)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, -)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], *)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, >=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, +)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, &)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, &)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, <)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), instanceof)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, .)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, ))
(LITERAL -> ## TRUE, !=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, !=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, >)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), {)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), *)
(RELATIONAL_EXPRESSION -> ## ADDITIVE_EXPRESSION, &)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], .)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, <)
(ARGUMENT_LIST -> ## EXPRESSION, ,)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, ==)
(LITERAL -> ## STRING_LITERAL, &)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, .)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, *)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, &&)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, *)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, <=)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, instanceof)
(LITERAL -> ## NULL, >=)
(LITERAL -> ## CHARACTER_LITERAL, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, %)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, -)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), &)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], .)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, !=)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, >)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, *)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], instanceof)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), .)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, >)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), -)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), |)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, <=)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, &)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), !=)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, &&)
(LITERAL -> ## STRING_LITERAL, ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, /)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, <)
(LITERAL -> ## FALSE, <=)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, /)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, ,)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, !=)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, -)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, ))
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## LITERAL, %)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, ))
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), ||)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, -)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), /)
(LITERAL -> ## INTEGER_LITERAL, <)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), >=)
(LITERAL -> ## STRING_LITERAL, <=)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, super)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), ;)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, <=)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, !=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), for)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, <=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, /)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, -)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, /)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], &&)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, instanceof)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION <= ADDITIVE_EXPRESSION, >=)
(LITERAL -> ## TRUE, <)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, instanceof)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, &)
(LITERAL -> ## INTEGER_LITERAL, instanceof)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), >)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, <)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, &&)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, ,)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, /)
(INCLUSIVE_OR_EXPRESSION -> ## AND_EXPRESSION, ))
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], <)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, ))
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, &)
(FIELD_ACCESS -> ## super . VARIABLE_ID, -)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, &)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, !=)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), &)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, &)
(LITERAL -> ## STRING_LITERAL, %)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, >=)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], &)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, ))
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, ))
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, ,)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), %)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, %)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, /)
(LITERAL -> ## STRING_LITERAL, >)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, %)
(ADDITIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION, ,)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## POST_FIX_EXPRESSION, *)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, &&)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), <=)
(LEFT_HAND_SIDE -> ## ARRAY_ACCESS, =)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, +)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, &)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), <=)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], >=)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION, ==)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), ==)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, !=)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, <)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], >=)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, %)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, !=)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), >)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, ||)
(FIELD_ACCESS -> ## super . VARIABLE_ID, +)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, ||)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), /)
(LITERAL -> ## INTEGER_LITERAL, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ( EXPRESSION ), <=)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], *)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, TRUE)
(LITERAL -> ## TRUE, >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, -)
(LITERAL -> ## CHARACTER_LITERAL, [)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, !)
(UNARY_EXPRESSION -> ## UNARY_EXPRESSION_NOT_PLUS_MINUS, <=)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], !=)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, ))
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, +)
(EQUALITY_EXPRESSION -> ## EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION, ,)
(FIELD_ACCESS -> ## super . VARIABLE_ID, !=)
(LITERAL -> ## STRING_LITERAL, ,)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, >=)
(FIELD_ACCESS -> ## super . VARIABLE_ID, .)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, %)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, |)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, [)
(METHOD_INVOCATION -> ## CLASS_NAME . super . VARIABLE_ID ( ARGUMENT_LISTopt ), ==)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, ||)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, &&)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, <)
(ARRAY_CREATION_EXPRESSION -> ## new NON_ARRAY_TYPE [ EXPRESSIONopt ], %)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, ||)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, &&)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), <)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, |)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, ==)
(LITERAL -> ## TRUE, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, instanceof)
(FIELD_ACCESS -> ## super . VARIABLE_ID, ==)
(PRIMARY_EXPRESSION -> ## ARRAY_CREATION_EXPRESSION, instanceof)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, FALSE)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), ))
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, &)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, !=)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), -)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], ))
(LITERAL -> ## NULL, /)
(EQUALITY_EXPRESSION -> ## RELATIONAL_EXPRESSION, ,)
(AND_EXPRESSION -> ## EQUALITY_EXPRESSION, ))
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), char)
(AND_EXPRESSION -> ## AND_EXPRESSION & EQUALITY_EXPRESSION, ,)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, |)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION, <)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), *)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, CHARACTER_LITERAL)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, ,)
(EXPRESSION_NAME -> ## VARIABLE_ID, +)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, [)
(POST_FIX_EXPRESSION -> ## PRIMARY_EXPRESSION, ))
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], &)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, &)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, ==)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, ||)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## PRIMARY_EXPRESSION . new VARIABLE_ID ( ARGUMENT_LISTopt ), [)
(METHOD_INVOCATION -> ## METHOD_NAME ( ARGUMENT_LISTopt ), >)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION, -)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, *)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, ||)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, ,)
(LITERAL -> ## TRUE, &&)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## this, ))
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, ))
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, <)
(PRIMARY_EXPRESSION -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY, <=)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, >=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ! UNARY_EXPRESSION, <)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, |)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION < ADDITIVE_EXPRESSION, ||)
(MULTIPLICATIVE_EXPRESSION -> ## MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION, <=)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, >=)
(EXPRESSION_NAME -> ## VARIABLE_ID, *)
(LITERAL -> ## CHARACTER_LITERAL, %)
(CAST_EXPRESSION -> ## ( PRIM_TYPE ) UNARY_EXPRESSION, this)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, ()
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION > ADDITIVE_EXPRESSION, instanceof)
(MULTIPLICATIVE_EXPRESSION -> ## UNARY_EXPRESSION, ))
(CONDITIONAL_OR_EXPRESSION -> ## CONDITIONAL_OR_EXPRESSION || CONDITIONAL_AND_EXPRESSION, ,)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## FIELD_ACCESS, ||)
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, *)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, >=)
(RELATIONAL_EXPRESSION -> ## RELATIONAL_EXPRESSION instanceof ADDITIVE_EXPRESSION, ||)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_NAME . this, &&)
(LITERAL -> ## INTEGER_LITERAL, <=)
(LITERAL -> ## CHARACTER_LITERAL, ==)
(UNARY_EXPRESSION -> ## - UNARY_EXPRESSION, <=)
(POST_FIX_EXPRESSION -> ## EXPRESSION_NAME, -)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## CLASS_INSTANCE_CREATION_EXPRESSION, |)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, <)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), /)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, ,)
(EXPRESSION_NAME -> ## VARIABLE_ID, ==)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, %)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, /)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), [)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, .)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## ~ UNARY_EXPRESSION, %)
(ARGUMENT_LISTopt -> ## ARGUMENT_LIST, ))
(EXPRESSION_NAME -> ## AMBIGUOUS_NAME . VARIABLE_ID, ||)
(FIELD_ACCESS -> ## PRIMARY_EXPRESSION . VARIABLE_ID, instanceof)
(METHOD_INVOCATION -> ## PRIMARY_EXPRESSION . ( ARGUMENT_LISTopt ), !=)
(UNARY_EXPRESSION_NOT_PLUS_MINUS -> ## CAST_EXPRESSION UNARY_EXPRESSION, <)
(LITERAL -> ## CHARACTER_LITERAL, /)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), *)
(METHOD_INVOCATION -> ## super . VARIABLE_ID ( ARGUMENT_LISTopt ), -)
(AMBIGUOUS_NAME -> ## VARIABLE_ID, .)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, =)
(ADDITIVE_EXPRESSION -> ## ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION, instanceof)
(LITERAL -> ## STRING_LITERAL, instanceof)
(FIELD_ACCESS -> ## super . VARIABLE_ID, %)
(LITERAL -> ## CHARACTER_LITERAL, >=)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## METHOD_INVOCATION, ==)
(ARRAY_ACCESS -> ## PRIMARY_EXPRESSION_NO_NEW_ARRAY [ EXPRESSION ], *)
(FIELD_ACCESS -> ## super . VARIABLE_ID, >=)
(FIELD_ACCESS -> ## CLASS_NAME . super . VARIABLE_ID, [)
(PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ## ARRAY_ACCESS, |)
(CLASS_INSTANCE_CREATION_EXPRESSION -> ## new CLASS_OR_INTERFACE_TYPE ( ARGUMENT_LISTopt ), <=)
(METHOD_INVOCATION -> CLASS_NAME . super . VARIABLE_ID ( ## ARGUMENT_LISTopt ), -)
(CAST_EXPRESSION -> ## ( REFERENCE_TYPE ) UNARY_EXPRESSION_NOT_PLUS_MINUS, STRING_LITERAL)
(ARRAY_ACCESS -> ## EXPRESSION_NAME [ EXPRESSION ], [)

reduce FIELD_ACCESS CLASS_NAME . super . VARIABLE_ID
