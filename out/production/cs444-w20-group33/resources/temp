
//////////////////// CLASSES ////////////////////

CLASS_DECLARATION -> CLASS_MODIFIERS 'class' 'VARIABLE_ID' SUPERopt INTERFACESopt '{' CLASS_BODY '}'

CLASS_MODIFIERS -> CLASS_MODIFIER CLASS_MODIFIERS
CLASS_MODIFIERS -> CLASS_MODIFIER

CLASS_MODIFIER -> 'static'
CLASS_MODIFIER -> 'abstract'
CLASS_MODIFIER -> 'public'
CLASS_MODIFIER -> 'final'

SUPERopt -> SUPER
SUPERopt -> EPSILON

SUPER -> 'extends' CLASS_TYPE

INTERFACESopt -> INTERFACES
INTERFACESopt -> EPSILON

INTERFACES -> 'implements' INTERFACE_TYPE_LIST

INTERFACE_TYPE_LIST -> INTERFACE_TYPE
INTERFACE_TYPE_LIST -> INTERFACE_TYPE_LIST ',' INTERFACE_TYPE

CLASS_BODY -> CLASS_BODY METHOD_DECLARATION
CLASS_BODY -> CLASS_BODY PROPERTY_DECLARATION
CLASS_BODY -> CLASS_BODY ';'
CLASS_BODY -> EPSILON

//////////////////// PROPERTIES ////////////////////

PROPERTY -> PROPERTY_MODIFIERS TYPE 'VARIABLE_ID' INSTANTIATION ';'

PROPERTY_MODIFIERS -> PROPERTY_MODIFIER
PROPERTY_MODIFIERS -> PROPERTY_MODIFIER PROPERTY_MODIFIERS

PROPERTY_MODIFIER -> 'static'
PROPERTY_MODIFIER -> 'public'
PROPERTY_MODIFIER -> 'protected'

INSTANTIATION -> '=' EXPRESSION
INSTANTIATION -> EPSILON

//////////////////// METHODS ////////////////////

METHOD -> METHOD_MODIFIERS RETURN_TYPE METHOD_DECLARATOR METHOD_IMPLEMENTATION

METHOD_MODIFIERS -> METHOD_MODIFIER METHOD_MODIFIERS
METHOD_MODIFIERS -> METHOD_MODIFIER

METHOD_MODIFIER -> 'static'
METHOD_MODIFIER -> 'abstract'
METHOD_MODIFIER -> 'public'
METHOD_MODIFIER -> 'final'
METHOD_MODIFIER -> 'protected'
METHOD_MODIFIER -> 'native'

METHOD_DECLARATOR -> 'VARIABLE_ID' '(' METHOD_PARAMSopt ')'

METHOD_PARAMSopt -> METHOD_PARAMS
METHOD_PARAMSopt -> EPSILON

METHOD_PARAMS -> METHOD_PARAM
METHOD_PARAMS -> METHOD_PARAMS ',' METHOD_PARAM

METHOD_PARAM -> TYPE 'VARIABLE_ID'

METHOD_IMPLEMENTATION -> BLOCK
METHOD_IMPLEMENTATION -> ';'

//////////////////// BLOCK ////////////////////

BLOCK -> '{' BLOCK_STATEMENTSopt '}'

BLOCK_STATEMENTSopt -> BLOCK_STATEMENTS
BLOCK_STATEMENTSopt -> EPSILON

BLOCK_STATEMENTS -> BLOCK_STATEMENT
BLOCK_STATEMENTS -> BLOCK_STATEMENTS BLOCK_STATEMENT

BLOCK_STATEMENT -> TYPE 'VARIABLE_ID' INSTANTIATION
BLOCK_STATEMENT -> STATEMENT

//////////////////// STATEMENT ////////////////////

STATEMENT -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT -> IF_STATEMENT
STATEMENT -> IF_ELSE_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> FOR_STATEMENT

STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> BLOCK
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> ';'
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> EXPRESSION_STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> RETURN_STATEMENT

STATEMENT_NO_SHORT_IF -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT_NO_SHORT_IF -> IF_ELSE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> WHILE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> FOR_STATEMENT_NO_SHORT_IF

EXPRESSION_STATEMENT -> ASSIGNMENT ';'
EXPRESSION_STATEMENT -> METHOD_INVOCATION ';'
EXPRESSION_STATEMENT -> CLASS_INSTANCE_CREATION_EXPRESSION ';'

    //////////////////// IF STATEMENT ////////////////////
    IF_STATEMENT -> 'if' '('' EXPRESSION ')' STATEMENT
    IF_ELSE_STATEMENT -> 'if' '('' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT
    IF_ELSE_STATEMENT_NO_SHORT_IF -> 'if' '('' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT_NO_SHORT_IF

    //////////////////// WHILE STATEMENT ////////////////////
    WHILE_STATEMENT -> 'while' '(' EXPRESSION ')' STATEMENT
    WHILE_STATEMENT_NO_SHORT_IF -> 'while' '(' EXPRESSION ')' STATEMENT_NO_SHORT_IF

    //////////////////// FOR STATEMENT ////////////////////
    FOR_STATEMENT -> 'for' '(' FOR_INITopt ';' EXPRESSIONopt ';' FOR_UPDATEopt ')' STATEMENT
    FOR_STATEMENT_NO_SHORT_IF -> 'for' '(' FOR_INITopt ';' EXPRESSIONopt ';' FOR_UPDATEopt ')' STATEMENT_NO_SHORT_IF

    LOCAL_VARIABLE_DECLARATION -> TYPE 'VARIABLE_ID' INSTANTIATION ';'

    FOR_INITopt -> FOR_INIT
        FOR_INIT-> LOCAL_VARIABLE_DECLARATION
        FOR_INIT-> EXPRESSION_STATEMENT
    FOR_INITopt -> EPSILON

    FOR_UPDATEopt -> EXPRESSION_STATEMENT

    //////////////////// RETURN STATEMENT ////////////////////
    RETURN_STATEMENT -> 'return' EXPRESSIONopt

//////////////////// EXPRESSIONS ////////////////////

    EXPRESSIONopt -> EXPRESSION
    EXPRESSIONopt -> EPSILON

    EXPRESSION -> ASSIGNMENT_EXPRESSION

    ASSIGNMENT -> LEFT_HAND_SIDE '=' ASSIGNMENT_EXPRESSION
        LEFT_HAND_SIDE -> EXPRESSION_NAME
        LEFT_HAND_SIDE -> FIELD_ACCESS
        LEFT_HAND_SIDE -> ARRAY_ACCESS

    ASSIGNMENT_EXPRESSION -> ASSIGNMENT
    ASSIGNMENT_EXPRESSION -> CONDITIONAL_OR_EXPRESSION

    //////////////////// CONDITIONAL EXPRESSIONS ////////////////////
    CONDITIONAL_OR_EXPRESSION -> CONDITIONAL_AND_EXPRESSION
    CONDITIONAL_OR_EXPRESSION -> CONDITIONAL_OR_EXPRESSION '||' CONDITIONAL_AND_EXPRESSION

    CONDITIONAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION
    CONDITIONAL_AND_EXPRESSION -> CONDITIONAL_AND_EXPRESSION '&&' INCLUSIVE_OR_EXPRESSION

    INCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION
    INCLUSIVE_OR_EXPRESSION -> INCLUSIVE_OR_EXPRESSION '|' AND_EXPRESSION

    AND_EXPRESSION -> EQUALITY_EXPRESSION
        AND_EXPRESSION -> AND_EXPRESSION '&' EQUALITY_EXPRESSION

    EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION
    EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION '==' RELATIONAL_EXPRESSION
    EQUALITY_EXPRESSION -> EQUALITY_EXPRESSION '!=' RELATIONAL_EXPRESSION

    RELATIONAL_EXPRESSION -> ADDITIVE_EXPRESSION
    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION '<' ADDITIVE_EXPRESSION
    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION '>' ADDITIVE_EXPRESSION
    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION '<=' ADDITIVE_EXPRESSION
    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION '>=' ADDITIVE_EXPRESSION
    RELATIONAL_EXPRESSION -> RELATIONAL_EXPRESSION 'instanceof' ADDITIVE_EXPRESSION

    ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION
    ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION '+' MULTIPLICATIVE_EXPRESSION
    ADDITIVE_EXPRESSION -> ADDITIVE_EXPRESSION '-' MULTIPLICATIVE_EXPRESSION

    MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION
    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION '*' UNARY_EXPRESSION
    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION '/' UNARY_EXPRESSION
    MULTIPLICATIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION '%' UNARY_EXPRESSION

    UNARY_EXPRESSION -> '-' UNARY_EXPRESSION
    UNARY_EXPRESSION -> UNARY_EXPRESSION_NOT_PLUS_MINUS

    UNARY_EXPRESSION_NOT_PLUS_MINUS -> POST_FIX_EXPRESSION
    UNARY_EXPRESSION_NOT_PLUS_MINUS -> '~' UNARY_EXPRESSION
    UNARY_EXPRESSION_NOT_PLUS_MINUS -> '!' UNARY_EXPRESSION
    UNARY_EXPRESSION_NOT_PLUS_MINUS -> CAST_EXPRESSION UNARY_EXPRESSION

    CAST_EXPRESSION -> '(' PRIM_TYPE ')' UNARY_EXPRESSION
    CAST_EXPRESSION -> '(' REFERENCE_TYPE ')' UNARY_EXPRESSION_NOT_PLUS_MINUS

    POST_FIX_EXPRESSION -> PRIMARY_EXPRESSION
    POST_FIX_EXPRESSION -> EXPRESSION_NAME

    //////////////////// PRIMARY EXPRESSIONS ////////////////////
    PRIMARY_EXPRESSION -> PRIMARY_EXPRESSION_NO_NEW_ARRAY
    PRIMARY_EXPRESSION -> ARRAY_CREATION_EXPRESSION

    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> LITERAL
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> 'this'
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> CLASS_NAME '.' 'this'
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> '(' EXPRESSION ')'
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> CLASS_INSTANCE_CREATION_EXPRESSION
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> FIELD_ACCESS
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> METHOD_INVOCATION
    PRIMARY_EXPRESSION_NO_NEW_ARRAY -> ARRAY_ACCESS

    CLASS_INSTANCE_CREATION_EXPRESSION -> 'new' CLASS_OR_INTERFACE_TYPE '(' ARGUMENT_LISTopt ')'
    CLASS_INSTANCE_CREATION_EXPRESSION -> PRIMARY_EXPRESSION '.' ''new' 'VARIABLE_ID' '(' ARGUMENT_LISTopt ')'

    ARGUMENT_LISTopt -> ARGUMENT_LIST
    ARGUMENT_LISTopt -> EPSILON

    ARGUMENT_LIST -> EXPRESSION
    ARGUMENT_LIST -> ARGUMENT_LIST ',' EXPRESSION

    ARRAY_CREATION_EXPRESSION -> 'new' NON_ARRAY_TYPE '[' EXPRESSIONopt ']'

    FIELD_ACCESS -> PRIMARY_EXPRESSION '.' 'VARIABLE_ID'
    FIELD_ACCESS -> 'super' '.' 'VARIABLE_ID'
    FIELD_ACCESS -> CLASS_NAME '.' 'super' '.' 'VARIABLE_ID'

    METHOD_INVOCATION -> EXPRESSION_NAME '(' ARGUMENT_LISTopt ')'
    METHOD_INVOCATION -> PRIMARY_EXPRESSION '.' '(' ARGUMENT_LISTopt ')'
    METHOD_INVOCATION -> 'super' '.' 'VARIABLE_ID' '(' ARGUMENT_LISTopt ')'
    METHOD_INVOCATION -> CLASS_NAME '.' 'super' '.' 'VARIABLE_ID' '(' ARGUMENT_LISTopt ')'

    ARRAY_ACCESS -> EXPRESSION_NAME '[' EXPRESSION ']'
    ARRAY_ACCESS -> PRIMARY_EXPRESSION_NO_NEW_ARRAY '[' EXPRESSION ']'