S -> BOF COMPILATIONUNIT EOF


LITERAL -> 'INTEGER_LITERAL'
LITERAL -> 'CHARACTER_LITERAL'
LITERAL -> 'STRING_LITERAL'
LITERAL -> 'NULL'
LITERAL -> 'TRUE'
LITERAL -> 'FALSE'

# Types, Values and Variables

TYPE -> PrimitiveType
TYPE -> ReferenceType

PRIMITIVETYPE -> NUMERICTYPE
PRIMITIVETYPE -> 'boolean'

NUMERICTYPE -> INTEGRALTYPE
NUMERICTYPE -> FLOATINGPOINTTYPE

INTEGRALTYPE -> 'byte'
INTEGRALTYPE -> 'short'
INTEGRALTYPE -> 'int'
INTEGRALTYPE -> 'long'
INTEGRALTYPE -> 'char'

FLOATINGPOINTTYPE -> 'float'
FLOATINGPOINTTYPE -> 'double'

REFERENCETYPE -> CLASSORINTERFACETYPE
REFERENCETYPE -> ARRAYTYPE

CLASSORINTERFACETYPE -> NAME

CLASSTYPE -> CLASSORINTERFACETYPE

INTERFACETYPE -> CLASSORINTERFACETYPE

ARRAYTYPE -> PRIMITIVETYPE [ ]
ARRAYTYPE -> NAME [ ]
ARRAYTYPE -> ARRAYTYPE [ ]

# Names

NAME -> SIMPLENAME
NAME -> QUALIFIEDNAME

# Might be variable_id here for identifier
SIMPLENAME -> IDENTIFIER

QUALIFIEDNAME -> NAME . IDENTIFIER

# Packages

COMPILATIONUNIT -> PACKAGEDECLARATIONOPT IMPORTDECLARATIONSOPT TYPEDECLARATIONSOPT

IMPORTDECLARATIONS -> IMPORTDECLARATION
IMPORTDECLARATIONS -> IMPORTDECLARATIONS IMPORTDECLARATION


TYPEDECLARATIONS -> TYPEDECLARATION
TYPEDECLARATIONS -> TYPEDECLARATIONS TYPEDECLARATION

PACKAGEDECLARATION -> 'package' NAME ;

IMPORTDECLARATION -> SINGLETYPEIMPORTDECLARATION
IMPORTDECLARATION -> TYPEIMPORTONDEMANDDECLARATION

SINGLETYPEIMPORTDECLARATION -> 'import' NAME ;

TYPEIMPORTONDEMANDDECLARATION -> 'import' NAME . * ;

TYPEDECLARATION -> CLASSDECLARATION
TYPEDECLARATION -> INTERFACEDECLARATION
TYPEDECLARATION -> ;


# LALR productions

MODIFIERS -> MODIFIER
MODIFIERS -> MODIFIERS MODIFIER

MODIFIER -> 'public'
MODIFIER -> 'protected'
MODIFIER -> 'private'
MODIFIER -> 'static'
MODIFIER -> 'abstract'
MODIFIER -> 'final'
MODIFIER -> 'native'
MODIFIER -> 'synchronized'
MODIFIER -> 'transient'
MODIFIER -> 'volatile'


# Classes

CLASSDECLARATION -> MODIFIERSOPT 
CLASSDECLARATION -> 'class' 
CLASSDECLARATION -> IDENTIFIER 
CLASSDECLARATION -> SUPEROPT 
CLASSDECLARATION -> INTERFACESOPT 
CLASSDECLARATION -> CLASSBODY

SUPER -> 'extends' 
SUPER -> CLASSTYPE

INTERFACES -> 'implements' 
INTERFACES -> INTERFACETYPELIST

INTERFACETYPELIST -> INTERFACETYPE
INTERFACETYPELIST -> INTERFACETYPELIST , INTERFACETYPE

CLASSBODY -> { CLASSBODYDECLARATIONSOPT }

CLASSBODYDECLARATIONS -> CLASSBODYDECLARATION
CLASSBODYDECLARATIONS -> CLASSBODYDECLARATIONS CLASSBODYDECLARATION

CLASSBODYDECLARATION -> CLASSMEMBERDECLARATION
CLASSBODYDECLARATION -> STATICINITIALIZER
CLASSBODYDECLARATION -> CONSTRUCTORDECLARATION

CLASSMEMBERDECLARATION -> FIELDDECLARATION
CLASSMEMBERDECLARATION -> METHODDECLARATION

# Field Declarations

FIELDDECLARATION -> MODIFIERSOPT TYPE VARIABLEDECLARATORS ;

VARIABLEDECLARATORS -> VARIABLEDECLARATOR
VARIABLEDECLARATORS -> VARIABLEDECLARATORS , VARIABLEDECLARATOR

VARIABLEDECLARATOR -> VARIABLEDECLARATORID
VARIABLEDECLARATOR -> VARIABLEDECLARATORID = VARIABLEINITIALIZER

VARIABLEDECLARATORID -> IDENTIFIER
VARIABLEDECLARATORID -> VARIABLEDECLARATORID [ ]

VARIABLEINITIALIZER -> EXPRESSION
VARIABLEINITIALIZER -> ARRAYINITIALIZER

# Method Declarations

METHODDECLARATION -> METHODHEADER METHODBODY

METHODHEADER -> MODIFIERSOPT TYPE METHODDECLARATOR THROWSOPT
METHODHEADER -> MODIFIERSOPT 'void' METHODDECLARATOR THROWSOPT

METHODDECLARATOR:
METHODDECLARATOR -> IDENTIFIER ( FORMALPARAMETERLISTOPT )
METHODDECLARATOR -> METHODDECLARATOR [ ]

FORMALPARAMETERLIST -> FORMALPARAMETER
FORMALPARAMETERLIST -> FORMALPARAMETERLIST , FORMALPARAMETER

FORMALPARAMETER -> TYPE VARIABLEDECLARATORID

THROWS -> 'throws' CLASSTYPELIST

CLASSTYPELIST -> CLASSTYPE
CLASSTYPELIST -> CLASSTYPELIST , CLASSTYPE

METHODBODY -> BLOCK
METHODBODY -> ;

# Static initializers

STATICINITIALIZER -> 'static' BLOCK


# Constructor Declarations

CONSTRUCTORDECLARATION -> MODIFIERSOPT CONSTRUCTORDECLARATOR THROWSOPT CONSTRUCTORBODY

CONSTRUCTORDECLARATOR -> SIMPLENAME ( FORMALPARAMETERLISTOPT )

CONSTRUCTORBODY -> { EXPLICITCONSTRUCTORINVOCATIONOPT BLOCKSTATEMENTSOPT }

EXPLICITCONSTRUCTORINVOCATION -> 'this' ( ARGUMENTLISTOPT ) ;
EXPLICITCONSTRUCTORINVOCATION -> 'super' ( ARGUMENTLISTOPT ) ;


# Interface declarations

INTERFACEDECLARATION -> MODIFIERSOPT 'interface' IDENTIFIER EXTENDSINTERFACESOPT INTERFACEBODY

EXTENDSINTERFACES -> 'extends' INTERFACETYPE
EXTENDSINTERFACES -> EXTENDSINTERFACES , INTERFACETYPE

INTERFACEBODY -> { INTERFACEMEMBERDECLARATIONSOPT }

INTERFACEMEMBERDECLARATIONS -> INTERFACEMEMBERDECLARATION
INTERFACEMEMBERDECLARATIONS -> INTERFACEMEMBERDECLARATIONS INTERFACEMEMBERDECLARATION

INTERFACEMEMBERDECLARATION -> CONSTANTDECLARATION
INTERFACEMEMBERDECLARATION -> ABSTRACTMETHODDECLARATION

CONSTANTDECLARATION -> FIELDDECLARATION

ABSTRACTMETHODDECLARATION -> METHODHEADER ;


# Arrays, OPT here is wierd

ARRAYINITIALIZER -> { VARIABLEINITIALIZERSOPT ,OPT }

VARIABLEINITIALIZERS -> VARIABLEINITIALIZER
VARIABLEINITIALIZERS -> VARIABLEINITIALIZERS , VARIABLEINITIALIZER


# Blocks and statements

BLOCK -> { BLOCKSTATEMENTSOPT }

BLOCKSTATEMENTS -> BLOCKSTATEMENT
BLOCKSTATEMENTS -> BLOCKSTATEMENTS BLOCKSTATEMENT

BLOCKSTATEMENT -> LOCALVARIABLEDECLARATIONSTATEMENT
BLOCKSTATEMENT -> STATEMENT

LOCALVARIABLEDECLARATIONSTATEMENT -> LOCALVARIABLEDECLARATION ;

LOCALVARIABLEDECLARATION -> TYPE VARIABLEDECLARATORS

STATEMENT -> STATEMENTWITHOUTTRAILINGSUBSTATEMENT
STATEMENT -> LABELEDSTATEMENT
STATEMENT -> IFTHENSTATEMENT
STATEMENT -> IFTHENELSESTATEMENT
STATEMENT -> WHILESTATEMENT
STATEMENT -> FORSTATEMENT

STATEMENTNOSHORTIF -> STATEMENTWITHOUTTRAILINGSUBSTATEMENT
STATEMENTNOSHORTIF -> LABELEDSTATEMENTNOSHORTIF
STATEMENTNOSHORTIF -> IFTHENELSESTATEMENTNOSHORTIF
STATEMENTNOSHORTIF -> WHILESTATEMENTNOSHORTIF
STATEMENTNOSHORTIF -> FORSTATEMENTNOSHORTIF

STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> BLOCK
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> EMPTYSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> EXPRESSIONSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> SWITCHSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> DOSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> BREAKSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> CONTINUESTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> RETURNSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> SYNCHRONIZEDSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> THROWSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT -> TRYSTATEMENT

EMPTYSTATEMENT -> ;

LABELEDSTATEMENT -> IDENTIFIER : STATEMENT

LABELEDSTATEMENTNOSHORTIF -> IDENTIFIER : STATEMENTNOSHORTIF

EXPRESSIONSTATEMENT -> STATEMENTEXPRESSION ;

STATEMENTEXPRESSION -> ASSIGNMENT
STATEMENTEXPRESSION -> PREINCREMENTEXPRESSION
STATEMENTEXPRESSION -> PREDECREMENTEXPRESSION
STATEMENTEXPRESSION -> POSTINCREMENTEXPRESSION
STATEMENTEXPRESSION -> POSTDECREMENTEXPRESSION
STATEMENTEXPRESSION -> METHODINVOCATION
STATEMENTEXPRESSION -> CLASSINSTANCECREATIONEXPRESSION

IFTHENSTATEMENT -> 'if' ( EXPRESSION ) STATEMENT

IFTHENELSESTATEMENT -> 'if' ( EXPRESSION ) STATEMENTNOSHORTIF 'else' STATEMENT

IFTHENELSESTATEMENTNOSHORTIF -> 'if' ( EXPRESSION ) STATEMENTNOSHORTIF 'else' STATEMENTNOSHORTIF

SWITCHSTATEMENT -> 'switch' ( EXPRESSION ) SWITCHBLOCK

SWITCHBLOCK -> { SWITCHBLOCKSTATEMENTGROUPSOPT SWITCHLABELSOPT }

SWITCHBLOCKSTATEMENTGROUPS -> SWITCHBLOCKSTATEMENTGROUP
SWITCHBLOCKSTATEMENTGROUPS -> SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGROUP

SWITCHBLOCKSTATEMENTGROUP -> SWITCHLABELS BLOCKSTATEMENTS

SWITCHLABELS -> SWITCHLABEL
SWITCHLABELS -> SWITCHLABELS SWITCHLABEL


SWITCHLABEL -> 'case' CONSTANTEXPRESSION :
SWITCHLABEL -> 'default' :

WHILESTATEMENT -> 'while' ( EXPRESSION ) STATEMENT

WHILESTATEMENTNOSHORTIF -> 'while' ( EXPRESSION ) STATEMENTNOSHORTIF

DOSTATEMENT -> 'do' STATEMENT 'while' ( EXPRESSION ) ;

# I think statement is part of this
FORSTATEMENT -> 'for' ( FORINITOPT ; EXPRESSIONOPT ; FORUPDATEOPT ) STATEMENT

FORSTATEMENTNOSHORTIF -> 'for' ( FORINITOPT ; EXPRESSIONOPT ; FORUPDATEOPT ) STATEMENTNOSHORTIF

FORINIT -> STATEMENTEXPRESSIONLIST
FORINIT -> LOCALVARIABLEDECLARATION

FORUPDATE -> STATEMENTEXPRESSIONLIST

STATEMENTEXPRESSIONLIST -> STATEMENTEXPRESSION
STATEMENTEXPRESSIONLIST -> STATEMENTEXPRESSIONLIST , STATEMENTEXPRESSION

BREAKSTATEMENT -> 'break' IDENTIFIEROPT ;

CONTINUESTATEMENT -> 'continue' IDENTIFIEROPT ;

RETURNSTATEMENT -> 'return' EXPRESSIONOPT ;

THROWSTATEMENT -> 'throw' EXPRESSION ;

SYNCHRONIZEDSTATEMENT -> 'synchronized' ( EXPRESSION ) BLOCK

TRYSTATEMENT -> 'try' BLOCK CATCHES
TRYSTATEMENT -> 'try' BLOCK CATCHESOPT FINALLY

CATCHES -> CATCHCLAUSE
CATCHES -> CATCHES CATCHCLAUSE

CATCHCLAUSE -> 'catch' ( FORMALPARAMETER ) BLOCK
FINALLY -> 'finally' BLOCK

# Expressions


PRIMARY -> PRIMARYNONEWARRAY
PRIMARY -> ARRAYCREATIONEXPRESSION

PRIMARYNONEWARRAY -> LITERAL
PRIMARYNONEWARRAY -> 'this'
PRIMARYNONEWARRAY -> ( EXPRESSION )
PRIMARYNONEWARRAY -> CLASSINSTANCECREATIONEXPRESSION
PRIMARYNONEWARRAY -> FIELDACCESS
PRIMARYNONEWARRAY -> METHODINVOCATION
PRIMARYNONEWARRAY -> ARRAYACCESS

CLASSINSTANCECREATIONEXPRESSION -> 'new' CLASSTYPE ( ARGUMENTLISTOPT )

ARGUMENTLIST -> EXPRESSION
ARGUMENTLIST -> ARGUMENTLIST , EXPRESSION


ARRAYCREATIONEXPRESSION -> NEW PRIMITIVETYPE DIMEXPRS DIMSOPT
ARRAYCREATIONEXPRESSION -> NEW CLASSORINTERFACETYPE DIMEXPRS DIMSOPT

DIMEXPRS -> DIMEXPR
DIMEXPRS -> DIMEXPRS DIMEXPR

DIMEXPR -> [ EXPRESSION ]

DIMS -> [ ]
DIMS -> DIMS [ ]

FIELDACCESS -> PRIMARY . IDENTIFIER
FIELDACCESS -> 'super' . IDENTIFIER

METHODINVOCATION -> NAME ( ARGUMENTLISTOPT )
METHODINVOCATION -> PRIMARY . IDENTIFIER ( ARGUMENTLISTOPT )
METHODINVOCATION -> 'super' . IDENTIFIER ( ARGUMENTLISTOPT )

ARRAYACCESS -> NAME [ EXPRESSION ]
ARRAYACCESS -> PRIMARYNONEWARRAY [ EXPRESSION ]

POSTFIXEXPRESSION -> PRIMARY
POSTFIXEXPRESSION -> NAME
POSTFIXEXPRESSION -> POSTINCREMENTEXPRESSION
POSTFIXEXPRESSION -> POSTDECREMENTEXPRESSION

POSTINCREMENTEXPRESSION -> POSTFIXEXPRESSION ++

POSTDECREMENTEXPRESSION -> POSTFIXEXPRESSION --

UNARYEXPRESSION -> PREINCREMENTEXPRESSION
UNARYEXPRESSION -> PREDECREMENTEXPRESSION
UNARYEXPRESSION -> + UNARYEXPRESSION
UNARYEXPRESSION -> - UNARYEXPRESSION
UNARYEXPRESSION -> UNARYEXPRESSIONNOTPLUSMINUS


PREINCREMENTEXPRESSION -> ++ UNARYEXPRESSION

PREDECREMENTEXPRESSION -> -- UNARYEXPRESSION

UNARYEXPRESSIONNOTPLUSMINUS -> POSTFIXEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS -> ~ UNARYEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS -> ! UNARYEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS -> CASTEXPRESSION

CASTEXPRESSION -> ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION
CASTEXPRESSION -> ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS
CASTEXPRESSION -> ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS


MULTIPLICATIVEEXPRESSION -> UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION -> MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION -> MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION -> MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION

ADDITIVEEXPRESSION -> MULTIPLICATIVEEXPRESSION
ADDITIVEEXPRESSION -> ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION
ADDITIVEEXPRESSION -> ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION

SHIFTEXPRESSION -> ADDITIVEEXPRESSION
SHIFTEXPRESSION -> SHIFTEXPRESSION << ADDITIVEEXPRESSION
SHIFTEXPRESSION -> SHIFTEXPRESSION >> ADDITIVEEXPRESSION
SHIFTEXPRESSION -> SHIFTEXPRESSION >>> ADDITIVEEXPRESSION

RELATIONALEXPRESSION -> SHIFTEXPRESSION
RELATIONALEXPRESSION -> RELATIONALEXPRESSION < SHIFTEXPRESSION
RELATIONALEXPRESSION -> RELATIONALEXPRESSION > SHIFTEXPRESSION
RELATIONALEXPRESSION -> RELATIONALEXPRESSION <= SHIFTEXPRESSION
RELATIONALEXPRESSION -> RELATIONALEXPRESSION >= SHIFTEXPRESSION
RELATIONALEXPRESSION -> RELATIONALEXPRESSION 'instanceof' REFERENCETYPE



EQUALITYEXPRESSION -> RELATIONALEXPRESSION
EQUALITYEXPRESSION -> EQUALITYEXPRESSION == RELATIONALEXPRESSION
EQUALITYEXPRESSION -> EQUALITYEXPRESSION != RELATIONALEXPRESSION

ANDEXPRESSION -> EQUALITYEXPRESSION
ANDEXPRESSION -> ANDEXPRESSION & EQUALITYEXPRESSION

EXCLUSIVEOREXPRESSION -> ANDEXPRESSION
EXCLUSIVEOREXPRESSION -> EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION

INCLUSIVEOREXPRESSION -> EXCLUSIVEOREXPRESSION
INCLUSIVEOREXPRESSION -> INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION

CONDITIONALANDEXPRESSION -> INCLUSIVEOREXPRESSION
CONDITIONALANDEXPRESSION -> CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION

CONDITIONALOREXPRESSION -> CONDITIONALANDEXPRESSION
CONDITIONALOREXPRESSION -> CONDITIONALOREXPRESSION || CONDITIONALANDEXPRESSION

CONDITIONALEXPRESSION -> CONDITIONALOREXPRESSION
CONDITIONALEXPRESSION -> CONDITIONALOREXPRESSION ? EXPRESSION : CONDITIONALEXPRESSION

ASSIGNMENTEXPRESSION -> CONDITIONALEXPRESSION
ASSIGNMENTEXPRESSION -> ASSIGNMENT

ASSIGNMENT -> LEFTHANDSIDE ASSIGNMENTOPERATOR ASSIGNMENTEXPRESSION

LEFTHANDSIDE -> NAME
LEFTHANDSIDE -> FIELDACCESS
LEFTHANDSIDE -> ARRAYACCESS

ASSIGNMENTOPERATOR -> = 
ASSIGNMENTOPERATOR -> *= 
ASSIGNMENTOPERATOR -> /=
ASSIGNMENTOPERATOR -> %=
ASSIGNMENTOPERATOR -> += 
ASSIGNMENTOPERATOR -> -= 
ASSIGNMENTOPERATOR -> <<= 
ASSIGNMENTOPERATOR -> >>= 
ASSIGNMENTOPERATOR -> >>>= 
ASSIGNMENTOPERATOR -> &= 
ASSIGNMENTOPERATOR -> ^= 
ASSIGNMENTOPERATOR -> |=

EXPRESSION -> ASSIGNMENTEXPRESSION

CONSTANTEXPRESSION -> EXPRESSION

