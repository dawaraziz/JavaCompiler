S -> BOF H EOF
H -> PACKAGEopt MULT_IMPORTopt TYPE_DECLARATIONopt

//////////////////// SYNTAX HELPERS ////////////////////
TYPE_NAME -> 'VARIABLE_ID'
TYPE_NAME -> TYPE_NAME '.' 'VARIABLE_ID'
//////////////////// SYNTAX HELPERS ////////////////////

//////////////////// HEADER ////////////////////

PACKAGEopt -> 'package' TYPE_NAME ';'
PACKAGEopt -> EPSILON

MULT_IMPORTopt -> IMPORT
MULT_IMPORTopt -> IMPORT MULT_IMPORT
	IMPORT -> 'import' TYPE_NAME ';'
	IMPORT -> 'import' TYPE_NAME '.' '*' ';'
MULT_IMPORTopt -> EPSILON

TYPE_DECLARATIONopt -> CLASS_DECLARATION
TYPE_DECLARATIONopt -> INTERFACE_DECLARATION
TYPE_DECLARATIONopt -> ';'

//////////////////// HEADER ////////////////////

//////////////////// INTERFACES ////////////////////

INTERFACE_DECLARATION -> INTERFACE_MODIFIERS 'interface' 'VARIABLE_ID' EXTENDS_INTERFACEopt '{' INTERFACE_BODY '}'

INTERFACE_MODIFIERS -> INTERFACE_MODIFIER INTERFACE_MODIFIERS
INTERFACE_MODIFIERS -> INTERFACE_MODIFIER

INTERFACE_MODIFIER -> 'abstract'
INTERFACE_MODIFIER -> 'public'

EXTENDS_INTERFACEopt -> 'extends' EXTENDS_INTERFACE
EXTENDS_INTERFACEopt -> EPSILON

EXTENDS_INTERFACE -> EXTENDS_INTERFACE ',' TYPE_NAME
EXTENDS_INTERFACE -> TYPE_NAME

INTERFACE_BODY -> INTERFACE_BODY CONSTANT_DECLARATION
INTERFACE_BODY -> INTERFACE_BODY ABSTRACT_METHOD_DECLARATION
INTERFACE_BODY -> INTERFACE_BODY ';'
INTERFACE_BODY -> EPSILON

//////////////////// INTERFACES ////////////////////

//////////////////// INTERFACE DECLARATIONS ////////////////////

CONSTANT_DECLARATION -> CONSTANT_MODIFIERSopt TYPE VARIABLE_DECLARATORS

CONSTANT_MODIFIERSopt -> CONSTANT_MODIFIERS
CONSTANT_MODIFIERSopt -> EPSILON

CONSTANT_MODIFIERS -> CONSTANT_MODIFIER CONSTANT_MODIFIERS
CONSTANT_MODIFIERS -> CONSTANT_MODIFIER

CONSTANT_MODIFIER -> 'static'
CONSTANT_MODIFIER -> 'public'
CONSTANT_MODIFIER -> 'final'

ABSTRACT_METHOD_DECLARATION -> ABSTRACT_METHOD_MODIFIERSopt RETURN_TYPE METHOD_DECLARATOR ';'

ABSTRACT_METHOD_MODIFIERSopt -> ABSTRACT_METHOD_MODIFIERS
ABSTRACT_METHOD_MODIFIERSopt -> EPSILON

ABSTRACT_METHOD_MODIFIERS -> ABSTRACT_METHOD_MODIFIER ABSTRACT_METHOD_MODIFIERS
ABSTRACT_METHOD_MODIFIERS -> ABSTRACT_METHOD_MODIFIER

ABSTRACT_METHOD_MODIFIER -> 'abstract'
ABSTRACT_METHOD_MODIFIER -> 'public'

//////////////////// INTERFACE DECLARATIONS ////////////////////

//////////////////// TYPES ////////////////////

RETURN_TYPE -> TYPE
RETURN_TYPE -> 'void'

TYPE -> PRIM_TYPE '[' ']'
TYPE -> PRIM_TYPE
	PRIM_TYPE -> 'boolean'
	PRIM_TYPE -> NUM_TYPE
		NUM_TYPE -> 'byte'
		NUM_TYPE -> 'int'
		NUM_TYPE -> 'short'
	PRIM_TYPE -> 'char'
TYPE -> 'VARIABLE_ID'
TYPE -> 'VARIABLE_ID' '[' ']'

//////////////////// TYPES ////////////////////

//////////////////// CLASSES ////////////////////

CLASS_DECLARATION -> CLASS_MODIFIERS 'class' 'VARIABLE_ID' SUPERopt INTERFACESopt '{' CLASS_BODY '}'

CLASS_MODIFIERS -> CLASS_MODIFIER CLASS_MODIFIERS
CLASS_MODIFIERS -> CLASS_MODIFIER

CLASS_MODIFIER -> 'static'
CLASS_MODIFIER -> 'abstract'
CLASS_MODIFIER -> 'public'
CLASS_MODIFIER -> 'final'

SUPERopt -> 'extends' TYPE_NAME
SUPERopt -> EPSILON

INTERFACESopt -> 'implements' INTERFACE_TYPE_LIST
    	INTERFACE_TYPE_LIST -> TYPE_NAME
    	INTERFACE_TYPE_LIST -> TYPE_NAME ',' INTERFACE_TYPE_LIST
INTERFACESopt -> EPSILON

CLASS_BODY -> CLASS_BODY METHOD_DECLARATION
CLASS_BODY -> CLASS_BODY PROPERTY_DECLARATION
CLASS_BODY -> CLASS_BODY ';'
CLASS_BODY -> EPSILON

//////////////////// CLASSES ////////////////////

//////////////////// PROPERTIES ////////////////////

PROPERTY -> PROPERTY_MODIFIERS TYPE 'VARIABLE_ID' INSTANTIATION ';'

PROPERTY_MODIFIERS -> PROPERTY_MODIFIER
PROPERTY_MODIFIERS -> PROPERTY_MODIFIER PROPERTY_MODIFIERS

PROPERTY_MODIFIER -> 'static'
PROPERTY_MODIFIER -> 'public'
PROPERTY_MODIFIER -> 'protected'

INSTANTIATION -> '=' EXPRESSION
INSTANTIATION -> EPSILON

//////////////////// PROPERTIES ////////////////////

//////////////////// METHODS ////////////////////

METHOD -> METHOD_MODIFIERS RETURN_TYPE 'VARIABLE_ID' '(' METHOD_PARAMS ')' METHOD_IMPLEMENTATION

METHOD_MODIFIERS -> METHOD_MODIFIER METHOD_MODIFIERS
METHOD_MODIFIERS -> METHOD_MODIFIER

METHOD_MODIFIER -> 'static'
METHOD_MODIFIER -> 'abstract'
METHOD_MODIFIER -> 'public'
METHOD_MODIFIER -> 'final'
METHOD_MODIFIER -> 'protected'
METHOD_MODIFIER -> 'native'

METHOD_PARAMS -> METHOD_PARAM
METHOD_PARAMS -> METHOD_PARAMS ',' METHOD_PARAM

METHOD_PARAM -> TYPE 'VARIABLE_ID'

METHOD_IMPLEMENTATION -> BLOCK
METHOD_IMPLEMENTATION -> ';'

//////////////////// METHODS ////////////////////

//////////////////// BLOCK ////////////////////

BLOCK -> '{' BLOCK_STATEMENTSopt '}'

BLOCK_STATEMENTSopt -> BLOCK_STATEMENTS
BLOCK_STATEMENTSopt -> EPSILON

BLOCK_STATEMENTS -> BLOCK_STATEMENT
BLOCK_STATEMENTS -> BLOCK_STATEMENTS BLOCK_STATEMENT

BLOCK_STATEMENT -> TYPE 'VARIABLE_ID' INSTANTIATION
BLOCK_STATEMENT -> STATEMENT

//////////////////// BLOCK ////////////////////

//////////////////// STATEMENT ////////////////////

STATEMENT -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT -> IF_STATEMENT
STATEMENT -> IF_ELSE_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> FOR_STATEMENT

STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> BLOCK
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> ';'
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> EXPRESSION_STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> RETURN_STATEMENT

STATEMENT_NO_SHORT_IF -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT_NO_SHORT_IF -> IF_ELSE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> WHILE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> FOR_STATEMENT_NO_SHORT_IF

EXPRESSION_STATEMENT -> ASSIGNMENT ';'
EXPRESSION_STATEMENT -> METHOD_INVOCATION ';'
EXPRESSION_STATEMENT -> CLASS_INSTANCE_CREATION_EXPRESSION ';'

//////////////////// STATEMENT ////////////////////

    //////////////////// IF STATEMENT ////////////////////
    IF_STATEMENT -> 'if' '('' EXPRESSION ')' STATEMENT
    IF_ELSE_STATEMENT -> 'if' '('' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT
    IF_ELSE_STATEMENT_NO_SHORT_IF -> 'if' '('' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT_NO_SHORT_IF

    //////////////////// WHILE STATEMENT ////////////////////
    WHILE_STATEMENT -> 'while' '(' EXPRESSION ')' STATEMENT
    WHILE_STATEMENT_NO_SHORT_IF -> 'while' '(' EXPRESSION ')' STATEMENT_NO_SHORT_IF

    //////////////////// FOR STATEMENT ////////////////////
    FOR_STATEMENT -> 'for' '(' FOR_INITopt ';' EXPRESSIONopt ';' FOR_UPDATEopt ')' STATEMENT
    FOR_STATEMENT_NO_SHORT_IF -> 'for' '(' FOR_INITopt ';' EXPRESSIONopt ';' FOR_UPDATEopt ')' STATEMENT_NO_SHORT_IF

    FOR_INITopt -> FOR_INIT
        FOR_INIT-> LOCAL_VARIABLE_DECLARATION
        FOR_INIT-> EXPRESSION_STATEMENT
    FOR_INITopt -> EPSILON

    EXPRESSIONopt -> EXPRESSION
    EXPRESSIONopt -> EPSILON

    FOR_UPDATEopt -> EXPRESSION_STATEMENT

    //////////////////// RETURN STATEMENT ////////////////////
    RETURN_STATEMENT -> 'return' EXPRESSIONopt

//////////////////// EXPRESSIONS ////////////////////


//////////////////// CODE BODY ////////////////////
ADDITIVE_STATEMENT -> TYPE '+' TYPE

ARITHMETIC_STATEMENT -> '(' ARITHMETIC_STATEMENT ')'
ARITHMETIC_STATEMENT -> ADDITIVE_STATEMENT
ARITHMETIC_STATEMENT -> INT_LITERAL ARITHMETIC_OPERATOR INT_LITERAL
	INT_LITERAL -> 'decnumint'
	INT_LITERAL -> 'VARIABLE_ID'

	ARITHMETIC_OPERATOR -> *
	ARITHMETIC_OPERATOR -> /
	ARITHMETIC_OPERATOR -> %
	ARITHMETIC_OPERATOR -> -

BOOLEAN_STATEMENT -> '(' BOOLEAN_STATEMENT ')'
BOOLEAN_STATEMENT -> BOOLEAN_LITERAL BOOLEAN_OPERATOR BOOLEAN_LITERAL
BOOLEAN_STATEMENT -> COMPARISON_LITERAL COMPARISON_OPERATORS COMPARISON_LITERAL
BOOLEAN_STATEMENT -> EQUALITY_LITERAL EQUALITY_OPERATORS EQUALITY_LITERAL
	BOOLEAN_LITERAL -> 'boollit'
	BOOLEAN_LITERAL -> 'VARIABLE_ID'
	BOOLEAN_LITERAL -> BOOLEAN_STATEMENT

	COMPARISON_LITERAL -> 'decnumint'
	COMPARISON_LITERAL -> 'charlit'
	COMPARISON_LITERAL -> 'VARIABLE_ID'

	EQUALITY_LITERAL -> 'decnumint'
	EQUALITY_LITERAL -> 'charlit'
	EQUALITY_LITERAL -> 'strlit'
	EQUALITY_LITERAL -> 'null'
	EQUALITY_LITERAL -> 'boollit'
	EQUALITY_LITERAL -> 'VARIABLE_ID'
	EQUALITY_LITERAL -> 'this'

	BOOLEAN_OPERATORS -> &
	BOOLEAN_OPERATORS -> &&
	BOOLEAN_OPERATORS -> |
	BOOLEAN_OPERATORS -> ||

	COMPARISON_OPERATORS -> <
	COMPARISON_OPERATORS -> >
	COMPARISON_OPERATORS -> <=
	COMPARISON_OPERATORS -> >=

	EQUALITY_OPERATORS -> ==
	EQUALITY_OPERATORS -> !=

INSTACEOF_STATEMENT -> 'VARIABLE_ID' 'instanceof' 'VARIABLE_ID'

CAST_STATEMENT -> '(' TYPE ')'

//////////////////// CODE BODY ////////////////////