S -> BOF H EOF
H -> PACKAGE MULT_IMPORT MAIN_CLASS

//////////////////// HEADER ////////////////////

PACKAGE -> 'package' PACKAGE_ID ';'
	PACKAGE_ID -> 'VARIABLE_ID'
	PACKAGE_ID -> 'VARIABLE_ID' '.' PACKAGE_ID
PACKAGE -> EPSILON

MULT_IMPORT -> IMPORT
MULT_IMPORT -> IMPORT MULT_IMPORT
	IMPORT -> 'import' IMPORT_ID ';'
		IMPORT_ID -> FINAL_IMPORT_ID
		IMPORT_ID -> 'VARIABLE_ID' '.' IMPORT_ID
			FINAL_IMPORT_ID -> 'VARIABLE_ID'
			FINAL_IMPORT_ID -> '*'
MULT_IMPORT -> EPSILON

//////////////////// HEADER ////////////////////

//////////////////// OUTER CLASSES ////////////////////

MAIN_CLASS -> CLASS_MODIFIERS CLASS_TYPE 'VARIABLE_ID'   '{' CLASS_BODY '}'
MAIN_CLASS -> EPSILON

CLASS_MODIFIERS -> CLASS_MODIFIER CLASS_MODIFIERS
CLASS_MODIFIERS -> CLASS_MODIFIER

CLASS_MODIFIER -> 'static'
CLASS_MODIFIER -> 'abstract'
CLASS_MODIFIER -> 'public'
CLASS_MODIFIER -> 'final'

CLASS_TYPE -> 'interface'
CLASS_TYPE -> 'class'

CLASS_INHERITANCE -> CLASS_EXTENDS CLASS_IMPLEMENTS
CLASS_EXTENDS -> 'extends' CLASS_INHERITANCE_ID
	CLASS_INHERITANCE_ID -> 'VARIABLE_ID'
	CLASS_INHERITANCE_ID -> 'VARIABLE_ID' '.' CLASS_INHERITANCE_ID
CLASS_IMPLEMENTS -> 'implements' CLASS_MULT_INHERITANCE_IDS
	CLASS_MULT_INHERITANCE_IDS -> CLASS_INHERITANCE_ID
	CLASS_MULT_INHERITANCE_IDS -> CLASS_INHERITANCE_ID ',' CLASS_MULT_INHERITANCE_IDS

CLASS_BODY -> METHOD CLASS_BODY
CLASS_BODY -> PROPERTY CLASS_BODY
CLASS_BODY -> EPSILON

//////////////////// OUTER CLASSES ////////////////////

//////////////////// TYPES ////////////////////

TYPE -> PRIM_TYPE '[' ']'
TYPE -> PRIM_TYPE
	PRIM_TYPE -> 'boolean'
	PRIM_TYPE -> NUM_TYPE
		NUM_TYPE -> 'byte'
		NUM_TYPE -> 'int'
		NUM_TYPE -> 'short'
	PRIM_TYPE -> 'char'
TYPE -> 'VARIABLE_ID'
TYPE -> 'VARIABLE_ID' '[' ']'

//////////////////// TYPES ////////////////////

//////////////////// METHODS ////////////////////

METHOD -> METHOD_MODIFIERS RETURN_TYPE 'VARIABLE_ID' '(' METHOD_PARAMS ')' METHOD_IMPLEMENTATION

METHOD_MODIFIERS -> CLASS_MODIFIER METHOD_MODIFIERS
METHOD_MODIFIERS -> CLASS_MODIFIER

CLASS_MODIFIER -> 'static'
CLASS_MODIFIER -> 'abstract'
CLASS_MODIFIER -> 'public'
CLASS_MODIFIER -> 'final'
CLASS_MODIFIER -> 'protected'
CLASS_MODIFIER -> 'native'

RETURN_TYPE -> TYPE
RETURN_TYPE -> 'void'

METHOD_PARAMS -> TYPE 'VARIABLE_ID' ',' METHOD_PARAMS
METHOD_PARAMS -> TYPE 'VARIABLE_ID'
METHOD_PARAMS -> EPSILON

METHOD_IMPLEMENTATION -> BLOCK
METHOD_IMPLEMENTATION -> EPSILON

//////////////////// METHODS ////////////////////

//////////////////// PROPERTIES ////////////////////

PROPERTY -> PROPERTY_MODIFIERS TYPE 'VARIABLE_ID' INSTANTIATION ';'

PROPERTY_MODIFIERS -> PROPERTY_MODIFIER
PROPERTY_MODIFIERS -> PROPERTY_MODIFIER PROPERTY_MODIFIERS

PROPERTY_MODIFIER -> 'static'
PROPERTY_MODIFIER -> 'public'
PROPERTY_MODIFIER -> 'protected'

INSTANTIATION -> '=' EXPRESSION
INSTANTIATION -> EPSILON

//////////////////// CONTROL FLOW ////////////////////

IF_STATEMENT -> 'if' '(' EXPRESSION ')' STATEMENT
IF_ELSE_STATEMENT -> 'if' '(' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT
IF_ELSE_STATEMENT_NO_SHORT_IF -> 'if' '(' EXPRESSION ')' STATEMENT_NO_SHORT_IF 'else' STATEMENT_NO_SHORT_IF

WHILE_STATEMENT -> 'while' '(' EXPRESSION ')' STATEMENT
WHILE_STATEMENT_NO_SHORT_IF -> 'while' '(' EXPRESSION ')' STATEMENT_NO_SHORT_IF

FOR_STATEMENT -> 'for' '(' FOR_INITopt ';' EXPRESSIONopt ';' STATEMENT ')' STATEMENT
FOR_STATEMENT_NO_SHORT_IF -> 'for' '(' FOR_INIT ';' EXPRESSIONopt ';' STATEMENT ')' STATEMENT_NO_SHORT_IF

FOR_INIT -> EXPRESSION_STATEMENT
FOR_INIT -> LOCAL_VARIABLE_DECLARATION
FOR_INIT -> EPSILON

FOR_UPDATE -> EXPRESSION_STATEMENT
FOR_UPDATE -> EPSILON

//////////////////// BODY STATES ////////////////////

BLOCK -> '{' '}'
BLOCK -> '{' BLOCK_STATEMENTS '}'

BLOCK_STATEMENTS -> BLOCK_STATEMENT
BLOCK_STATEMENTS -> BLOCK_STATEMENTS BLOCK_STATEMENT

BLOCK_STATEMENT -> STATEMENT
BLOCK_STATEMENT -> LOCAL_VARIABLE_DECLARATION

STATEMENT -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT -> IF_STATEMENT
STATEMENT -> IF_ELSE_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> FOR_STATEMENT

STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> BLOCK
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> ';'
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> EXPRESSION_STATEMENT
STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT -> RETURN_STATEMENT

STATEMENT_NO_SHORT_IF -> STATEMENT_WITHOUT_TRAILING_SUBSTATEMENT
STATEMENT_NO_SHORT_IF -> IF_ELSE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> WHILE_STATEMENT_NO_SHORT_IF
STATEMENT_NO_SHORT_IF -> FOR_STATEMENT_NO_SHORT_IF

EXPRESSION_STATEMENT -> ASSIGNMENT ';'
EXPRESSION_STATEMENT -> METHOD_INVOCATION ';'
EXPRESSION_STATEMENT -> CLASS_INSTANCE_CREATION_EXPRESSION ';'

LOCAL_VARIABLE_DECLARATION -> TYPE 'VARIABLE_ID' '=' EXPRESSION
LOCAL_VARIABLE_DECLARATION -> TYPE 'VARIABLE_ID'

//////////////////// PROPERTIES ////////////////////

//////////////////// CODE BODY ////////////////////
ADDITIVE_STATEMENT -> TYPE '+' TYPE

ARITHMETIC_STATEMENT -> '(' ARITHMETIC_STATEMENT ')'
ARITHMETIC_STATEMENT -> ADDITIVE_STATEMENT
ARITHMETIC_STATEMENT -> INT_LITERAL ARITHMETIC_OPERATOR INT_LITERAL
	INT_LITERAL -> 'decnumint'
	INT_LITERAL -> 'VARIABLE_ID'

	ARITHMETIC_OPERATOR -> *
	ARITHMETIC_OPERATOR -> /
	ARITHMETIC_OPERATOR -> %
	ARITHMETIC_OPERATOR -> -

BOOLEAN_STATEMENT -> '(' BOOLEAN_STATEMENT ')'
BOOLEAN_STATEMENT -> BOOLEAN_LITERAL BOOLEAN_OPERATOR BOOLEAN_LITERAL
BOOLEAN_STATEMENT -> COMPARISON_LITERAL COMPARISON_OPERATORS COMPARISON_LITERAL
BOOLEAN_STATEMENT -> EQUALITY_LITERAL EQUALITY_OPERATORS EQUALITY_LITERAL
	BOOLEAN_LITERAL -> 'boollit'
	BOOLEAN_LITERAL -> 'VARIABLE_ID'
	BOOLEAN_LITERAL -> BOOLEAN_STATEMENT

	COMPARISON_LITERAL -> 'decnumint'
	COMPARISON_LITERAL -> 'charlit'
	COMPARISON_LITERAL -> 'VARIABLE_ID'

	EQUALITY_LITERAL -> 'decnumint'
	EQUALITY_LITERAL -> 'charlit'
	EQUALITY_LITERAL -> 'strlit'
	EQUALITY_LITERAL -> 'null'
	EQUALITY_LITERAL -> 'boollit'
	EQUALITY_LITERAL -> 'VARIABLE_ID'
	EQUALITY_LITERAL -> 'this'

	BOOLEAN_OPERATORS -> &
	BOOLEAN_OPERATORS -> &&
	BOOLEAN_OPERATORS -> |
	BOOLEAN_OPERATORS -> ||

	COMPARISON_OPERATORS -> <
	COMPARISON_OPERATORS -> >
	COMPARISON_OPERATORS -> <=
	COMPARISON_OPERATORS -> >=

	EQUALITY_OPERATORS -> ==
	EQUALITY_OPERATORS -> !=

INSTACEOF_STATEMENT -> 'VARIABLE_ID' 'instanceof' 'VARIABLE_ID'

CAST_STATEMENT -> '(' TYPE ')'

//////////////////// CODE BODY ////////////////////

