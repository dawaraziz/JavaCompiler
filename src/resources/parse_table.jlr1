92
EPSILON
Warning: extra input lines after grammar; maybe your production count is wrong.
BOF
EOF
!
%
&&
&
*
+
,
-
.
/
;
<
<=
=
==
!=
>
>=
CHARACTER_LITERAL
FALSE
INTEGER_LITERAL
NULL
STRING_LITERAL
TRUE
VARIABLE_ID
[
]
(
)
abstract
boolean
byte
char
class
else
extends
final
for
if
implements
import
instanceof
int
interface
native
new
package
protected
public
return
short
static
super
this
void
while
{
|
||
}
~
throws
throw
switch
case
default
do
break
continue
try
catch
finally
?
>>
>>>
<<
*=
/=
%=
+=
-=
<<=
>>=
>>>=
&=
^=
|=
^
:
152
S
LITERAL
TYPE
PRIMITIVETYPE
NUMERICTYPE
INTEGRALTYPE
REFERENCETYPE
CLASSORINTERFACETYPE
CLASSTYPE
INTERFACETYPE
ARRAYTYPE
NAME
SIMPLENAME
QUALIFIEDNAME
COMPILATIONUNIT
IMPORTDECLARATIONS
TYPEDECLARATIONS
PACKAGEDECLARATION
IMPORTDECLARATION
SINGLETYPEIMPORTDECLARATION
TYPEIMPORTONDEMANDDECLARATION
TYPEDECLARATION
MODIFIERS
MODIFIER
CLASSDECLARATION
SUPER
INTERFACES
INTERFACETYPELIST
CLASSBODY
CLASSBODYDECLARATIONS
CLASSBODYDECLARATION
CLASSMEMBERDECLARATION
FIELDDECLARATION
VARIABLEDECLARATORS
VARIABLEDECLARATOR
VARIABLEDECLARATORID
VARIABLEINITIALIZER
METHODDECLARATION
METHODHEADER
METHODDECLARATOR
FORMALPARAMETERLIST
FORMALPARAMETER
THROWS
CLASSTYPELIST
METHODBODY
STATICINITIALIZER
CONSTRUCTORDECLARATION
CONSTRUCTORDECLARATOR
CONSTRUCTORBODY
EXPLICITCONSTRUCTORINVOCATION
INTERFACEDECLARATION
EXTENDSINTERFACES
INTERFACEBODY
INTERFACEMEMBERDECLARATIONS
INTERFACEMEMBERDECLARATION
CONSTANTDECLARATION
ABSTRACTMETHODDECLARATION
ARRAYINITIALIZER
VARIABLEINITIALIZERS
BLOCK
BLOCKSTATEMENTS
BLOCKSTATEMENT
LOCALVARIABLEDECLARATIONSTATEMENT
LOCALVARIABLEDECLARATION
STATEMENT
STATEMENTNOSHORTIF
STATEMENTWITHOUTTRAILINGSUBSTATEMENT
EMPTYSTATEMENT
LABELEDSTATEMENT
LABELEDSTATEMENTNOSHORTIF
EXPRESSIONSTATEMENT
STATEMENTEXPRESSION
IFTHENSTATEMENT
IFTHENELSESTATEMENT
IFTHENELSESTATEMENTNOSHORTIF
SWITCHSTATEMENT
SWITCHBLOCK
SWITCHBLOCKSTATEMENTGROUPS
SWITCHBLOCKSTATEMENTGROUP
SWITCHLABELS
SWITCHLABEL
WHILESTATEMENT
WHILESTATEMENTNOSHORTIF
DOSTATEMENT
FORSTATEMENT
FORSTATEMENTNOSHORTIF
FORINIT
FORUPDATE
STATEMENTEXPRESSIONLIST
BREAKSTATEMENT
CONTINUESTATEMENT
RETURNSTATEMENT
THROWSTATEMENT
TRYSTATEMENT
CATCHES
CATCHCLAUSE
FINALLY
PRIMARY
PRIMARYNONEWARRAY
CLASSINSTANCECREATIONEXPRESSION
ARGUMENTLIST
ARRAYCREATIONEXPRESSION
DIMEXPRS
DIMEXPR
DIMS
FIELDACCESS
METHODINVOCATION
ARRAYACCESS
POSTFIXEXPRESSION
UNARYEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS
CASTEXPRESSION
MULTIPLICATIVEEXPRESSION
ADDITIVEEXPRESSION
SHIFTEXPRESSION
RELATIONALEXPRESSION
EQUALITYEXPRESSION
ANDEXPRESSION
EXCLUSIVEOREXPRESSION
INCLUSIVEOREXPRESSION
CONDITIONALANDEXPRESSION
CONDITIONALOREXPRESSION
CONDITIONALEXPRESSION
ASSIGNMENTEXPRESSION
ASSIGNMENT
LEFTHANDSIDE
ASSIGNMENTOPERATOR
EXPRESSION
CONSTANTEXPRESSION
PACKAGEDECLARATIONOPT
IMPORTDECLARATIONSOPT
TYPEDECLARATIONSOPT
CLASSBODYDECLARATIONSOPT
MODIFIERSOPT
SUPEROPT
INTERFACESOPT
THROWSOPT
BLOCKSTATEMENTSOPT
FORMALPARAMETERLISTOPT
EXPLICITCONSTRUCTORINVOCATIONOPT
SWITCHBLOCKSTATEMENTGROUPSOPT
SWITCHLABELSOPT
FORINITOPT
CATCHESOPT
IDENTIFIEROPT
EXPRESSIONOPT
ARGUMENTLISTOPT
DIMSOPT
EXTENDSINTERFACESOPT
INTERFACEMEMBERDECLARATIONSOPT
VARIABLEINITIALIZERSOPT
FORUPDATEOPT
S
306
S BOF COMPILATIONUNIT EOF
LITERAL INTEGER_LITERAL
LITERAL CHARACTER_LITERAL
LITERAL STRING_LITERAL
LITERAL NULL
LITERAL TRUE
LITERAL FALSE
TYPE PRIMITIVETYPE
TYPE REFERENCETYPE
PRIMITIVETYPE NUMERICTYPE
PRIMITIVETYPE boolean
NUMERICTYPE INTEGRALTYPE
INTEGRALTYPE byte
INTEGRALTYPE short
INTEGRALTYPE int
INTEGRALTYPE char
REFERENCETYPE CLASSORINTERFACETYPE
REFERENCETYPE ARRAYTYPE
CLASSORINTERFACETYPE NAME
CLASSTYPE CLASSORINTERFACETYPE
INTERFACETYPE CLASSORINTERFACETYPE
ARRAYTYPE PRIMITIVETYPE [ ]
ARRAYTYPE NAME [ ]
ARRAYTYPE ARRAYTYPE [ ]
NAME SIMPLENAME
NAME QUALIFIEDNAME
SIMPLENAME VARIABLE_ID
QUALIFIEDNAME NAME . VARIABLE_ID
COMPILATIONUNIT PACKAGEDECLARATIONOPT IMPORTDECLARATIONSOPT TYPEDECLARATIONSOPT
PACKAGEDECLARATIONOPT PACKAGEDECLARATION
PACKAGEDECLARATIONOPT EPSILON
IMPORTDECLARATIONSOPT IMPORTDECLARATIONS
IMPORTDECLARATIONSOPT EPSILON
TYPEDECLARATIONSOPT TYPEDECLARATIONS
TYPEDECLARATIONSOPT EPSILON
IMPORTDECLARATIONS IMPORTDECLARATION
IMPORTDECLARATIONS IMPORTDECLARATIONS IMPORTDECLARATION
TYPEDECLARATIONS TYPEDECLARATION
TYPEDECLARATIONS TYPEDECLARATIONS TYPEDECLARATION
PACKAGEDECLARATION package NAME ;
IMPORTDECLARATION SINGLETYPEIMPORTDECLARATION
IMPORTDECLARATION TYPEIMPORTONDEMANDDECLARATION
SINGLETYPEIMPORTDECLARATION import NAME ;
TYPEIMPORTONDEMANDDECLARATION import NAME . * ;
TYPEDECLARATION CLASSDECLARATION
TYPEDECLARATION INTERFACEDECLARATION
TYPEDECLARATION ;
MODIFIERSOPT MODIFIERS
MODIFIERSOPT EPSILON
MODIFIERS MODIFIER
MODIFIERS MODIFIERS MODIFIER
MODIFIER public
MODIFIER protected
MODIFIER static
MODIFIER abstract
MODIFIER final
MODIFIER native
CLASSDECLARATION MODIFIERSOPT class VARIABLE_ID SUPEROPT INTERFACESOPT CLASSBODY
SUPEROPT SUPER
SUPEROPT EPSILON
INTERFACESOPT INTERFACES
INTERFACESOPT EPSILON
SUPER extends CLASSTYPE
INTERFACES implements INTERFACETYPELIST
INTERFACETYPELIST INTERFACETYPE
INTERFACETYPELIST INTERFACETYPELIST , INTERFACETYPE
CLASSBODY { CLASSBODYDECLARATIONSOPT }
CLASSBODYDECLARATIONSOPT CLASSBODYDECLARATIONS
CLASSBODYDECLARATIONSOPT EPSILON
CLASSBODYDECLARATIONS CLASSBODYDECLARATION
CLASSBODYDECLARATIONS CLASSBODYDECLARATIONS CLASSBODYDECLARATION
CLASSBODYDECLARATION CLASSMEMBERDECLARATION
CLASSBODYDECLARATION STATICINITIALIZER
CLASSBODYDECLARATION CONSTRUCTORDECLARATION
CLASSMEMBERDECLARATION FIELDDECLARATION
CLASSMEMBERDECLARATION METHODDECLARATION
FIELDDECLARATION MODIFIERSOPT TYPE VARIABLEDECLARATORS ;
VARIABLEDECLARATORS VARIABLEDECLARATOR
VARIABLEDECLARATORS VARIABLEDECLARATORS , VARIABLEDECLARATOR
VARIABLEDECLARATOR VARIABLEDECLARATORID
VARIABLEDECLARATOR VARIABLEDECLARATORID = VARIABLEINITIALIZER
VARIABLEDECLARATORID VARIABLE_ID
VARIABLEDECLARATORID VARIABLEDECLARATORID [ ]
VARIABLEINITIALIZER EXPRESSION
VARIABLEINITIALIZER ARRAYINITIALIZER
METHODDECLARATION METHODHEADER METHODBODY
METHODHEADER MODIFIERSOPT TYPE METHODDECLARATOR THROWSOPT
METHODHEADER MODIFIERSOPT void METHODDECLARATOR THROWSOPT
METHODDECLARATOR VARIABLE_ID ( FORMALPARAMETERLISTOPT )
METHODDECLARATOR METHODDECLARATOR [ ]
FORMALPARAMETERLISTOPT FORMALPARAMETERLIST
FORMALPARAMETERLISTOPT EPSILON
FORMALPARAMETERLIST FORMALPARAMETER
FORMALPARAMETERLIST FORMALPARAMETERLIST , FORMALPARAMETER
FORMALPARAMETER TYPE VARIABLEDECLARATORID
THROWSOPT THROWS
THROWSOPT EPSILON
THROWS throws CLASSTYPELIST
CLASSTYPELIST CLASSTYPE
CLASSTYPELIST CLASSTYPELIST , CLASSTYPE
METHODBODY BLOCK
METHODBODY ;
STATICINITIALIZER static BLOCK
CONSTRUCTORDECLARATION MODIFIERSOPT CONSTRUCTORDECLARATOR THROWSOPT CONSTRUCTORBODY
CONSTRUCTORDECLARATOR SIMPLENAME ( FORMALPARAMETERLISTOPT )
CONSTRUCTORBODY { EXPLICITCONSTRUCTORINVOCATIONOPT BLOCKSTATEMENTSOPT }
EXPLICITCONSTRUCTORINVOCATIONOPT EXPLICITCONSTRUCTORINVOCATION
EXPLICITCONSTRUCTORINVOCATIONOPT EPSILON
EXPLICITCONSTRUCTORINVOCATION this ( ARGUMENTLISTOPT ) ;
EXPLICITCONSTRUCTORINVOCATION super ( ARGUMENTLISTOPT ) ;
INTERFACEDECLARATION MODIFIERSOPT interface VARIABLE_ID EXTENDSINTERFACESOPT INTERFACEBODY
EXTENDSINTERFACESOPT EXTENDSINTERFACES
EXTENDSINTERFACESOPT EPSILON
EXTENDSINTERFACES extends INTERFACETYPE
EXTENDSINTERFACES EXTENDSINTERFACES , INTERFACETYPE
INTERFACEBODY { INTERFACEMEMBERDECLARATIONSOPT }
INTERFACEMEMBERDECLARATIONSOPT INTERFACEMEMBERDECLARATIONS
INTERFACEMEMBERDECLARATIONSOPT EPSILON
INTERFACEMEMBERDECLARATIONS INTERFACEMEMBERDECLARATION
INTERFACEMEMBERDECLARATIONS INTERFACEMEMBERDECLARATIONS INTERFACEMEMBERDECLARATION
INTERFACEMEMBERDECLARATION CONSTANTDECLARATION
INTERFACEMEMBERDECLARATION ABSTRACTMETHODDECLARATION
CONSTANTDECLARATION FIELDDECLARATION
ABSTRACTMETHODDECLARATION METHODHEADER ;
ARRAYINITIALIZER { VARIABLEINITIALIZERSOPT }
VARIABLEINITIALIZERSOPT VARIABLEINITIALIZERS
VARIABLEINITIALIZERSOPT EPSILON
VARIABLEINITIALIZERS VARIABLEINITIALIZER
VARIABLEINITIALIZERS VARIABLEINITIALIZERS , VARIABLEINITIALIZER
BLOCK { BLOCKSTATEMENTSOPT }
BLOCKSTATEMENTSOPT BLOCKSTATEMENTS
BLOCKSTATEMENTSOPT EPSILON
BLOCKSTATEMENTS BLOCKSTATEMENT
BLOCKSTATEMENTS BLOCKSTATEMENTS BLOCKSTATEMENT
BLOCKSTATEMENT LOCALVARIABLEDECLARATIONSTATEMENT
BLOCKSTATEMENT STATEMENT
LOCALVARIABLEDECLARATIONSTATEMENT LOCALVARIABLEDECLARATION ;
LOCALVARIABLEDECLARATION TYPE VARIABLEDECLARATORS
STATEMENT STATEMENTWITHOUTTRAILINGSUBSTATEMENT
STATEMENT LABELEDSTATEMENT
STATEMENT IFTHENSTATEMENT
STATEMENT IFTHENELSESTATEMENT
STATEMENT WHILESTATEMENT
STATEMENT FORSTATEMENT
STATEMENTNOSHORTIF STATEMENTWITHOUTTRAILINGSUBSTATEMENT
STATEMENTNOSHORTIF LABELEDSTATEMENTNOSHORTIF
STATEMENTNOSHORTIF IFTHENELSESTATEMENTNOSHORTIF
STATEMENTNOSHORTIF WHILESTATEMENTNOSHORTIF
STATEMENTNOSHORTIF FORSTATEMENTNOSHORTIF
STATEMENTWITHOUTTRAILINGSUBSTATEMENT BLOCK
STATEMENTWITHOUTTRAILINGSUBSTATEMENT EMPTYSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT EXPRESSIONSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT SWITCHSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT DOSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT BREAKSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT CONTINUESTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT RETURNSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT THROWSTATEMENT
STATEMENTWITHOUTTRAILINGSUBSTATEMENT TRYSTATEMENT
EMPTYSTATEMENT ;
LABELEDSTATEMENT VARIABLE_ID : STATEMENT
LABELEDSTATEMENTNOSHORTIF VARIABLE_ID : STATEMENTNOSHORTIF
EXPRESSIONSTATEMENT STATEMENTEXPRESSION ;
STATEMENTEXPRESSION ASSIGNMENT
STATEMENTEXPRESSION METHODINVOCATION
STATEMENTEXPRESSION CLASSINSTANCECREATIONEXPRESSION
IFTHENSTATEMENT if ( EXPRESSION ) STATEMENT
IFTHENELSESTATEMENT if ( EXPRESSION ) STATEMENTNOSHORTIF else STATEMENT
IFTHENELSESTATEMENTNOSHORTIF if ( EXPRESSION ) STATEMENTNOSHORTIF else STATEMENTNOSHORTIF
SWITCHSTATEMENT switch ( EXPRESSION ) SWITCHBLOCK
SWITCHBLOCK { SWITCHBLOCKSTATEMENTGROUPSOPT SWITCHLABELSOPT }
SWITCHBLOCKSTATEMENTGROUPSOPT SWITCHBLOCKSTATEMENTGROUPS
SWITCHBLOCKSTATEMENTGROUPSOPT EPSILON
SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGROUP
SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGROUPS SWITCHBLOCKSTATEMENTGROUP
SWITCHBLOCKSTATEMENTGROUP SWITCHLABELS BLOCKSTATEMENTS
SWITCHLABELSOPT SWITCHLABELS
SWITCHLABELSOPT EPSILON
SWITCHLABELS SWITCHLABEL
SWITCHLABELS SWITCHLABELS SWITCHLABEL
SWITCHLABEL case CONSTANTEXPRESSION :
SWITCHLABEL default :
WHILESTATEMENT while ( EXPRESSION ) STATEMENT
WHILESTATEMENTNOSHORTIF while ( EXPRESSION ) STATEMENTNOSHORTIF
DOSTATEMENT do STATEMENT while ( EXPRESSION ) ;
FORSTATEMENT for ( FORINITOPT ; EXPRESSIONOPT ; FORUPDATEOPT ) STATEMENT
FORSTATEMENTNOSHORTIF for ( FORINITOPT ; EXPRESSIONOPT ; FORUPDATEOPT ) STATEMENTNOSHORTIF
FORINITOPT FORINIT
FORINITOPT EPSILON
FORINIT STATEMENTEXPRESSIONLIST
FORINIT LOCALVARIABLEDECLARATION
FORUPDATE STATEMENTEXPRESSIONLIST
STATEMENTEXPRESSIONLIST STATEMENTEXPRESSION
STATEMENTEXPRESSIONLIST STATEMENTEXPRESSIONLIST , STATEMENTEXPRESSION
BREAKSTATEMENT break IDENTIFIEROPT ;
CONTINUESTATEMENT continue IDENTIFIEROPT ;
RETURNSTATEMENT return EXPRESSIONOPT ;
THROWSTATEMENT throw EXPRESSION ;
TRYSTATEMENT try BLOCK CATCHES
TRYSTATEMENT try BLOCK CATCHESOPT FINALLY
IDENTIFIEROPT VARIABLE_ID
IDENTIFIEROPT EPSILON
EXPRESSIONOPT EXPRESSION
EXPRESSIONOPT EPSILON
CATCHESOPT CATCHES
CATCHESOPT EPSILON
CATCHES CATCHCLAUSE
CATCHES CATCHES CATCHCLAUSE
CATCHCLAUSE catch ( FORMALPARAMETER ) BLOCK
FINALLY finally BLOCK
PRIMARY PRIMARYNONEWARRAY
PRIMARY ARRAYCREATIONEXPRESSION
PRIMARYNONEWARRAY LITERAL
PRIMARYNONEWARRAY this
PRIMARYNONEWARRAY ( EXPRESSION )
PRIMARYNONEWARRAY CLASSINSTANCECREATIONEXPRESSION
PRIMARYNONEWARRAY FIELDACCESS
PRIMARYNONEWARRAY METHODINVOCATION
PRIMARYNONEWARRAY ARRAYACCESS
CLASSINSTANCECREATIONEXPRESSION new CLASSTYPE ( ARGUMENTLISTOPT )
ARGUMENTLISTOPT ARGUMENTLIST
ARGUMENTLISTOPT EPSILON
ARGUMENTLIST EXPRESSION
ARGUMENTLIST ARGUMENTLIST , EXPRESSION
ARRAYCREATIONEXPRESSION new PRIMITIVETYPE DIMEXPRS DIMSOPT
ARRAYCREATIONEXPRESSION new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT
DIMEXPRS DIMEXPR
DIMEXPRS DIMEXPRS DIMEXPR
DIMEXPR [ EXPRESSION ]
DIMSOPT DIMS
DIMSOPT EPSILON
DIMS [ ]
DIMS DIMS [ ]
FIELDACCESS PRIMARY . VARIABLE_ID
FIELDACCESS super . VARIABLE_ID
METHODINVOCATION NAME ( ARGUMENTLISTOPT )
METHODINVOCATION PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT )
METHODINVOCATION super . VARIABLE_ID ( ARGUMENTLISTOPT )
ARRAYACCESS NAME [ EXPRESSION ]
ARRAYACCESS PRIMARYNONEWARRAY [ EXPRESSION ]
POSTFIXEXPRESSION PRIMARY
POSTFIXEXPRESSION NAME
UNARYEXPRESSION + UNARYEXPRESSION
UNARYEXPRESSION - UNARYEXPRESSION
UNARYEXPRESSION UNARYEXPRESSIONNOTPLUSMINUS
UNARYEXPRESSIONNOTPLUSMINUS POSTFIXEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS ~ UNARYEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS ! UNARYEXPRESSION
UNARYEXPRESSIONNOTPLUSMINUS CASTEXPRESSION
CASTEXPRESSION ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION
CASTEXPRESSION ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS
CASTEXPRESSION ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS
MULTIPLICATIVEEXPRESSION UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION
MULTIPLICATIVEEXPRESSION MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION
ADDITIVEEXPRESSION MULTIPLICATIVEEXPRESSION
ADDITIVEEXPRESSION ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION
ADDITIVEEXPRESSION ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION
SHIFTEXPRESSION ADDITIVEEXPRESSION
SHIFTEXPRESSION SHIFTEXPRESSION << ADDITIVEEXPRESSION
SHIFTEXPRESSION SHIFTEXPRESSION >> ADDITIVEEXPRESSION
SHIFTEXPRESSION SHIFTEXPRESSION >>> ADDITIVEEXPRESSION
RELATIONALEXPRESSION SHIFTEXPRESSION
RELATIONALEXPRESSION RELATIONALEXPRESSION < SHIFTEXPRESSION
RELATIONALEXPRESSION RELATIONALEXPRESSION > SHIFTEXPRESSION
RELATIONALEXPRESSION RELATIONALEXPRESSION <= SHIFTEXPRESSION
RELATIONALEXPRESSION RELATIONALEXPRESSION >= SHIFTEXPRESSION
RELATIONALEXPRESSION RELATIONALEXPRESSION instanceof REFERENCETYPE
EQUALITYEXPRESSION RELATIONALEXPRESSION
EQUALITYEXPRESSION EQUALITYEXPRESSION == RELATIONALEXPRESSION
EQUALITYEXPRESSION EQUALITYEXPRESSION != RELATIONALEXPRESSION
ANDEXPRESSION EQUALITYEXPRESSION
ANDEXPRESSION ANDEXPRESSION & EQUALITYEXPRESSION
EXCLUSIVEOREXPRESSION ANDEXPRESSION
EXCLUSIVEOREXPRESSION EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION
INCLUSIVEOREXPRESSION EXCLUSIVEOREXPRESSION
INCLUSIVEOREXPRESSION INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION
CONDITIONALANDEXPRESSION INCLUSIVEOREXPRESSION
CONDITIONALANDEXPRESSION CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION
CONDITIONALOREXPRESSION CONDITIONALANDEXPRESSION
CONDITIONALOREXPRESSION CONDITIONALOREXPRESSION || CONDITIONALANDEXPRESSION
CONDITIONALEXPRESSION CONDITIONALOREXPRESSION
CONDITIONALEXPRESSION CONDITIONALOREXPRESSION ? EXPRESSION : CONDITIONALEXPRESSION
ASSIGNMENTEXPRESSION CONDITIONALEXPRESSION
ASSIGNMENTEXPRESSION ASSIGNMENT
ASSIGNMENT LEFTHANDSIDE ASSIGNMENTOPERATOR ASSIGNMENTEXPRESSION
LEFTHANDSIDE NAME
LEFTHANDSIDE FIELDACCESS
LEFTHANDSIDE ARRAYACCESS
ASSIGNMENTOPERATOR =
ASSIGNMENTOPERATOR *=
ASSIGNMENTOPERATOR /=
ASSIGNMENTOPERATOR %=
ASSIGNMENTOPERATOR +=
ASSIGNMENTOPERATOR -=
ASSIGNMENTOPERATOR <<=
ASSIGNMENTOPERATOR >>=
ASSIGNMENTOPERATOR >>>=
ASSIGNMENTOPERATOR &=
ASSIGNMENTOPERATOR ^=
ASSIGNMENTOPERATOR |=
EXPRESSION ASSIGNMENTEXPRESSION
CONSTANTEXPRESSION EXPRESSION
FORUPDATEOPT FORUPDATE
FORUPDATEOPT EPSILON
Computing start state
Computing goto actions
Going
.Going
.....Going
Going
Going
.......Going
....Going
.Going
Going
.Going
Going
Going
.Going
Going
................Going
..Going
Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
Going
..Going
Going
Going
Going
Going
Going
Going
Going
..Going
Going
Going
.Going
Going
.Going
Going
.Going
.Going
Going
Going
Going
.Going
....Going
....Going
Going
....Going
Going
Going
......Going
......Going
..Going
.Going
Going
..Going
Going
Going
..Going
Going
Going
Going
Going
Going
.Going
Going
Going
.Going
Going
Going
Going
Going
.................Going
.Going
Going
............Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
.................Going
..Going
Going
Going
Going
.Going
Going
....Going
Going
.Going
Going
Going
Going
.....Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
.....Going
..Going
Going
Going
Going
..Going
Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.............................................................Going
Going
Going
...Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
......Going
.Going
..Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
.Going
Going
.Going
..............................................Going
Going
..Going
...Going
..Going
...Going
Going
Going
Going
.................................Going
Going
Going
.Going
Going
.Going
Going
Going
Going
Going
.Going
Going
.Going
.Going
Going
Going
Going
.Going
Going
.Going
Going
Going
.Going
Going
.Going
.Going
.............................................Going
Going
Going
Going
Going
.Going
.Going
Going
Going
..............Going
Going
Going
.............Going
Going
Going
..Going
Going
Going
Going
..Going
Going
Going
...Going
.....Going
....Going
.Going
Going
Going
........Going
Going
Going
Going
.Going
.Going
................................................Going
.Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
..........Going
Going
...Going
.Going
Going
.Going
...Going
Going
.....Going
.Going
.Going
...Going
Going
..........Going
Going
Going
Going
Going
Going
....Going
.Going
Going
.Going
Going
...Going
Going
Going
..Going
.Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
.Going
.Going
......Going
Going
Going
Going
.Going
................................................Going
Going
................................................Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
..Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
...Going
Going
.Going
.Going
Going
Going
Going
Going
.Going
.........Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
..............Going
Going
..Going
Going
Going
Going
Going
..........Going
...Going
Going
...Going
.Going
Going
...Going
Going
.....Going
.Going
.Going
...Going
Going
Going
Going
Going
Going
Going
.Going
...Going
.Going
..Going
Going
..Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
..Going
Going
..Going
Going
.Going
Going
Going
Going
.Going
.Going
Going
...Going
Going
.Going
Going
Going
.Going
Going
Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
Going
Going
.........Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
..........Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
..........Going
Going
...Going
Going
.Going
Going
.Going
.....Going
...Going
Going
Going
Going
Going
Going
.....Going
...Going
Going
..Going
.Going
Going
.Going
Going
Going
...Going
Going
Going
Going
Going
Going
Going
Going
...Going
.Going
Going
Going
.Going
Going
..Going
Going
Going
Going
.Going
...................................................Going
Going
Going
.Going
Going
..Going
Going
Going
Going
Going
..Going
..Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
........Going
Going
.Going
.Going
.Going
.Going
Going
..Going
.Going
Going
.Going...
Going
Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
.Going
.............................................Going
.Going
.Going
.Going
Going
..Going
Going
.Going
Going
Going
Going
..........Going
Going
...Going
.Going
Going
Going
...Going
Going
.....Going
.Going
Going
....Going
Going
...Going
Going
Going
Going
.Going
...Going
.Going
Going
.Going
.Going
.Going
Going
..Going
.Going
Going.
Going
Going
.Going
Going
.Going
Going
Going
Going
Going
Going
..Going
Going
.Going
.Going
Going
Going
Going
...Going
Going
..........Going
Going
...Going
Going
.Going
Going
.Going
.....Going
...Going
.Going
Going
.Going
Going
Going
...Going
..Going
Going
..Going
.Going
Going
.Going
Going
...Going
Going
Going
..Going
Going
Going
Going
.Going
Going
Going
.Going
Going
.Going
Going
Going
..Going
.Going
Going
Going
Going
.Going
Going
.Going
Going
Going
.Going
.Going
.Going
.Going
.Going
....Going
Going
Going
..Going
...Going
Going
.Going
.Going
Going
.Going
Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
........Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
Going
.Going
.Going
.Going
Going
.Going
Going
.Going
.....Going
Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
........Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
Going
..........Going
Going
...Going
Going
.Going
Going
.Going
.....Going
...Going
.Going
...Going
Going
.Going
Going
Going
..Going
.Going
.Going
...Going
Going
..Going
Going
.Going
Going
...Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
.Going
Going
..Going
Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
..Going.
Going
Going
Going
Going
.Going
Going
Going
.Going
....Going
.Going
.Going
.Going
.Going
..Going
Going
.Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
..........Going
Going
.Going
...Going
.Going
Going
...Going
Going
.....Going
.Going
.Going
...Going
Going
...Going
Going
..Going
Going
Going
Going
.Going
...Going
.Going
Going
..Going
Going
.Going
Going
.Going
.Going
Going
.Going
Going
Going
Going
Going
Going
.Going
Going
..Going
Going
Going
.Going
Going
..Going
Going
Going
.Going
Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
........Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
........Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
..Going
Going
.Going.
Going
..Going
.Going
Going
Going
Going
.Going
.Going
Going
Going
..Going
...............................Going
.Going
.Going
.Going
.Going
.Going
...Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
Going
.Going
Going
.Going
....Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
.Going
Going
.Going
.Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
Going
.Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
....Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
........Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
Going
.Going
Going
Going
.Going
Going
.Going
.Going
Going
.Going
.Going
Going
Going
Going
.Going
.Going
..Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
........Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
..Going
Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
.Going
Going
Going
.Going
....Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
Going
.Going
Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
....Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
.Going
.Going
...........................Going
.Going
Going
Going
Going
..Going
.Going
.Going
..Going
........Going
Going
Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
Going
Going
.Going
Going
.Going
Going
.Going
Going
Going
.Going
Going
Going
Going
.Going
Going
..Going
.Going
.Going
Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
.Going
Going
Going
.Going
Going
.Going
Going
Going
.Going
.Going
..Going
Going
.Going
.Going
Going
Going
.Going
.Going
Going
Going
.Going
.Going
.Going
Going
.Going
Going
Going
Going
Going
..Going
Going
Going
Going
.Going
Going
Going
.Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
Going
.Going
.Going
Going
.Going
Going
Going
Going
..Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
..Going
.Going
Going
.Going
Going
Going
Going
Going
Going
Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
.Going
.Going
.Going
Going
Going
Going
....Going
.Going
.Going
Going
Going
.Going
Going
Going
Going
Going
.Going
Going
Going
Going
.Going
Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
.Going
.Going
Going.
Going
Going
Going
Going
Going
Going
..Going
.Going
Going
Going
Going
Going
Going
Going
.Going
.Going
....Going
.Going
.Going
.Going
.Going
.Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
.Going.
.Going
Going
.Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
Going
..Going
.Going
Going
.Going
Going
.Going
Going
Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
Going
Going
.Going
Going
.Going
..Going
Going
.Going
Going
Going
Going
Going
..Going
.Going
Going
.Going
Going
Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
.Going
Going
.Going
.Going
Going
.Going
Going
.Going
Going
.Going
Going
.Going
Going
.Going
Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
Going
.Going
..Going
.Going
......Going
....................................Going
Going
.Going
Going
Going
.Going
.Going
....Going
.Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
.Going
.Going
Going
..Going
Going
.Going
............Going
.Going
Going
Going
.Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
Going
Going
.Going
Going
Going
Going
Going
.Going
Going
Going
.Going
Going
Going
Going
.Going
Going
Going
.Going
Going
.Going
.Going
Going
...Going
Going
Going
Going
Going
.Going
.Going
Going
.Going
.Going
Going
.Going
Going
Going
.Going
.Going
Going
Going
.Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
Going
..Going
..Going
Going
Going
Going
.Going
Going
.Going
Going
.Going
Going
.Going
.Going
.Going
.Going
Going
.Going
Going
Going
.Going
Going
Going
Going
Going
.Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
....Going
....Going
.Going
.Going
.Going
.Going
Going
.Going.
Going
.Going
.Going.
Going
.Going
...Going
Going
.Going
.Going
.Going
Going
Going.
Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
.Going
.Going
.Going
Going
.Going
Going
Going
Going
Going
.Going
Going
.Going
Going
Going
Going
Going
Going
.Going
Going
.Going
.Going
Going
.Going
.Going
Going
.Going
Going
.Going
Going
.Going.
Going
Going
Going
.Going
Going
.Going
.Going
Going
..Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
.Going
.Going
.Going
Going
Going
..Going
.Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
...Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
Going
.......Going
.Going
.Going
Going
Going
.Going
Going
Going
.Going
Going
.Going
Going
..Going
.Going
Going
Going
Going
Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
....Going
Going
.Going
.Going
.Going
..Going
.Going
.Going
.Going
Going
Going
.Going
.Going
..Going
.Going
.Going
Going
Going
.Going
Going
..Going
.Going
.Going
.Going
Going
Going
Going
Going
Going
Going
Going
.Going
Going
Going
Going
..Going
Going
.Going
.Going
..Going
Going
..Going
Going
Going
.Going
Going
Going
.Going
Going
Going
.Going
.Going
Going
..Going
.Going
.Going
.Going
Going
Going
Going
Going
.Going
Going
.Going
Going
.Going
.Going
.Going
.Going
.Going.
Going
Going
Going
.Going
.Going
Going
.Going
.Going
.Going
.Going
Going
Going
Going
.Going
.Going
.Going
Going
Going
.Going
..Going
...........................Going
.Going
.Going
..Going
.Going
.Going
.Going
.Going
.Going
.Going
Going
..Going
Going
Going
..Going
.Going
Going
.Going
.Going
Going
Going
.Going
Going
Going
.Going
.Going
Going
.Going
Going
.Going
Going
Going
.Going
Going
.Going
Going
.Going
Going
Going
.Going
.Going
Going
.Going
Going
.Going
.Going
.Going
Going
.Going
.Going
.Going
Going
Going
.Going
Going
.Going.
Going
.Going
Going
Going
.Going
Going
..Going
Going
.Going
..Going
.Going
.Going
.Going
.Going
Going
Going
.Going..
Going
.Going
Going
....Going
.Going
.Going
.Going
Going
..Going
.Going
Going
.Going
Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
.Going
Going
Going
Going
.Going
Going
Going
.Going
.Going
Going
..Going
Going
..Going
.Going
Going
.Going
Going
Going
.Going
Going
Going
Going
.Going
.Going
Going
Going
.Going
..Going
.Going
.Going
.Going
Going
.Going
.Going
Going
Going
.Going
Going
..Going
Going
.Going
..Going
.Going
Going
.Going
Going
Going
.Going
.Going
.Going
.Going
Going
Going
Computing reduce actions
Error performing LR(1) construction: com.project.Parser.Error: Conflict on symbol case in state 
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, switch)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, CHARACTER_LITERAL)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, case)
(SWITCHLABEL -> ## default :, ()
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, FALSE)
(SWITCHLABEL -> ## default :, while)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, default)
(SWITCHBLOCKSTATEMENTGROUPSOPT -> SWITCHBLOCKSTATEMENTGROUPS ##, EPSILON)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, throw)
(SWITCHLABEL -> ## default :, ;)
(SWITCHLABEL -> ## default :, {)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, continue)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, boolean)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, short)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, FALSE)
(SWITCHLABELS -> ## SWITCHLABEL, STRING_LITERAL)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, do)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, do)
(SWITCHBLOCKSTATEMENTGROUP -> ## SWITCHLABELS BLOCKSTATEMENTS, default)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, throw)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, char)
(SWITCHLABEL -> ## default :, for)
(SWITCHBLOCKSTATEMENTGROUPS -> SWITCHBLOCKSTATEMENTGROUPS ## SWITCHBLOCKSTATEMENTGROUP, case)
(SWITCHLABELS -> ## SWITCHLABEL, while)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, for)
(SWITCHLABELS -> ## SWITCHLABEL, if)
(SWITCHLABELS -> ## SWITCHLABEL, for)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, ()
(SWITCHLABELS -> ## SWITCHLABEL, try)
(SWITCHBLOCKSTATEMENTGROUPSOPT -> SWITCHBLOCKSTATEMENTGROUPS ##, case)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, STRING_LITERAL)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, try)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, {)
(SWITCHLABEL -> ## default :, break)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, CHARACTER_LITERAL)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, {)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, for)
(SWITCHLABEL -> ## default :, this)
(SWITCHLABELS -> ## SWITCHLABEL, VARIABLE_ID)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, INTEGER_LITERAL)
(SWITCHLABEL -> ## default :, if)
(SWITCHLABELS -> ## SWITCHLABEL, new)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, NULL)
(SWITCHLABELS -> ## SWITCHLABEL, NULL)
(SWITCHBLOCKSTATEMENTGROUP -> ## SWITCHLABELS BLOCKSTATEMENTS, case)
(SWITCHLABELS -> ## SWITCHLABEL, byte)
(SWITCHLABELS -> ## SWITCHLABEL, switch)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, super)
(SWITCHLABEL -> ## default :, throw)
(SWITCHLABELS -> ## SWITCHLABEL, {)
(SWITCHLABELS -> ## SWITCHLABEL, return)
(SWITCHBLOCKSTATEMENTGROUP -> ## SWITCHLABELS BLOCKSTATEMENTS, EPSILON)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, INTEGER_LITERAL)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, continue)
(SWITCHLABELS -> ## SWITCHLABEL, case)
(SWITCHLABEL -> ## default :, super)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, TRUE)
(SWITCHLABEL -> ## default :, FALSE)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, break)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, break)
(SWITCHLABEL -> ## default :, try)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, if)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, NULL)
(SWITCHLABEL -> ## default :, short)
(SWITCHLABELS -> ## SWITCHLABEL, ;)
(SWITCHLABEL -> ## default :, CHARACTER_LITERAL)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, super)
(SWITCHLABEL -> ## default :, STRING_LITERAL)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, if)
(SWITCHLABEL -> ## default :, new)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, this)
(SWITCHLABELS -> ## SWITCHLABEL, TRUE)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, this)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, char)
(SWITCHLABEL -> ## default :, continue)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, byte)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, default)
(SWITCHLABELS -> ## SWITCHLABEL, INTEGER_LITERAL)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, return)
(SWITCHLABELS -> ## SWITCHLABEL, do)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, VARIABLE_ID)
(SWITCHLABEL -> ## default :, NULL)
(SWITCHLABEL -> ## default :, char)
(SWITCHBLOCKSTATEMENTGROUPS -> SWITCHBLOCKSTATEMENTGROUPS ## SWITCHBLOCKSTATEMENTGROUP, default)
(SWITCHLABEL -> ## default :, INTEGER_LITERAL)
(SWITCHLABELS -> ## SWITCHLABEL, boolean)
(SWITCHLABELS -> ## SWITCHLABEL, CHARACTER_LITERAL)
(SWITCHBLOCKSTATEMENTGROUPS -> SWITCHBLOCKSTATEMENTGROUPS ## SWITCHBLOCKSTATEMENTGROUP, EPSILON)
(SWITCHLABELS -> ## SWITCHLABEL, break)
(SWITCHLABELS -> ## SWITCHLABEL, ()
(SWITCHLABEL -> ## default :, do)
(SWITCHLABELS -> ## SWITCHLABEL, throw)
(SWITCHLABELS -> ## SWITCHLABEL, char)
(SWITCHLABEL -> ## default :, case)
(SWITCHLABELS -> ## SWITCHLABEL, super)
(SWITCHLABELS -> ## SWITCHLABEL, this)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, TRUE)
(SWITCHLABEL -> ## default :, TRUE)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, int)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, byte)
(SWITCHLABEL -> ## default :, byte)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, new)
(SWITCHLABELS -> ## SWITCHLABEL, short)
(SWITCHBLOCKSTATEMENTGROUPSOPT -> SWITCHBLOCKSTATEMENTGROUPS ##, default)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, boolean)
(SWITCHLABELS -> ## SWITCHLABEL, FALSE)
(SWITCHLABELS -> ## SWITCHLABEL, continue)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, STRING_LITERAL)
(SWITCHLABEL -> ## default :, switch)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, case)
(SWITCHLABEL -> ## default :, VARIABLE_ID)
(SWITCHLABEL -> ## default :, boolean)
(SWITCHLABEL -> ## default :, return)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, ()
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, return)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, short)
(SWITCHLABELS -> ## SWITCHLABEL, int)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, switch)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, VARIABLE_ID)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, ;)
(SWITCHLABEL -> ## default :, int)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, try)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, ;)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, while)
(SWITCHLABELS -> ## SWITCHLABEL, default)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, new)
(SWITCHLABEL -> ## case CONSTANTEXPRESSION :, while)
(SWITCHLABEL -> ## default :, default)
(SWITCHLABELS -> ## SWITCHLABELS SWITCHLABEL, int)

Possible actions:
shift 
(LITERAL -> ## INTEGER_LITERAL, >=)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, |)
(NAME -> ## QUALIFIEDNAME, -)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, *)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, ==)
(CONDITIONALANDEXPRESSION -> ## CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION, :)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, &&)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], *=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, +)
(FIELDACCESS -> ## super . VARIABLE_ID, &=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, *)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, |)
(LEFTHANDSIDE -> ## FIELDACCESS, =)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, &&)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, >>)
(PRIMARY -> ## PRIMARYNONEWARRAY, >>)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, ^)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, *)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, &&)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), <<)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, ?)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, <=)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), /)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, |)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), <<)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], <<=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, <=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, &&)
(NAME -> ## QUALIFIEDNAME, !=)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, :)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, *)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, &)
(PRIMARYNONEWARRAY -> ## this, ||)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, /)
(LITERAL -> ## INTEGER_LITERAL, *)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, .)
(POSTFIXEXPRESSION -> ## PRIMARY, /)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), +)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, default)
(LITERAL -> ## INTEGER_LITERAL, <=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, -)
(POSTFIXEXPRESSION -> ## PRIMARY, <)
(INCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION, ?)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], %)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, >=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, |)
(NAME -> ## SIMPLENAME, ==)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, >=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], &&)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, -=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), [)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, ^)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], instanceof)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, &)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, <=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, instanceof)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, >)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, |)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, +)
(PRIMARYNONEWARRAY -> ## LITERAL, :)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, &)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, >=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, >>>)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), %)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, .)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, |)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ?)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, >)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, do)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, continue)
(LEFTHANDSIDE -> ## FIELDACCESS, &=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, ==)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, ==)
(LITERAL -> ## TRUE, >>>)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, ^)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, ||)
(POSTFIXEXPRESSION -> ## PRIMARY, >>)
(INCLUSIVEOREXPRESSION -> ## INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION, ||)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, &)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, |)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), <=)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), /)
(LITERAL -> ## INTEGER_LITERAL, <<)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, ||)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, >>)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), .)
(LITERAL -> ## INTEGER_LITERAL, :)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, &&)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, ^)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, instanceof)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, ||)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), <=)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), .)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, &)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, &&)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, !=)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, :)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, ||)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, ||)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, >>)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, |)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, instanceof)
(INCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION, |)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, ==)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, |)
(FIELDACCESS -> ## super . VARIABLE_ID, &&)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), ||)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, <)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, |)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), ||)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, short)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, |=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, :)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, |)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, [)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, ||)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, super)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, %)
(LITERAL -> ## FALSE, ==)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), instanceof)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, <=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, &&)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, /)
(LITERAL -> ## TRUE, >=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, CHARACTER_LITERAL)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, >)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, new)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, <=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, <)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, |)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], /=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, >=)
(POSTFIXEXPRESSION -> ## PRIMARY, *)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >>>=)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, ?)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## this, >=)
(PRIMARY -> ## PRIMARYNONEWARRAY, !=)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), <=)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, >=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, /)
(PRIMARYNONEWARRAY -> ## this, %)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), .)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, ==)
(PRIMARYNONEWARRAY -> ## LITERAL, >)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, ^)
(LEFTHANDSIDE -> ## NAME, /=)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, <<)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, %)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], -=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], <<=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, >>)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], <<)
(LITERAL -> ## INTEGER_LITERAL, -)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, *)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, <)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, -)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, >)
(LITERAL -> ## CHARACTER_LITERAL, ?)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), ?)
(POSTFIXEXPRESSION -> ## PRIMARY, ||)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, -)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, ||)
(NAME -> ## SIMPLENAME, %=)
(NAME -> ## SIMPLENAME, ()
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, +)
(FIELDACCESS -> ## super . VARIABLE_ID, >>>=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, >)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, <)
(NAME -> ## SIMPLENAME, >)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, >>)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, >=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, <<)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, .)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, >>>)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, <)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, *)
(CONDITIONALOREXPRESSION -> ## CONDITIONALANDEXPRESSION, :)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, ^)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, &)
(LITERAL -> ## STRING_LITERAL, instanceof)
(NAME -> ## QUALIFIEDNAME, ?)
(POSTFIXEXPRESSION -> ## NAME, >>>)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, <<)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, <=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, STRING_LITERAL)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], *=)
(NAME -> ## QUALIFIEDNAME, >>>)
(LITERAL -> ## FALSE, instanceof)
(LITERAL -> ## NULL, &&)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, ||)
(NAME -> ## QUALIFIEDNAME, &=)
(LITERAL -> ## CHARACTER_LITERAL, ^)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, !=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, *)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, -)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, <)
(POSTFIXEXPRESSION -> ## PRIMARY, |)
(POSTFIXEXPRESSION -> ## NAME, >)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, >>>)
(FIELDACCESS -> ## super . VARIABLE_ID, /)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), >=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >>>)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, ?)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, ^)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), .)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, :)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, &)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, ==)
(LITERAL -> ## INTEGER_LITERAL, !=)
(LITERAL -> ## FALSE, &)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, &&)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, ==)
(LITERAL -> ## NULL, &)
(LEFTHANDSIDE -> ## NAME, ^=)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, >)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, <)
(INCLUSIVEOREXPRESSION -> ## INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION, ?)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, <<)
(LITERAL -> ## TRUE, *)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, int)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, <=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), >>>)
(PRIMARY -> ## PRIMARYNONEWARRAY, <<)
(LITERAL -> ## CHARACTER_LITERAL, .)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, >>>)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, &&)
(POSTFIXEXPRESSION -> ## PRIMARY, &)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), ?)
(LEFTHANDSIDE -> ## FIELDACCESS, %=)
(NAME -> ## QUALIFIEDNAME, +=)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, !=)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, &&)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, ^)
(PRIMARYNONEWARRAY -> ## LITERAL, >>>)
(LITERAL -> ## CHARACTER_LITERAL, <<)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, !=)
(LEFTHANDSIDE -> ## ARRAYACCESS, +=)
(NAME -> ## SIMPLENAME, >>>=)
(PRIMARY -> ## PRIMARYNONEWARRAY, +)
(LITERAL -> ## TRUE, ||)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, &&)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, ?)
(LITERAL -> ## FALSE, /)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, >>>)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, throw)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, %)
(NAME -> ## SIMPLENAME, |=)
(LITERAL -> ## CHARACTER_LITERAL, ||)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, +)
(NAME -> ## SIMPLENAME, -)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, /)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, +)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, >=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, &)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, <<)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, !=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, >=)
(LITERAL -> ## CHARACTER_LITERAL, >=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, &&)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, |)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, &&)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), [)
(SIMPLENAME -> ## VARIABLE_ID, ?)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, :)
(LITERAL -> ## NULL, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, <<)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, :)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, -)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, &&)
(LITERAL -> ## INTEGER_LITERAL, &&)
(PRIMARYNONEWARRAY -> ## this, *)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, !=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, !=)
(PRIMARY -> ## PRIMARYNONEWARRAY, ==)
(FIELDACCESS -> ## super . VARIABLE_ID, *)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, <)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, >)
(INCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION, &&)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >>=)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), :)
(SIMPLENAME -> ## VARIABLE_ID, >>=)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, >=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], [)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, +)
(LITERAL -> ## NULL, ||)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, ||)
(NAME -> ## QUALIFIEDNAME, |)
(PRIMARYNONEWARRAY -> ## LITERAL, instanceof)
(LITERAL -> ## STRING_LITERAL, &&)
(NAME -> ## QUALIFIEDNAME, *)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, *)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), >>)
(ASSIGNMENT -> ## LEFTHANDSIDE ASSIGNMENTOPERATOR ASSIGNMENTEXPRESSION, :)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, >>>)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, <<)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, +)
(LITERAL -> ## STRING_LITERAL, >>>)
(LEFTHANDSIDE -> ## FIELDACCESS, *=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, %)
(POSTFIXEXPRESSION -> ## PRIMARY, <<)
(NAME -> ## SIMPLENAME, *)
(POSTFIXEXPRESSION -> ## NAME, >=)
(POSTFIXEXPRESSION -> ## PRIMARY, &&)
(LITERAL -> ## FALSE, .)
(PRIMARYNONEWARRAY -> ## this, <<)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, >=)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, ||)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, >>>)
(LITERAL -> ## CHARACTER_LITERAL, <=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], ^=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, :)
(LEFTHANDSIDE -> ## ARRAYACCESS, %=)
(NAME -> ## SIMPLENAME, .)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, .)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, ?)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, &&)
(LEFTHANDSIDE -> ## NAME, =)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), [)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, ?)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), *)
(LEFTHANDSIDE -> ## NAME, +=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, ||)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), ||)
(POSTFIXEXPRESSION -> ## PRIMARY, -)
(LITERAL -> ## NULL, ?)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, +)
(FIELDACCESS -> ## super . VARIABLE_ID, >=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, ==)
(EXPRESSION -> ## ASSIGNMENTEXPRESSION, :)
(NAME -> ## QUALIFIEDNAME, >>)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], &=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, %)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, ^)
(LITERAL -> ## NULL, <<)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], ||)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, :)
(PRIMARY -> ## PRIMARYNONEWARRAY, >>>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, ||)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), >)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, <)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, ||)
(SIMPLENAME -> ## VARIABLE_ID, ||)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, /)
(LEFTHANDSIDE -> ## NAME, %=)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, ?)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, <)
(PRIMARYNONEWARRAY -> ## LITERAL, ==)
(LEFTHANDSIDE -> ## ARRAYACCESS, -=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, <<)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, :)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), ==)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), |)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, ==)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, switch)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, <)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), -)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, *)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), :)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, &)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), -)
(SIMPLENAME -> ## VARIABLE_ID, %=)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, |)
(LITERAL -> ## FALSE, <<)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, VARIABLE_ID)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, <)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], <=)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, <<)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), >>)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, :)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, <=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, <<)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, +)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, while)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, ||)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, >)
(NAME -> ## QUALIFIEDNAME, >=)
(PRIMARY -> ## PRIMARYNONEWARRAY, ?)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, <)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), &)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, instanceof)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, |)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, |)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, ==)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, instanceof)
(LITERAL -> ## STRING_LITERAL, -)
(LITERAL -> ## TRUE, instanceof)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >>=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, |=)
(FIELDACCESS -> ## super . VARIABLE_ID, .)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, +)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, !=)
(LEFTHANDSIDE -> ## NAME, &=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, ?)
(FIELDACCESS -> ## super . VARIABLE_ID, =)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, /)
(CONDITIONALOREXPRESSION -> ## CONDITIONALOREXPRESSION || CONDITIONALANDEXPRESSION, :)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, ?)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, ?)
(PRIMARYNONEWARRAY -> ## LITERAL, ^)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), |)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), >=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >>>=)
(PRIMARY -> ## PRIMARYNONEWARRAY, ||)
(LITERAL -> ## CHARACTER_LITERAL, *)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, :)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, -)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, &&)
(LITERAL -> ## CHARACTER_LITERAL, &&)
(LITERAL -> ## INTEGER_LITERAL, &)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, &&)
(PRIMARYNONEWARRAY -> ## this, instanceof)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, instanceof)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, +)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, ||)
(NAME -> ## QUALIFIEDNAME, /)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, /)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, <=)
(LITERAL -> ## CHARACTER_LITERAL, %)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, ()
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, ^)
(POSTFIXEXPRESSION -> ## PRIMARY, !=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, *)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, &&)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, <)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, !=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], *)
(PRIMARY -> ## PRIMARYNONEWARRAY, &)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, *)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, %)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, ^)
(NAME -> ## QUALIFIEDNAME, :)
(LITERAL -> ## INTEGER_LITERAL, ||)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, &)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, >=)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, >>>)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], /=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, *)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, ^)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), /)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, |)
(LEFTHANDSIDE -> ## ARRAYACCESS, &=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, >=)
(NAME -> ## SIMPLENAME, !=)
(NAME -> ## QUALIFIEDNAME, <<=)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, >>>)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, |)
(PRIMARYNONEWARRAY -> ## LITERAL, <=)
(NAME -> ## SIMPLENAME, *=)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, !=)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, ||)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, :)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, >>)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, >>)
(LITERAL -> ## TRUE, ==)
(NAME -> ## SIMPLENAME, ||)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, ||)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, ^)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, ||)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, >>>)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, ||)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, +)
(SIMPLENAME -> ## VARIABLE_ID, %)
(LITERAL -> ## NULL, >>>)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, .)
(LEFTHANDSIDE -> ## NAME, *=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, instanceof)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, >>>)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ^=)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, >=)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), +)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, |)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, >)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, >>>)
(FIELDACCESS -> ## super . VARIABLE_ID, [)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, &&)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, &&)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, instanceof)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, instanceof)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), /)
(LITERAL -> ## NULL, -)
(LITERAL -> ## INTEGER_LITERAL, +)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, &&)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, +)
(POSTFIXEXPRESSION -> ## NAME, <=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, >=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, ?)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, &&)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), <<)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, >>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, >>)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, >)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, <=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, &)
(POSTFIXEXPRESSION -> ## NAME, &)
(LITERAL -> ## TRUE, -)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, <=)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, ?)
(NAME -> ## QUALIFIEDNAME, -=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, >>)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, >)
(LITERAL -> ## INTEGER_LITERAL, <)
(SIMPLENAME -> ## VARIABLE_ID, >=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, !=)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, %)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## this, -)
(SIMPLENAME -> ## VARIABLE_ID, +)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, ?)
(NAME -> ## SIMPLENAME, =)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, <<)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), &&)
(LITERAL -> ## FALSE, |)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, TRUE)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, &)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], /)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, *)
(LITERAL -> ## CHARACTER_LITERAL, [)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, /)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, -)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, ==)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ^)
(FIELDACCESS -> ## super . VARIABLE_ID, !=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >>)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, ^)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, ||)
(LITERAL -> ## INTEGER_LITERAL, >)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], +=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, <)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, &&)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), [)
(PRIMARYNONEWARRAY -> ## this, &&)
(LITERAL -> ## FALSE, >=)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, :)
(LITERAL -> ## STRING_LITERAL, +)
(NAME -> ## QUALIFIEDNAME, <=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, if)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, <<)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, ^)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, <<)
(FIELDACCESS -> ## super . VARIABLE_ID, >>=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, :)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, !=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, [)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), >>>)
(LITERAL -> ## STRING_LITERAL, <<)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, <<)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), instanceof)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, ^)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, <=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, :)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, -)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], %=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, %)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, :)
(INCLUSIVEOREXPRESSION -> ## INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION, |)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, -)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, ||)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, ?)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, >>)
(LITERAL -> ## STRING_LITERAL, ==)
(PRIMARYNONEWARRAY -> ## LITERAL, ||)
(NAME -> ## SIMPLENAME, /=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, *)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], -)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, <<)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), <=)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, >=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, [)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, instanceof)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, <=)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, <)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, >)
(POSTFIXEXPRESSION -> ## NAME, %)
(FIELDACCESS -> ## super . VARIABLE_ID, +=)
(CONDITIONALANDEXPRESSION -> ## INCLUSIVEOREXPRESSION, :)
(POSTFIXEXPRESSION -> ## PRIMARY, ^)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, +=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, :)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, >)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, instanceof)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, <=)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, &)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, >>)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, +)
(PRIMARYNONEWARRAY -> ## LITERAL, <<)
(LITERAL -> ## INTEGER_LITERAL, instanceof)
(POSTFIXEXPRESSION -> ## PRIMARY, >=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## this, ^)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), <)
(SIMPLENAME -> ## VARIABLE_ID, |)
(LEFTHANDSIDE -> ## ARRAYACCESS, |=)
(LITERAL -> ## STRING_LITERAL, >>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, !=)
(NAME -> ## SIMPLENAME, +)
(LITERAL -> ## STRING_LITERAL, .)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, ^)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, &)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, %=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, &&)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, >=)
(POSTFIXEXPRESSION -> ## NAME, instanceof)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, instanceof)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, |)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, >)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, |)
(POSTFIXEXPRESSION -> ## PRIMARY, <=)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), ?)
(POSTFIXEXPRESSION -> ## PRIMARY, >>>)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >=)
(LITERAL -> ## STRING_LITERAL, [)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, +)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, ^=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, ?)
(SIMPLENAME -> ## VARIABLE_ID, /)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, %)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, >>)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >>>)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, ^)
(PRIMARY -> ## PRIMARYNONEWARRAY, instanceof)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, instanceof)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, ==)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, %)
(FIELDACCESS -> ## super . VARIABLE_ID, /=)
(NAME -> ## SIMPLENAME, >>>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, <)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, ?)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## LITERAL, *)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, <<=)
(PRIMARYNONEWARRAY -> ## this, >>)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, |)
(LITERAL -> ## TRUE, <)
(INCLUSIVEOREXPRESSION -> ## INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION, :)
(LITERAL -> ## TRUE, |)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, &)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, &&)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, <<)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, instanceof)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, >=)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, ==)
(SIMPLENAME -> ## VARIABLE_ID, *)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, >>>)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, ==)
(LITERAL -> ## NULL, >)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, ^)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, !=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), >)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], &)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, <=)
(SIMPLENAME -> ## VARIABLE_ID, <=)
(LITERAL -> ## INTEGER_LITERAL, ?)
(CONDITIONALANDEXPRESSION -> ## INCLUSIVEOREXPRESSION, ||)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), |)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, ?)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), ^)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, <<)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, <)
(POSTFIXEXPRESSION -> ## PRIMARY, :)
(LITERAL -> ## CHARACTER_LITERAL, +)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, ==)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), <)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, >>>)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, ||)
(PRIMARYNONEWARRAY -> ## LITERAL, >>)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), <)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, ||)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ==)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, >)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, >>>)
(NAME -> ## SIMPLENAME, &&)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), !=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, ?)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, ==)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, ==)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), ^)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, /)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, >>)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], &)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, ?)
(FIELDACCESS -> ## super . VARIABLE_ID, >)
(NAME -> ## QUALIFIEDNAME, %=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], <=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), instanceof)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, ^)
(FIELDACCESS -> ## super . VARIABLE_ID, *=)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, /)
(PRIMARY -> ## PRIMARYNONEWARRAY, %)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, instanceof)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), *)
(NAME -> ## SIMPLENAME, &=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, +)
(LITERAL -> ## TRUE, [)
(LITERAL -> ## TRUE, /)
(FIELDACCESS -> ## super . VARIABLE_ID, >>>)
(PRIMARYNONEWARRAY -> ## LITERAL, &&)
(LITERAL -> ## CHARACTER_LITERAL, >)
(SIMPLENAME -> ## VARIABLE_ID, ^=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, =)
(LITERAL -> ## FALSE, >>>)
(LITERAL -> ## FALSE, <=)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, instanceof)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, >=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, <)
(LITERAL -> ## CHARACTER_LITERAL, &)
(LEFTHANDSIDE -> ## NAME, >>>=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, {)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, instanceof)
(FIELDACCESS -> ## super . VARIABLE_ID, <<=)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, &&)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, >>)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, /)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], |)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, ^)
(LEFTHANDSIDE -> ## FIELDACCESS, <<=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, +)
(LITERAL -> ## CHARACTER_LITERAL, !=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], |=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, >)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], +)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, <<)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), [)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), &)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, ?)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, /)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, >>)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, ||)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, <=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, !=)
(CONDITIONALOREXPRESSION -> ## CONDITIONALANDEXPRESSION, ||)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, -)
(CONDITIONALANDEXPRESSION -> ## CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION, ||)
(LEFTHANDSIDE -> ## ARRAYACCESS, >>=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, ?)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, ==)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >=)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, ?)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), !=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], ^)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, &&)
(INCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION, :)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, <)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), !=)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), %)
(PRIMARYNONEWARRAY -> ## this, /)
(CONDITIONALOREXPRESSION -> ## CONDITIONALANDEXPRESSION, ?)
(SIMPLENAME -> ## VARIABLE_ID, [)
(PRIMARYNONEWARRAY -> ## this, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, ==)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, >>>)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, ||)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, -)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, >>>)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, ;)
(LITERAL -> ## INTEGER_LITERAL, [)
(PRIMARYNONEWARRAY -> ## LITERAL, &)
(POSTFIXEXPRESSION -> ## NAME, *)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, >>>)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, >)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, :)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, char)
(LITERAL -> ## NULL, ^)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, /)
(POSTFIXEXPRESSION -> ## NAME, &&)
(LITERAL -> ## FALSE, !=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, *=)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, ^)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, >=)
(FIELDACCESS -> ## super . VARIABLE_ID, :)
(NAME -> ## QUALIFIEDNAME, +)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, -)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, -)
(LITERAL -> ## NULL, .)
(NAME -> ## QUALIFIEDNAME, >>=)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, :)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], ^=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, &&)
(LITERAL -> ## CHARACTER_LITERAL, >>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, >=)
(POSTFIXEXPRESSION -> ## NAME, /)
(LITERAL -> ## NULL, >=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], /)
(LITERAL -> ## NULL, +)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ||)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, ||)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), /)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, %)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], >>>=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, :)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), &)
(CONDITIONALANDEXPRESSION -> ## INCLUSIVEOREXPRESSION, ?)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, |)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, ^)
(LEFTHANDSIDE -> ## ARRAYACCESS, =)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, %)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, !=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, %)
(PRIMARY -> ## PRIMARYNONEWARRAY, >=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, :)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, >=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, ||)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), &&)
(SIMPLENAME -> ## VARIABLE_ID, ^)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, ^)
(LEFTHANDSIDE -> ## FIELDACCESS, >>=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, >)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, case)
(LITERAL -> ## CHARACTER_LITERAL, :)
(FIELDACCESS -> ## super . VARIABLE_ID, <<)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], ||)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, >>)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, &&)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, >>>)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, ||)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, instanceof)
(FIELDACCESS -> ## super . VARIABLE_ID, ?)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, ==)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, +)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, %)
(NAME -> ## SIMPLENAME, &)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, <=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, &)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], <)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), *)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, >)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, |)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, ^)
(LITERAL -> ## TRUE, &)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, ||)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), >>)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), >=)
(NAME -> ## SIMPLENAME, <<=)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, :)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, <=)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, ==)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, ^)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, *)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), -)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, ==)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), >)
(LITERAL -> ## FALSE, >)
(LEFTHANDSIDE -> ## FIELDACCESS, >>>=)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, instanceof)
(PRIMARYNONEWARRAY -> ## this, <=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >>>=)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, ==)
(NAME -> ## SIMPLENAME, +=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, <=)
(NAME -> ## SIMPLENAME, <)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, ^)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, *)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), %)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >>=)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, >>>)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, ||)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, %)
(PRIMARYNONEWARRAY -> ## this, >)
(ASSIGNMENTEXPRESSION -> ## CONDITIONALEXPRESSION, :)
(NAME -> ## QUALIFIEDNAME, ||)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, &=)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, ?)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, <=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, >>)
(LITERAL -> ## TRUE, >>)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, ?)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), >=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, >)
(SIMPLENAME -> ## VARIABLE_ID, >>>)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, instanceof)
(NAME -> ## SIMPLENAME, :)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), .)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), >>)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), >=)
(LITERAL -> ## STRING_LITERAL, ||)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, >>)
(CONDITIONALEXPRESSION -> ## CONDITIONALOREXPRESSION ? EXPRESSION : CONDITIONALEXPRESSION, :)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, <)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, <=)
(SIMPLENAME -> ## VARIABLE_ID, >)
(SIMPLENAME -> ## VARIABLE_ID, <<=)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, ^)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, &)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, >)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, &)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, |)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, >=)
(LITERAL -> ## FALSE, :)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, -)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, ^)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, >>)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, instanceof)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, &)
(SIMPLENAME -> ## VARIABLE_ID, |=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, ==)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, &)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], ?)
(SIMPLENAME -> ## VARIABLE_ID, =)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, !=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, ?)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, -)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, >>)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, ^)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, /)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, ||)
(LITERAL -> ## INTEGER_LITERAL, .)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, ?)
(LITERAL -> ## CHARACTER_LITERAL, ==)
(PRIMARY -> ## PRIMARYNONEWARRAY, &&)
(POSTFIXEXPRESSION -> ## NAME, :)
(LEFTHANDSIDE -> ## FIELDACCESS, /=)
(FIELDACCESS -> ## super . VARIABLE_ID, ==)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, &)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, :)
(LITERAL -> ## STRING_LITERAL, *)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, |)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, <)
(NAME -> ## QUALIFIEDNAME, *=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, !=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, instanceof)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, ^)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, :)
(LITERAL -> ## FALSE, *)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, &)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, >>)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, instanceof)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, instanceof)
(FIELDACCESS -> ## super . VARIABLE_ID, >>)
(LITERAL -> ## STRING_LITERAL, :)
(PRIMARYNONEWARRAY -> ## LITERAL, >=)
(LITERAL -> ## STRING_LITERAL, %)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, /)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, ^)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), &)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, &)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, /)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, %)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], =)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, |)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, >)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], [)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, +)
(LEFTHANDSIDE -> ## ARRAYACCESS, /=)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, >=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, %)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, <)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, >)
(LITERAL -> ## FALSE, &&)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, instanceof)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, |)
(NAME -> ## SIMPLENAME, <<)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, -)
(POSTFIXEXPRESSION -> ## NAME, ?)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, <)
(SIMPLENAME -> ## VARIABLE_ID, -)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), <<)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, &&)
(ASSIGNMENTEXPRESSION -> ## ASSIGNMENT, :)
(SIMPLENAME -> ## VARIABLE_ID, *=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, <)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, ?)
(PRIMARYNONEWARRAY -> ## LITERAL, %)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), ^)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, >>>)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, <)
(CONDITIONALANDEXPRESSION -> ## CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION, ?)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, !=)
(LEFTHANDSIDE -> ## ARRAYACCESS, *=)
(PRIMARYNONEWARRAY -> ## LITERAL, /)
(PRIMARYNONEWARRAY -> ## LITERAL, !=)
(SIMPLENAME -> ## VARIABLE_ID, -=)
(NAME -> ## QUALIFIEDNAME, ^)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, <<)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], |)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, !=)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, >>)
(NAME -> ## QUALIFIEDNAME, [)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, ^)
(NAME -> ## QUALIFIEDNAME, %)
(LITERAL -> ## NULL, |)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, FALSE)
(FIELDACCESS -> ## super . VARIABLE_ID, <=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), -)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, =)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], %=)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, ||)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, *)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, |)
(LITERAL -> ## FALSE, <)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, &)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, try)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, <=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, !=)
(POSTFIXEXPRESSION -> ## NAME, >>)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, NULL)
(PRIMARY -> ## PRIMARYNONEWARRAY, :)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, >)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, >)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, <<)
(NAME -> ## QUALIFIEDNAME, ^=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], ?)
(LITERAL -> ## TRUE, <=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, |)
(PRIMARYNONEWARRAY -> ## this, :)
(FIELDACCESS -> ## super . VARIABLE_ID, <)
(LITERAL -> ## TRUE, :)
(NAME -> ## QUALIFIEDNAME, ()
(LEFTHANDSIDE -> ## ARRAYACCESS, <<=)
(NAME -> ## SIMPLENAME, >>)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, ||)
(LITERAL -> ## TRUE, ^)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, ?)
(PRIMARYNONEWARRAY -> ## LITERAL, <)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), >>>)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, +)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, ==)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, ||)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), %)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, <=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, boolean)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, :)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, !=)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, &&)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, ?)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, instanceof)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], ==)
(FIELDACCESS -> ## super . VARIABLE_ID, ^=)
(LITERAL -> ## NULL, [)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), :)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], =)
(LITERAL -> ## CHARACTER_LITERAL, instanceof)
(PRIMARY -> ## PRIMARYNONEWARRAY, |)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, /)
(LITERAL -> ## STRING_LITERAL, |)
(FIELDACCESS -> ## super . VARIABLE_ID, -=)
(NAME -> ## QUALIFIEDNAME, ==)
(LITERAL -> ## FALSE, ^)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), ^)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), instanceof)
(SIMPLENAME -> ## VARIABLE_ID, instanceof)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], .)
(LITERAL -> ## STRING_LITERAL, >=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, byte)
(POSTFIXEXPRESSION -> ## NAME, <)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >>>)
(PRIMARYNONEWARRAY -> ## LITERAL, .)
(LITERAL -> ## INTEGER_LITERAL, ==)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, ==)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, >=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, +)
(NAME -> ## QUALIFIEDNAME, |=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, ^)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, ?)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), ?)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), ||)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], :)
(EXCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION ^ ANDEXPRESSION, :)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, -)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, >>)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, +)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, <=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, &&)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, :)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, :)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, +)
(PRIMARYNONEWARRAY -> ## LITERAL, ?)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, *)
(LEFTHANDSIDE -> ## NAME, >>=)
(ANDEXPRESSION -> ## ANDEXPRESSION & EQUALITYEXPRESSION, ||)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, ==)
(LEFTHANDSIDE -> ## FIELDACCESS, +=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, <)
(PRIMARYNONEWARRAY -> ## this, [)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, <)
(PRIMARY -> ## PRIMARYNONEWARRAY, *)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, &)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, <=)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, ||)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], *)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, instanceof)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, <<)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, ?)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, <=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, &)
(POSTFIXEXPRESSION -> ## PRIMARY, %)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, <=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], !=)
(LITERAL -> ## NULL, /)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, >>)
(LITERAL -> ## CHARACTER_LITERAL, >>>)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, !=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, -)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, ||)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, !=)
(LITERAL -> ## TRUE, <<)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, &&)
(PRIMARYNONEWARRAY -> ## this, >>>)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, ?)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, >>>)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), instanceof)
(LITERAL -> ## FALSE, ||)
(LITERAL -> ## STRING_LITERAL, >)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, &)
(FIELDACCESS -> ## super . VARIABLE_ID, %=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, this)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, &)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, !=)
(NAME -> ## QUALIFIEDNAME, &)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, |)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, <=)
(LEFTHANDSIDE -> ## NAME, <<=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, >=)
(SIMPLENAME -> ## VARIABLE_ID, <<)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, :)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), >>>)
(FIELDACCESS -> ## super . VARIABLE_ID, ||)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, ||)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, <<=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, >=)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, ?)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, <)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, >)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, &)
(SIMPLENAME -> ## VARIABLE_ID, &&)
(FIELDACCESS -> ## super . VARIABLE_ID, %)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, *)
(PRIMARYNONEWARRAY -> ## this, <)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, %)
(LITERAL -> ## INTEGER_LITERAL, %)
(SIMPLENAME -> ## VARIABLE_ID, >>>=)
(LITERAL -> ## STRING_LITERAL, ?)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], -=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, :)
(NAME -> ## SIMPLENAME, instanceof)
(LITERAL -> ## TRUE, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, <)
(LITERAL -> ## STRING_LITERAL, ^)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, /)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, ||)
(NAME -> ## SIMPLENAME, ?)
(SIMPLENAME -> ## VARIABLE_ID, :)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, &)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, ==)
(POSTFIXEXPRESSION -> ## NAME, ^)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, ^)
(LITERAL -> ## NULL, :)
(LITERAL -> ## TRUE, ?)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, ?)
(LITERAL -> ## NULL, instanceof)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, >=)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, for)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, <<)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, ^)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, /)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, *=)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), *)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], +=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, >>>)
(LITERAL -> ## NULL, <=)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), |)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, ||)
(LITERAL -> ## TRUE, %)
(PRIMARY -> ## PRIMARYNONEWARRAY, -)
(CONDITIONALOREXPRESSION -> ## CONDITIONALOREXPRESSION || CONDITIONALANDEXPRESSION, ?)
(NAME -> ## SIMPLENAME, /)
(PRIMARY -> ## PRIMARYNONEWARRAY, <)
(INCLUSIVEOREXPRESSION -> ## EXCLUSIVEOREXPRESSION, ||)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, &=)
(PRIMARY -> ## PRIMARYNONEWARRAY, <=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), &&)
(NAME -> ## SIMPLENAME, <=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, >>>)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, /=)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, instanceof)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, >>>)
(ARRAYCREATIONEXPRESSION -> ## new CLASSORINTERFACETYPE DIMEXPRS DIMSOPT, <<)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, >=)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), !=)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, >>)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, .)
(EXCLUSIVEOREXPRESSION -> ## ANDEXPRESSION, &&)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, %=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, &&)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), ==)
(LITERAL -> ## INTEGER_LITERAL, >>>)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, instanceof)
(CONDITIONALOREXPRESSION -> ## CONDITIONALOREXPRESSION || CONDITIONALANDEXPRESSION, ||)
(SIMPLENAME -> ## VARIABLE_ID, <)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, .)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), |)
(PRIMARYNONEWARRAY -> ## LITERAL, |)
(LITERAL -> ## TRUE, >)
(INCLUSIVEOREXPRESSION -> ## INCLUSIVEOREXPRESSION | EXCLUSIVEOREXPRESSION, &&)
(LEFTHANDSIDE -> ## FIELDACCESS, |=)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, -=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, +=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, >)
(POSTFIXEXPRESSION -> ## PRIMARY, ==)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), <)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], ==)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, <=)
(LITERAL -> ## STRING_LITERAL, &)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, /=)
(LITERAL -> ## INTEGER_LITERAL, ^)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, .)
(LEFTHANDSIDE -> ## ARRAYACCESS, >>>=)
(PRIMARY -> ## PRIMARYNONEWARRAY, .)
(SIMPLENAME -> ## VARIABLE_ID, .)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), >>>)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, return)
(CONDITIONALEXPRESSION -> ## CONDITIONALOREXPRESSION, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, >)
(SIMPLENAME -> ## VARIABLE_ID, ==)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, ==)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, :)
(PRIMARYNONEWARRAY -> ## this, &)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), -)
(LITERAL -> ## STRING_LITERAL, <=)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, :)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, ==)
(FIELDACCESS -> ## super . VARIABLE_ID, &)
(LITERAL -> ## TRUE, &&)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, %)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], -)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], <)
(EQUALITYEXPRESSION -> ## RELATIONALEXPRESSION, ?)
(POSTFIXEXPRESSION -> ## NAME, ||)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, |)
(NAME -> ## QUALIFIEDNAME, >>>=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, <=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, >)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, !=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, +)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, instanceof)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >>)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, <)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, &&)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, >=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, <=)
(NAME -> ## SIMPLENAME, >>=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, -)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], :)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, |)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, <=)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, *)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, instanceof)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, ==)
(SIMPLENAME -> ## VARIABLE_ID, ()
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, ==)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), ==)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, !=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, -)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, [)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, +)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION > SHIFTEXPRESSION, &&)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, >)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, %)
(POSTFIXEXPRESSION -> ## PRIMARY, >)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, ?)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >>)
(LEFTHANDSIDE -> ## ARRAYACCESS, ^=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, <=)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), &)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, !=)
(NAME -> ## SIMPLENAME, |)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, ?)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, &)
(LITERAL -> ## INTEGER_LITERAL, /)
(POSTFIXEXPRESSION -> ## NAME, ==)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), ==)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, |)
(LITERAL -> ## NULL, <)
(PRIMARYNONEWARRAY -> ## this, ==)
(NAME -> ## SIMPLENAME, >=)
(PRIMARYNONEWARRAY -> ## this, .)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, >>)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, <=)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, <<)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), >)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, :)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, &&)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, ==)
(FIELDACCESS -> ## super . VARIABLE_ID, |=)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, *)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), +)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, &)
(SIMPLENAME -> ## VARIABLE_ID, !=)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, :)
(CASTEXPRESSION -> ## ( EXPRESSION ) UNARYEXPRESSIONNOTPLUSMINUS, <)
(NAME -> ## QUALIFIEDNAME, <<)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, &)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), ^)
(NAME -> ## QUALIFIEDNAME, >)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, instanceof)
(LEFTHANDSIDE -> ## NAME, |=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, |)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, %)
(ANDEXPRESSION -> ## EQUALITYEXPRESSION, &)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), >)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, *)
(POSTFIXEXPRESSION -> ## NAME, +)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, ==)
(PRIMARYNONEWARRAY -> ## this, ?)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), :)
(CONDITIONALANDEXPRESSION -> ## INCLUSIVEOREXPRESSION, &&)
(POSTFIXEXPRESSION -> ## PRIMARY, ?)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >=)
(LITERAL -> ## FALSE, >>)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, <)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, ==)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), &&)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, [)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, [)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >>=)
(POSTFIXEXPRESSION -> ## NAME, !=)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, >>>)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, ^)
(PRIMARYNONEWARRAY -> ## LITERAL, +)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, :)
(PRIMARYNONEWARRAY -> ## this, |)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, ^)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], &=)
(PRIMARYNONEWARRAY -> ## CLASSINSTANCECREATIONEXPRESSION, .)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## POSTFIXEXPRESSION, <=)
(LITERAL -> ## CHARACTER_LITERAL, <)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, :)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, instanceof)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, !=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, ?)
(CONDITIONALANDEXPRESSION -> ## CONDITIONALANDEXPRESSION && INCLUSIVEOREXPRESSION, &&)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, >=)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], %)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, ?)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, -)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], +)
(NAME -> ## QUALIFIEDNAME, <)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, instanceof)
(LITERAL -> ## CHARACTER_LITERAL, |)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## CASTEXPRESSION, -)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, ||)
(LITERAL -> ## STRING_LITERAL, /)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, ^)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, ==)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, /)
(PRIMARY -> ## ARRAYCREATIONEXPRESSION, %)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], <<)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, >>)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ~ UNARYEXPRESSION, -)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, ^)
(PRIMARYNONEWARRAY -> ## LITERAL, [)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, |)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, -)
(POSTFIXEXPRESSION -> ## NAME, <<)
(POSTFIXEXPRESSION -> ## PRIMARY, +)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, &)
(POSTFIXEXPRESSION -> ## PRIMARY, instanceof)
(LITERAL -> ## FALSE, [)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, >>)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), <<)
(LEFTHANDSIDE -> ## FIELDACCESS, -=)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, &)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], .)
(FIELDACCESS -> ## PRIMARY . VARIABLE_ID, >>>)
(NAME -> ## QUALIFIEDNAME, /=)
(LITERAL -> ## NULL, ==)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, &&)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, /)
(PRIMARYNONEWARRAY -> ## LITERAL, -)
(NAME -> ## SIMPLENAME, -=)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, +)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, >)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, &&)
(PRIMARY -> ## PRIMARYNONEWARRAY, /)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >> ADDITIVEEXPRESSION, <<)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, !=)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, >=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, ?)
(POSTFIXEXPRESSION -> ## NAME, |)
(LITERAL -> ## STRING_LITERAL, !=)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), <)
(LITERAL -> ## FALSE, +)
(LITERAL -> ## TRUE, .)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION >= SHIFTEXPRESSION, ==)
(LITERAL -> ## CHARACTER_LITERAL, /)
(CASTEXPRESSION -> ## ( NAME DIMS ) UNARYEXPRESSIONNOTPLUSMINUS, /)
(NAME -> ## SIMPLENAME, %)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], ^)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION == RELATIONALEXPRESSION, |)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, >>>)
(SIMPLENAME -> ## VARIABLE_ID, +=)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION <= SHIFTEXPRESSION, <=)
(LITERAL -> ## NULL, *)
(LITERAL -> ## INTEGER_LITERAL, >>)
(LITERAL -> ## FALSE, -)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, :)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], !=)
(SIMPLENAME -> ## VARIABLE_ID, &)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, >=)
(FIELDACCESS -> ## super . VARIABLE_ID, |)
(NAME -> ## QUALIFIEDNAME, .)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION >>> ADDITIVEEXPRESSION, &&)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), <=)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, ()
(SIMPLENAME -> ## VARIABLE_ID, &=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, <)
(LITERAL -> ## STRING_LITERAL, <)
(FIELDACCESS -> ## super . VARIABLE_ID, ^)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, ?)
(SIMPLENAME -> ## VARIABLE_ID, /=)
(ARRAYACCESS -> ## PRIMARYNONEWARRAY [ EXPRESSION ], instanceof)
(CASTEXPRESSION -> ## ( PRIMITIVETYPE DIMSOPT ) UNARYEXPRESSION, <)
(NAME -> ## SIMPLENAME, ^)
(LEFTHANDSIDE -> ## NAME, -=)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), >>)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), %)
(SHIFTEXPRESSION -> ## ADDITIVEEXPRESSION, >>>)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION % UNARYEXPRESSION, /)
(LITERAL -> ## CHARACTER_LITERAL, -)
(PRIMARYNONEWARRAY -> ## this, +)
(LEFTHANDSIDE -> ## FIELDACCESS, ^=)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, &)
(FIELDACCESS -> ## super . VARIABLE_ID, +)
(UNARYEXPRESSION -> ## - UNARYEXPRESSION, *)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, !=)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), ?)
(METHODINVOCATION -> ## super . VARIABLE_ID ( ARGUMENTLISTOPT ), *)
(LITERAL -> ## TRUE, +)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), !=)
(NAME -> ## QUALIFIEDNAME, &&)
(PRIMARY -> ## PRIMARYNONEWARRAY, ^)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), ||)
(POSTFIXEXPRESSION -> ## NAME, -)
(CONSTANTEXPRESSION -> ## EXPRESSION, :)
(NAME -> ## SIMPLENAME, ^=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, &)
(MULTIPLICATIVEEXPRESSION -> ## UNARYEXPRESSION, <<)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, -)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, ^)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), :)
(LITERAL -> ## INTEGER_LITERAL, |)
(METHODINVOCATION -> ## PRIMARY . VARIABLE_ID ( ARGUMENTLISTOPT ), +)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, !=)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, &&)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION < SHIFTEXPRESSION, ||)
(NAME -> ## QUALIFIEDNAME, instanceof)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, INTEGER_LITERAL)
(PRIMARYNONEWARRAY -> ## ARRAYACCESS, <<)
(LITERAL -> ## FALSE, %)
(NAME -> ## SIMPLENAME, [)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, >=)
(UNARYEXPRESSIONNOTPLUSMINUS -> ## ! UNARYEXPRESSION, <)
(LITERAL -> ## NULL, >>)
(QUALIFIEDNAME -> ## NAME . VARIABLE_ID, :)
(SHIFTEXPRESSION -> ## SHIFTEXPRESSION << ADDITIVEEXPRESSION, ^)
(SIMPLENAME -> ## VARIABLE_ID, >>)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION - MULTIPLICATIVEEXPRESSION, ?)
(CLASSINSTANCECREATIONEXPRESSION -> ## new CLASSTYPE ( ARGUMENTLISTOPT ), &&)
(FIELDACCESS -> ## super . VARIABLE_ID, -)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, >)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION / UNARYEXPRESSION, ==)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], &&)
(FIELDACCESS -> ## super . VARIABLE_ID, instanceof)
(ARRAYCREATIONEXPRESSION -> ## new PRIMITIVETYPE DIMEXPRS DIMSOPT, >=)
(LITERAL -> ## NULL, %)
(SWITCHLABEL -> case ## CONSTANTEXPRESSION :, break)
(NAME -> ## QUALIFIEDNAME, =)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, instanceof)
(ADDITIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION, <<)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, %)
(PRIMARYNONEWARRAY -> ## FIELDACCESS, >)
(METHODINVOCATION -> ## NAME ( ARGUMENTLISTOPT ), ==)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], |=)
(UNARYEXPRESSION -> ## UNARYEXPRESSIONNOTPLUSMINUS, &)
(PRIMARY -> ## PRIMARYNONEWARRAY, >)
(PRIMARYNONEWARRAY -> ## ( EXPRESSION ), +)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, <<)
(ADDITIVEEXPRESSION -> ## ADDITIVEEXPRESSION + MULTIPLICATIVEEXPRESSION, -)
(LITERAL -> ## FALSE, ?)
(RELATIONALEXPRESSION -> ## RELATIONALEXPRESSION instanceof REFERENCETYPE, &)
(RELATIONALEXPRESSION -> ## SHIFTEXPRESSION, &&)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, &)
(PRIMARYNONEWARRAY -> ## METHODINVOCATION, <<)
(EQUALITYEXPRESSION -> ## EQUALITYEXPRESSION != RELATIONALEXPRESSION, :)
(MULTIPLICATIVEEXPRESSION -> ## MULTIPLICATIVEEXPRESSION * UNARYEXPRESSION, >)
(UNARYEXPRESSION -> ## + UNARYEXPRESSION, instanceof)
(ARRAYACCESS -> ## NAME [ EXPRESSION ], >)

reduce SWITCHBLOCKSTATEMENTGROUPSOPT SWITCHBLOCKSTATEMENTGROUPS
