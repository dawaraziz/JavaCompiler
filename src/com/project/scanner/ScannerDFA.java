package com.project.scanner;

@SuppressWarnings("SpellCheckingInspection")
class ScannerDFA {

    static private final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static private final String lower = "abcdefghijklmnopqrstuvwxyz";
    static private final String zero = "0";
    static private final String decNumbers = "0123456789";
    static private final String nonZeroDecNumbers = "123456789";
    static private final String variable_symbols = "$_";
    static private final String variable_chars = upper + lower + variable_symbols + decNumbers;
    static private final String whitespace = " \t\12";
    static private final String newLine = "\10\15";

    static final ScannerState START_STATE = new ScannerState("Start", false, null);
    static final ScannerState ERRSTATE = new ScannerState("ERR", false, null);

    // States for each possible keyword.
    static private final ScannerState A = new ScannerState("a", true, Kind.VARIABLE_ID);
    static private final ScannerState AB = new ScannerState("ab", true, Kind.VARIABLE_ID);
    static private final ScannerState ABS = new ScannerState("abs", true, Kind.VARIABLE_ID);
    static private final ScannerState ABST = new ScannerState("abst", true, Kind.VARIABLE_ID);
    static private final ScannerState ABSTR = new ScannerState("abstr", true, Kind.VARIABLE_ID);
    static private final ScannerState ABSTRA = new ScannerState("abstra", true, Kind.VARIABLE_ID);
    static private final ScannerState ABSTRAC = new ScannerState("abstrac", true, Kind.VARIABLE_ID);
    static private final ScannerState ABSTRACT = new ScannerState("abstract", true, Kind.ABSTRACT);
    static private final ScannerState B = new ScannerState("b", true, Kind.VARIABLE_ID);
    static private final ScannerState BO = new ScannerState("bo", true, Kind.VARIABLE_ID);
    static private final ScannerState BOO = new ScannerState("boo", true, Kind.VARIABLE_ID);
    static private final ScannerState BOOL = new ScannerState("bool", true, Kind.VARIABLE_ID);
    static private final ScannerState BOOLE = new ScannerState("boole", true, Kind.VARIABLE_ID);
    static private final ScannerState BOOLEA = new ScannerState("boolea", true, Kind.VARIABLE_ID);
    static private final ScannerState BOOLEAN = new ScannerState("boolean", true, Kind.BOOLEAN);
    static private final ScannerState BY = new ScannerState("by", true, Kind.VARIABLE_ID);
    static private final ScannerState BYT = new ScannerState("byt", true, Kind.VARIABLE_ID);
    static private final ScannerState BYTE = new ScannerState("byte", true, Kind.BYTE);
    static private final ScannerState C = new ScannerState("c", true, Kind.VARIABLE_ID);
    static private final ScannerState CH = new ScannerState("ch", true, Kind.VARIABLE_ID);
    static private final ScannerState CHA = new ScannerState("cha", true, Kind.VARIABLE_ID);
    static private final ScannerState CHAR = new ScannerState("char", true, Kind.CHAR);
    static private final ScannerState CL = new ScannerState("cl", true, Kind.VARIABLE_ID);
    static private final ScannerState CLA = new ScannerState("cla", true, Kind.VARIABLE_ID);
    static private final ScannerState CLAS = new ScannerState("clas", true, Kind.VARIABLE_ID);
    static private final ScannerState CLASS = new ScannerState("class", true, Kind.CLASS);
    static private final ScannerState CO = new ScannerState("co", true, Kind.VARIABLE_ID);
    static private final ScannerState CON = new ScannerState("con", true, Kind.VARIABLE_ID);
    static private final ScannerState CONS = new ScannerState("cons", true, Kind.VARIABLE_ID);
    static private final ScannerState CONST = new ScannerState("const", true, Kind.CONST);
    static private final ScannerState D = new ScannerState("d", true, Kind.VARIABLE_ID);
    static private final ScannerState DO = new ScannerState("do", true, Kind.VARIABLE_ID);
    static private final ScannerState DOU = new ScannerState("dou", true, Kind.VARIABLE_ID);
    static private final ScannerState DOUB = new ScannerState("doub", true, Kind.VARIABLE_ID);
    static private final ScannerState DOUBL = new ScannerState("doubl", true, Kind.VARIABLE_ID);
    static private final ScannerState DOUBLE = new ScannerState("double", true, Kind.DOUBLE);
    static private final ScannerState E = new ScannerState("e", true, Kind.VARIABLE_ID);
    static private final ScannerState EL = new ScannerState("el", true, Kind.VARIABLE_ID);
    static private final ScannerState ELS = new ScannerState("els", true, Kind.VARIABLE_ID);
    static private final ScannerState ELSE = new ScannerState("else", true, Kind.ELSE);
    static private final ScannerState EX = new ScannerState("ex", true, Kind.VARIABLE_ID);
    static private final ScannerState EXT = new ScannerState("ext", true, Kind.VARIABLE_ID);
    static private final ScannerState EXTE = new ScannerState("exte", true, Kind.VARIABLE_ID);
    static private final ScannerState EXTEN = new ScannerState("exten", true, Kind.VARIABLE_ID);
    static private final ScannerState EXTEND = new ScannerState("extend", true, Kind.VARIABLE_ID);
    static private final ScannerState EXTENDS = new ScannerState("extends", true, Kind.EXTENDS);
    static private final ScannerState F = new ScannerState("f", true, Kind.VARIABLE_ID);;
    static private final ScannerState FL = new ScannerState("fl", true, Kind.VARIABLE_ID);
    static private final ScannerState FLO = new ScannerState("flo", true, Kind.VARIABLE_ID);
    static private final ScannerState FLOA = new ScannerState("floa", true, Kind.VARIABLE_ID);
    static private final ScannerState FLOAT = new ScannerState("float", true, Kind.FLOAT);
    static private final ScannerState FI = new ScannerState("fi", true, Kind.VARIABLE_ID);
    static private final ScannerState FIN = new ScannerState("fin", true, Kind.VARIABLE_ID);
    static private final ScannerState FINA = new ScannerState("fina", true, Kind.VARIABLE_ID);
    static private final ScannerState FINAL = new ScannerState("final", true, Kind.FINAL);
    static private final ScannerState FO = new ScannerState("fo", true, Kind.VARIABLE_ID);
    static private final ScannerState FOR = new ScannerState("for", true, Kind.FOR);
    static private final ScannerState G = new ScannerState("g", true, Kind.VARIABLE_ID);
    static private final ScannerState GO = new ScannerState("go", true, Kind.VARIABLE_ID);
    static private final ScannerState GOT = new ScannerState("got", true, Kind.VARIABLE_ID);
    static private final ScannerState GOTO = new ScannerState("goto", true, Kind.GOTO);
    static private final ScannerState I = new ScannerState("i", true, Kind.VARIABLE_ID);
    static private final ScannerState IF = new ScannerState("if", true, Kind.IF);
    static private final ScannerState IM = new ScannerState("im", true, Kind.VARIABLE_ID);
    static private final ScannerState IMP = new ScannerState("imp", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPL = new ScannerState("impl", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLE = new ScannerState("imple", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLEM = new ScannerState("implem", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLEME = new ScannerState("impleme", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLEMEN = new ScannerState("implemen", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLEMENT = new ScannerState("implement", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPLEMENTS = new ScannerState("implements", true, Kind.IMPLEMENTS);
    static private final ScannerState IMPO = new ScannerState("impo", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPOR = new ScannerState("impor", true, Kind.VARIABLE_ID);
    static private final ScannerState IMPORT = new ScannerState("import", true, Kind.IMPORT);
    static private final ScannerState IN = new ScannerState("in", true, Kind.VARIABLE_ID);
    static private final ScannerState INS = new ScannerState("ins", true, Kind.VARIABLE_ID);
    static private final ScannerState INST = new ScannerState("inst", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTA = new ScannerState("insta", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTAN = new ScannerState("instan", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTANC = new ScannerState("instanc", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTANCE = new ScannerState("instance", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTANCEO = new ScannerState("instanceo", true, Kind.VARIABLE_ID);
    static private final ScannerState INSTANCEOF = new ScannerState("instanceof", true, Kind.INSTANCEOF);
    static private final ScannerState INT = new ScannerState("int", true, Kind.INT);
    static private final ScannerState INTE = new ScannerState("inte", true, Kind.VARIABLE_ID);
    static private final ScannerState INTER = new ScannerState("inter", true, Kind.VARIABLE_ID);
    static private final ScannerState INTERF = new ScannerState("interf", true, Kind.VARIABLE_ID);
    static private final ScannerState INTERFA = new ScannerState("interfa", true, Kind.VARIABLE_ID);
    static private final ScannerState INTERFAC = new ScannerState("interfac", true, Kind.VARIABLE_ID);
    static private final ScannerState INTERFACE = new ScannerState("interface", true, Kind.INTERFACE);
    static private final ScannerState L = new ScannerState("l", true, Kind.VARIABLE_ID);
    static private final ScannerState LO = new ScannerState("lo", true, Kind.VARIABLE_ID);
    static private final ScannerState LON = new ScannerState("lon", true, Kind.VARIABLE_ID);
    static private final ScannerState LONG = new ScannerState("long", true, Kind.LONG);
    static private final ScannerState N = new ScannerState("n", true, Kind.VARIABLE_ID);
    static private final ScannerState NA = new ScannerState("na", true, Kind.VARIABLE_ID);
    static private final ScannerState NAT = new ScannerState("nat", true, Kind.VARIABLE_ID);
    static private final ScannerState NATI = new ScannerState("nati", true, Kind.VARIABLE_ID);
    static private final ScannerState NATIV = new ScannerState("nativ", true, Kind.VARIABLE_ID);
    static private final ScannerState NATIVE = new ScannerState("native", true, Kind.NATIVE);
    static private final ScannerState NE = new ScannerState("ne", true, Kind.VARIABLE_ID);
    static private final ScannerState NEW = new ScannerState("new", true, Kind.NEW);
    static private final ScannerState P = new ScannerState("p", true, Kind.VARIABLE_ID);
    static private final ScannerState PR = new ScannerState("pr", true, Kind.VARIABLE_ID);
    static private final ScannerState PRI = new ScannerState("pri", true, Kind.VARIABLE_ID);
    static private final ScannerState PRIV = new ScannerState("priv", true, Kind.VARIABLE_ID);
    static private final ScannerState PRIVA = new ScannerState("priva", true, Kind.VARIABLE_ID);
    static private final ScannerState PRIVAT = new ScannerState("privat", true, Kind.VARIABLE_ID);
    static private final ScannerState PRIVATE = new ScannerState("private", true, Kind.PRIVATE);
    static private final ScannerState PA = new ScannerState("pa", true, Kind.VARIABLE_ID);
    static private final ScannerState PAC = new ScannerState("pac", true, Kind.VARIABLE_ID);
    static private final ScannerState PACK = new ScannerState("pack", true, Kind.VARIABLE_ID);
    static private final ScannerState PACKA = new ScannerState("packa", true, Kind.VARIABLE_ID);
    static private final ScannerState PACKAG = new ScannerState("packag", true, Kind.VARIABLE_ID);
    static private final ScannerState PACKAGE = new ScannerState("package", true, Kind.PACKAGE);
    static private final ScannerState PRO = new ScannerState("pro", true, Kind.VARIABLE_ID);
    static private final ScannerState PROT = new ScannerState("prot", true, Kind.VARIABLE_ID);
    static private final ScannerState PROTE = new ScannerState("prote", true, Kind.VARIABLE_ID);
    static private final ScannerState PROTEC = new ScannerState("protec", true, Kind.VARIABLE_ID);
    static private final ScannerState PROTECT = new ScannerState("protect", true, Kind.VARIABLE_ID);
    static private final ScannerState PROTECTE = new ScannerState("protecte", true, Kind.VARIABLE_ID);
    static private final ScannerState PROTECTED = new ScannerState("protected", true, Kind.PROTECTED);
    static private final ScannerState PU = new ScannerState("pu", true, Kind.VARIABLE_ID);
    static private final ScannerState PUB = new ScannerState("pub", true, Kind.VARIABLE_ID);
    static private final ScannerState PUBL = new ScannerState("publ", true, Kind.VARIABLE_ID);
    static private final ScannerState PUBLI = new ScannerState("publi", true, Kind.VARIABLE_ID);
    static private final ScannerState PUBLIC = new ScannerState("public", true, Kind.PUBLIC);
    static private final ScannerState R = new ScannerState("r", true, Kind.VARIABLE_ID);
    static private final ScannerState RE = new ScannerState("re", true, Kind.VARIABLE_ID);
    static private final ScannerState RET = new ScannerState("ret", true, Kind.VARIABLE_ID);
    static private final ScannerState RETU = new ScannerState("retu", true, Kind.VARIABLE_ID);
    static private final ScannerState RETUR = new ScannerState("retur", true, Kind.VARIABLE_ID);
    static private final ScannerState RETURN = new ScannerState("return", true, Kind.RETURN);
    static private final ScannerState S = new ScannerState("s", true, Kind.VARIABLE_ID);
    static private final ScannerState SH = new ScannerState("sh", true, Kind.VARIABLE_ID);
    static private final ScannerState SHO = new ScannerState("sho", true, Kind.VARIABLE_ID);
    static private final ScannerState SHOR = new ScannerState("shor", true, Kind.VARIABLE_ID);
    static private final ScannerState SHORT = new ScannerState("short", true, Kind.SHORT);
    static private final ScannerState ST = new ScannerState("st", true, Kind.VARIABLE_ID);
    static private final ScannerState STA = new ScannerState("sta", true, Kind.VARIABLE_ID);
    static private final ScannerState STAT = new ScannerState("stat", true, Kind.VARIABLE_ID);
    static private final ScannerState STATI = new ScannerState("stati", true, Kind.VARIABLE_ID);
    static private final ScannerState STATIC = new ScannerState("static", true, Kind.STATIC);
    static private final ScannerState SU = new ScannerState("su", true, Kind.VARIABLE_ID);
    static private final ScannerState SUP = new ScannerState("sup", true, Kind.VARIABLE_ID);
    static private final ScannerState SUPE = new ScannerState("supe", true, Kind.VARIABLE_ID);
    static private final ScannerState SUPER = new ScannerState("super", true, Kind.SUPER);
    static private final ScannerState T = new ScannerState("t", true, Kind.VARIABLE_ID);
    static private final ScannerState TH = new ScannerState("th", true, Kind.VARIABLE_ID);
    static private final ScannerState THI = new ScannerState("thi", true, Kind.VARIABLE_ID);
    static private final ScannerState THIS = new ScannerState("this", true, Kind.THIS);
    static private final ScannerState TR = new ScannerState("tr", true, Kind.VARIABLE_ID);
    static private final ScannerState V = new ScannerState("v", true, Kind.VARIABLE_ID);
    static private final ScannerState VO = new ScannerState("vo", true, Kind.VARIABLE_ID);
    static private final ScannerState VOI = new ScannerState("voi", true, Kind.VARIABLE_ID);
    static private final ScannerState VOID = new ScannerState("void", true, Kind.VOID);
    static private final ScannerState W = new ScannerState("w", true, Kind.VARIABLE_ID);
    static private final ScannerState WH = new ScannerState("wh", true, Kind.VARIABLE_ID);
    static private final ScannerState WHI = new ScannerState("whi", true, Kind.VARIABLE_ID);
    static private final ScannerState WHIL = new ScannerState("whil", true, Kind.VARIABLE_ID);
    static private final ScannerState WHILE = new ScannerState("while", true, Kind.WHILE);

    // DFA states for each possible literal keyword.
    static private final ScannerState FA = new ScannerState("FA", true, Kind.VARIABLE_ID);
    static private final ScannerState FAL = new ScannerState("FAL", true, Kind.VARIABLE_ID);
    static private final ScannerState FALS = new ScannerState("FALS", true, Kind.VARIABLE_ID);
    static private final ScannerState FALSE = new ScannerState("FALSE", true, Kind.FALSE);
    static private final ScannerState TRU = new ScannerState("TRU", true, Kind.VARIABLE_ID);
    static private final ScannerState TRUE = new ScannerState("TRUE", true, Kind.TRUE);
    static private final ScannerState NU = new ScannerState("NU", true, Kind.VARIABLE_ID);
    static private final ScannerState NUL = new ScannerState("NUL", true, Kind.VARIABLE_ID);
    static private final ScannerState NULL = new ScannerState("NULL", true, Kind.NULL);

    // State for variables.
    static private final ScannerState VARSTATE = new ScannerState("varstate", true, Kind.VARIABLE_ID);

    // States for integer literals.
    static private final ScannerState ZERO = new ScannerState("zero", true, Kind.INTEGER_LITERAL);
    static private final ScannerState DECNUMINT = new ScannerState("decnumint", true, Kind.INTEGER_LITERAL);

    // State for whitespace.
    static private final ScannerState WHITESPACE = new ScannerState("whitespace", true, null);

    // State for all types of parantheses.
    static private final ScannerState PAREN_OPEN = new ScannerState("(", true, Kind.PAREN_OPEN);
    static private final ScannerState PAREN_CLOSE = new ScannerState(")", true, Kind.PAREN_CLOSE);
    static private final ScannerState SQUARE_BRACKET_OPEN = new ScannerState("[", true, Kind.SQUARE_BRACKET_OPEN);
    static private final ScannerState SQUARE_BRACKET_CLOSE = new ScannerState("]", true, Kind.SQUARE_BRACKET_CLOSE);
    static private final ScannerState CURLY_BRACKET_OPEN = new ScannerState("{", true, Kind.CURLY_BRACKET_OPEN);
    static private final ScannerState CURLY_BRACKET_CLOSE = new ScannerState("}", true, Kind.CURLY_BRACKET_CLOSE);

    // States for all special symbols.
    static private final ScannerState PLUS = new ScannerState("+", true, Kind.PLUS);
    static private final ScannerState MINUS = new ScannerState("-", true, Kind.MINUS);
    static private final ScannerState STAR = new ScannerState("*", true, Kind.STAR);
    static private final ScannerState SLASH = new ScannerState("/", true, Kind.SLASH);
    static private final ScannerState MODULUS = new ScannerState("%", true, Kind.MODULUS);
    static private final ScannerState INCREMENT = new ScannerState("++", true, Kind.INCREMENT);
    static private final ScannerState DECREMENT = new ScannerState("--", true, Kind.DECREMENT);
    static private final ScannerState EQUAL = new ScannerState("=", true, Kind.EQUAL);
    static private final ScannerState EQUALEQUAL = new ScannerState("==", true, Kind.EQUALEQUAL);
    static private final ScannerState NOTEQUAL = new ScannerState("!=", true, Kind.NOTEQUAL);
    static private final ScannerState GREATER = new ScannerState(">", true, Kind.GREATER);
    static private final ScannerState LESS = new ScannerState("<", true, Kind.LESS);
    static private final ScannerState GREATEREQUAL = new ScannerState(">=", true, Kind.GREATEREQUAL);
    static private final ScannerState LESSEQUAL = new ScannerState("<=", true, Kind.LESSEQUAL);
    static private final ScannerState AMPERSAND = new ScannerState("&", true, Kind.AMPERSAND);
    static private final ScannerState BAR = new ScannerState("|", true, Kind.BAR);
    static private final ScannerState AND = new ScannerState("&&", true, Kind.AND);
    static private final ScannerState OR = new ScannerState("||", true, Kind.OR);
    static private final ScannerState UPARROW = new ScannerState("^", true, Kind.UPARROW);
    static private final ScannerState TILDE = new ScannerState("~", true, Kind.TILDE);
    static private final ScannerState LEFTSHIFT = new ScannerState("<<", true, Kind.LEFTSHIFT);
    static private final ScannerState RIGHTSHIFT = new ScannerState(">>", true, Kind.RIGHTSHIFT);
    static private final ScannerState ZEROFILLRIGHTSHIFT = new ScannerState(">>>", true, Kind.ZEROFILLRIGHTSHIFT);
    static private final ScannerState EXCLAMATION = new ScannerState("!", true, Kind.EXCLAMATION);
    static private final ScannerState PLUSEQUAL = new ScannerState("+=", true, Kind.PLUSEQUAL);
    static private final ScannerState MINUSEQUAL = new ScannerState("-=", true, Kind.MINUSEQUAL);
    static private final ScannerState STAREQUAL = new ScannerState("*=", true, Kind.STAREQUAL);
    static private final ScannerState SLASHEQUAL = new ScannerState("/=", true, Kind.SLASHEQUAL);
    static private final ScannerState MODEQUAL = new ScannerState("%=", true, Kind.MODEQUAL);
    static private final ScannerState LEFTSHIFTEQUAL = new ScannerState("<<=", true, Kind.LEFTSHIFTEQUAL);
    static private final ScannerState RIGHTSHIFTEQUAL = new ScannerState(">>=", true, Kind.RIGHTSHIFTEQUAL);
    static private final ScannerState AMPERSANDEQUAL = new ScannerState("&=", true, Kind.AMPERSANDEQUAL);
    static private final ScannerState ARROWEQUAL = new ScannerState("^=", true, Kind.ARROWEQUAL);
    static private final ScannerState BAREQUAL = new ScannerState("|=", true, Kind.BAREQUAL);
    static private final ScannerState DOT = new ScannerState(".", true, Kind.DOT);
    static private final ScannerState COMMA = new ScannerState(",", true, Kind.COMMA);
    static private final ScannerState SEMICOLON = new ScannerState(";", true, Kind.SEMICOLON);

    // State for comments, plus independently declared states.
    static private final ScannerState LINE_COMMENT = new ScannerState("LINE_COMMENT", true, null);
    static final ScannerState BLOCK_COMMENT = new ScannerState("BLOCK_COMMENT", true, null);
    static final ScannerState BLOCK_STAR = new ScannerState("BLOCK_STAR", true, null);
    static private final ScannerState BLOCK_END = new ScannerState("BLOCK_END", true, null);

    // States for character literals.
    static private final ScannerState CHARLIT = new ScannerState("CHARLIT", false, null);
    static private final ScannerState CHAREND = new ScannerState("CHAREND", true, Kind.CHARACTER_LITERAL);
    static private final ScannerState CHARESCP = new ScannerState("CHARESCP", false, null);

    // States for string literals.
    static private final ScannerState STRLIT = new ScannerState("STRLIT", false, null);
    static private final ScannerState STREND = new ScannerState("STREND", true, Kind.STRING_LITERAL);
    static private final ScannerState STRESCP = new ScannerState("STRESCP", false, null);

    static {
        // All transitions from the start state.
        START_STATE.addTransition(zero, ZERO);
        START_STATE.addTransition(nonZeroDecNumbers, DECNUMINT);
        START_STATE.addTransition("a", A);
        START_STATE.addTransition("b", B);
        START_STATE.addTransition("c", C);
        START_STATE.addTransition("d", D);
        START_STATE.addTransition("e", E);
        START_STATE.addTransition("f", F);
        START_STATE.addTransition("g", G);
        START_STATE.addTransition("i", I);
        START_STATE.addTransition("l", L);
        START_STATE.addTransition("n", N);
        START_STATE.addTransition("p", P);
        START_STATE.addTransition("r", R);
        START_STATE.addTransition("s", S);
        START_STATE.addTransition("t", T);
        START_STATE.addTransition("v", V);
        START_STATE.addTransition("w", W);
        START_STATE.addTransition(upper + lower, VARSTATE);
        START_STATE.addTransition(whitespace, WHITESPACE);
        START_STATE.addTransition("(", PAREN_OPEN);
        START_STATE.addTransition(")", PAREN_CLOSE);
        START_STATE.addTransition("[", SQUARE_BRACKET_OPEN);
        START_STATE.addTransition("]", SQUARE_BRACKET_CLOSE);
        START_STATE.addTransition("{", CURLY_BRACKET_OPEN);
        START_STATE.addTransition("}", CURLY_BRACKET_CLOSE);
        START_STATE.addTransition(";", SEMICOLON);
        START_STATE.addTransition("!", EXCLAMATION);
        START_STATE.addTransition("%", MODULUS);
        START_STATE.addTransition("&", AMPERSAND);
        START_STATE.addTransition("*", STAR);
        START_STATE.addTransition("+", PLUS);
        START_STATE.addTransition("-", MINUS);
        START_STATE.addTransition("/", SLASH);
        START_STATE.addTransition("<", LESS);
        START_STATE.addTransition("=", EQUAL);
        START_STATE.addTransition(">", GREATER);
        START_STATE.addTransition("^", UPARROW);
        START_STATE.addTransition("|", BAR);
        START_STATE.addTransition("~", TILDE);
        START_STATE.addTransition(".", DOT);
        START_STATE.addTransition(",", COMMA);
        START_STATE.addTransition("\"", STRLIT);
        START_STATE.addTransition("'", CHARLIT);

        // Transitions for line comments.
        SLASH.addTransition("/", LINE_COMMENT);
        LINE_COMMENT.addTransition(newLine, ERRSTATE);
        LINE_COMMENT.addTransition(null, LINE_COMMENT);

        // Transitions for block comments.
        SLASH.addTransition("*", BLOCK_COMMENT);
        BLOCK_COMMENT.addTransition("*", BLOCK_STAR);
        BLOCK_COMMENT.addTransition(null, BLOCK_COMMENT);
        BLOCK_STAR.addTransition("/", BLOCK_END);
        BLOCK_STAR.addTransition("*", BLOCK_STAR);
        BLOCK_STAR.addTransition(null, BLOCK_COMMENT);

        // All symbol transitions.
        AMPERSAND.addTransition("&&", AND);
        AMPERSAND.addTransition("=", AMPERSANDEQUAL);
        BAR.addTransition("=", BAREQUAL);
        BAR.addTransition("|", OR);
        EQUAL.addTransition("=", EQUALEQUAL);
        EXCLAMATION.addTransition("=", NOTEQUAL);
        GREATER.addTransition("=", GREATEREQUAL);
        GREATER.addTransition(">", RIGHTSHIFT);
        LEFTSHIFT.addTransition("=", LEFTSHIFTEQUAL);
        LESS.addTransition("<", LEFTSHIFT);
        LESS.addTransition("=", LESSEQUAL);
        MINUS.addTransition("-", DECREMENT);
        MINUS.addTransition("=", MINUSEQUAL);
        MODULUS.addTransition("=", MODEQUAL);
        PLUS.addTransition("+", INCREMENT);
        PLUS.addTransition("=", PLUSEQUAL);
        RIGHTSHIFT.addTransition("=", RIGHTSHIFTEQUAL);
        RIGHTSHIFT.addTransition(">", ZEROFILLRIGHTSHIFT);
        SLASH.addTransition("=", SLASHEQUAL);
        STAR.addTransition("=", STAREQUAL);
        UPARROW.addTransition("=", ARROWEQUAL);

        // All integer literal transitions.
        DECNUMINT.addTransition(decNumbers, DECNUMINT);

        // All character literal transitions.
        CHARLIT.addTransition("'", CHAREND);
        CHARLIT.addTransition("\\", CHARESCP);
        CHARLIT.addTransition(null, CHARLIT);
        CHARESCP.addTransition(null, CHARLIT);

        // All string literal transitions.
        STRLIT.addTransition("\"", STREND);
        STRLIT.addTransition("\\", STRESCP);
        STRLIT.addTransition(null, STRLIT);
        STRESCP.addTransition(null, STRLIT);

        // All keyword literal transitions.
        F.addTransition("a", FA);
        FA.addTransition("l", FAL);
        FAL.addTransition("s", FALS);
        FALS.addTransition("e", FALSE);
        FALSE.addTransition(variable_chars, VARSTATE);
        TR.addTransition("u", TRU);
        TRU.addTransition("e", TRUE);
        TRUE.addTransition(variable_chars, VARSTATE);
        N.addTransition("u", NU);
        NU.addTransition("l", NUL);
        NUL.addTransition("l", NULL);
        NULL.addTransition(variable_chars, VARSTATE);

        // Whitespace.
        WHITESPACE.addTransition(whitespace, WHITESPACE);

        // All keyword transitions.
        A.addTransition("b", AB);
        AB.addTransition("s", ABS);
        ABS.addTransition("t", ABST);
        ABST.addTransition("r", ABSTR);
        ABSTR.addTransition("a", ABSTRA);
        ABSTRA.addTransition("c", ABSTRAC);
        ABSTRAC.addTransition("t", ABSTRACT);
        ABSTRACT.addTransition(variable_chars, VARSTATE);
        B.addTransition("o", BO);
        BO.addTransition("o", BOO);
        BOO.addTransition("l", BOOL);
        BOOL.addTransition("e", BOOLE);
        BOOLE.addTransition("a", BOOLEA);
        BOOLEA.addTransition("n", BOOLEAN);
        BOOLEAN.addTransition(variable_chars, VARSTATE);
        B.addTransition("y", BY);
        BY.addTransition("t", BYT);
        BYT.addTransition("e", BYTE);
        BYTE.addTransition(variable_chars, VARSTATE);
        C.addTransition("h", CH);
        CH.addTransition("a", CHA);
        CHA.addTransition("r", CHAR);
        CHAR.addTransition(variable_chars, VARSTATE);
        C.addTransition("l", CL);
        CL.addTransition("a", CLA);
        CLA.addTransition("s", CLAS);
        CLAS.addTransition("s", CLASS);
        CLASS.addTransition(variable_chars, VARSTATE);
        C.addTransition("o", CO);
        CO.addTransition("n", CON);
        CON.addTransition("s", CONS);
        CONS.addTransition("t", CONST);
        CONST.addTransition(variable_chars, VARSTATE);
        D.addTransition("o", DO);
        DO.addTransition("u", DOU);
        DOU.addTransition("b", DOUB);
        DOUB.addTransition("l", DOUBL);
        DOUBL.addTransition("e", DOUBLE);
        DOUBLE.addTransition(variable_chars, VARSTATE);
        E.addTransition("l", EL);
        EL.addTransition("s", ELS);
        ELS.addTransition("e", ELSE);
        ELSE.addTransition(variable_chars, VARSTATE);
        E.addTransition("x", EX);
        EX.addTransition("t", EXT);
        EXT.addTransition("e", EXTE);
        EXTE.addTransition("n", EXTEN);
        EXTEN.addTransition("d", EXTEND);
        EXTEND.addTransition("s", EXTENDS);
        EXTENDS.addTransition(variable_chars, VARSTATE);
        F.addTransition("i", FI);
        FI.addTransition("n", FIN);
        FIN.addTransition("a", FINA);
        FINA.addTransition("l", FINAL);
        FINAL.addTransition(variable_chars, VARSTATE);
        F.addTransition("l", FL);
        FL.addTransition("o", FLO);
        FLO.addTransition("a", FLOA);
        FLOA.addTransition("t", FLOAT);
        FLOAT.addTransition(variable_chars, VARSTATE);
        F.addTransition("o", FO);
        FO.addTransition("r", FOR);
        FOR.addTransition(variable_chars, VARSTATE);
        G.addTransition("o", GO);
        GO.addTransition("t", GOT);
        GOT.addTransition("o", GOTO);
        GOTO.addTransition(variable_chars, VARSTATE);
        I.addTransition("f", IF);
        IF.addTransition(variable_chars, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("l", IMPL);
        IMPL.addTransition("e", IMPLE);
        IMPLE.addTransition("m", IMPLEM);
        IMPLEM.addTransition("e", IMPLEME);
        IMPLEME.addTransition("n", IMPLEMEN);
        IMPLEMEN.addTransition("t", IMPLEMENT);
        IMPLEMENT.addTransition("s", IMPLEMENTS);
        IMPLEMENTS.addTransition(variable_chars, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("o", IMPO);
        IMPO.addTransition("r", IMPOR);
        IMPOR.addTransition("t", IMPORT);
        IMPORT.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("s", INS);
        INS.addTransition("t", INST);
        INST.addTransition("a", INSTA);
        INSTA.addTransition("n", INSTAN);
        INSTAN.addTransition("c", INSTANC);
        INSTANC.addTransition("e", INSTANCE);
        INSTANCE.addTransition("o", INSTANCEO);
        INSTANCEO.addTransition("f", INSTANCEOF);
        INSTANCEOF.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INT.addTransition("e", INTE);
        INT.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INTE.addTransition("r", INTER);
        INTER.addTransition("f", INTERF);
        INTERF.addTransition("a", INTERFA);
        INTERFA.addTransition("c", INTERFAC);
        INTERFAC.addTransition("e", INTERFACE);
        INTERFACE.addTransition(variable_chars, VARSTATE);
        L.addTransition("o", LO);
        LO.addTransition("n", LON);
        LON.addTransition("g", LONG);
        LONG.addTransition(variable_chars, VARSTATE);
        N.addTransition("a", NA);
        NA.addTransition("t", NAT);
        NAT.addTransition("i", NATI);
        NATI.addTransition("v", NATIV);
        NATIV.addTransition("e", NATIVE);
        NATIVE.addTransition(variable_chars, VARSTATE);
        N.addTransition("e", NE);
        NE.addTransition("w", NEW);
        NEW.addTransition(variable_chars, VARSTATE);
        P.addTransition("a", PA);
        PA.addTransition("c", PAC);
        PAC.addTransition("k", PACK);
        PACK.addTransition("a", PACKA);
        PACKA.addTransition("g", PACKAG);
        PACKAG.addTransition("e", PACKAGE);
        PACKAGE.addTransition(variable_chars, VARSTATE);
        P.addTransition("r", PR);
        PR.addTransition("o", PRO);
        PRO.addTransition("t", PROT);
        PROT.addTransition("e", PROTE);
        PROTE.addTransition("c", PROTEC);
        PROTEC.addTransition("t", PROTECT);
        PROTECT.addTransition("e", PROTECTE);
        PROTECTE.addTransition("d", PROTECTED);
        PROTECTED.addTransition(variable_chars, VARSTATE);
        PR.addTransition("i", PRI);
        PRI.addTransition("v", PRIV);
        PRIV.addTransition("a", PRIVA);
        PRIVA.addTransition("t", PRIVAT);
        PRIVAT.addTransition("e", PRIVATE);
        PRIVATE.addTransition(variable_chars, VARSTATE);
        P.addTransition("u", PU);
        PU.addTransition("b", PUB);
        PUB.addTransition("l", PUBL);
        PUBL.addTransition("i", PUBLI);
        PUBLI.addTransition("c", PUBLIC);
        PUBLIC.addTransition(variable_chars, VARSTATE);
        R.addTransition("e", RE);
        RE.addTransition("t", RET);
        RET.addTransition("u", RETU);
        RETU.addTransition("r", RETUR);
        RETUR.addTransition("n", RETURN);
        RETURN.addTransition(variable_chars, VARSTATE);
        S.addTransition("h", SH);
        SH.addTransition("o", SHO);
        SHO.addTransition("r", SHOR);
        SHOR.addTransition("t", SHORT);
        SHORT.addTransition(variable_chars, VARSTATE);
        S.addTransition("t", ST);
        ST.addTransition("a", STA);
        STA.addTransition("t", STAT);
        STAT.addTransition("i", STATI);
        STATI.addTransition("c", STATIC);
        STATIC.addTransition(variable_chars, VARSTATE);
        S.addTransition("t", ST);
        S.addTransition("u", SU);
        SU.addTransition("p", SUP);
        SUP.addTransition("e", SUPE);
        SUPE.addTransition("r", SUPER);
        SUPER.addTransition(variable_chars, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("i", THI);
        THI.addTransition("s", THIS);
        THIS.addTransition(variable_chars, VARSTATE);
        V.addTransition("o", VO);
        VO.addTransition("i", VOI);
        VOI.addTransition("d", VOID);
        VOID.addTransition(variable_chars, VARSTATE);
        W.addTransition("h", WH);
        WH.addTransition("i", WHI);
        WHI.addTransition("l", WHIL);
        WHIL.addTransition("e", WHILE);
        WHILE.addTransition(variable_chars, VARSTATE);

        // All keywords could transition into a variable.
        A.addTransition(variable_chars, VARSTATE);
        AB.addTransition(variable_chars, VARSTATE);
        ABS.addTransition(variable_chars, VARSTATE);
        ABST.addTransition(variable_chars, VARSTATE);
        ABSTR.addTransition(variable_chars, VARSTATE);
        ABSTRA.addTransition(variable_chars, VARSTATE);
        ABSTRAC.addTransition(variable_chars, VARSTATE);
        B.addTransition(variable_chars, VARSTATE);
        BO.addTransition(variable_chars, VARSTATE);
        BOO.addTransition(variable_chars, VARSTATE);
        BOOL.addTransition(variable_chars, VARSTATE);
        BOOLE.addTransition(variable_chars, VARSTATE);
        BOOLEA.addTransition(variable_chars, VARSTATE);
        B.addTransition(variable_chars, VARSTATE);
        BY.addTransition(variable_chars, VARSTATE);
        BYT.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CH.addTransition(variable_chars, VARSTATE);
        CHA.addTransition(variable_chars, VARSTATE);
        CL.addTransition(variable_chars, VARSTATE);
        CLA.addTransition(variable_chars, VARSTATE);
        CLAS.addTransition(variable_chars, VARSTATE);
        CO.addTransition(variable_chars, VARSTATE);
        CON.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CO.addTransition(variable_chars, VARSTATE);
        CON.addTransition(variable_chars, VARSTATE);
        CONS.addTransition(variable_chars, VARSTATE);
        D.addTransition(variable_chars, VARSTATE);
        DO.addTransition(variable_chars, VARSTATE);
        DOU.addTransition(variable_chars, VARSTATE);
        DOUB.addTransition(variable_chars, VARSTATE);
        DOUBL.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FL.addTransition(variable_chars, VARSTATE);
        FLO.addTransition(variable_chars, VARSTATE);
        FLOA.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EL.addTransition(variable_chars, VARSTATE);
        ELS.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EX.addTransition(variable_chars, VARSTATE);
        EXT.addTransition(variable_chars, VARSTATE);
        EXTE.addTransition(variable_chars, VARSTATE);
        EXTEN.addTransition(variable_chars, VARSTATE);
        EXTEND.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FI.addTransition(variable_chars, VARSTATE);
        FIN.addTransition(variable_chars, VARSTATE);
        FINA.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FI.addTransition(variable_chars, VARSTATE);
        FIN.addTransition(variable_chars, VARSTATE);
        FINA.addTransition(variable_chars, VARSTATE);
        FINAL.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FO.addTransition(variable_chars, VARSTATE);
        G.addTransition(variable_chars, VARSTATE);
        GO.addTransition(variable_chars, VARSTATE);
        GOT.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IM.addTransition(variable_chars, VARSTATE);
        IMP.addTransition(variable_chars, VARSTATE);
        IMPL.addTransition(variable_chars, VARSTATE);
        IMPLE.addTransition(variable_chars, VARSTATE);
        IMPLEM.addTransition(variable_chars, VARSTATE);
        IMPLEME.addTransition(variable_chars, VARSTATE);
        IMPLEMEN.addTransition(variable_chars, VARSTATE);
        IMPLEMENT.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IM.addTransition(variable_chars, VARSTATE);
        IMP.addTransition(variable_chars, VARSTATE);
        IMPO.addTransition(variable_chars, VARSTATE);
        IMPOR.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        INS.addTransition(variable_chars, VARSTATE);
        INST.addTransition(variable_chars, VARSTATE);
        INSTA.addTransition(variable_chars, VARSTATE);
        INSTAN.addTransition(variable_chars, VARSTATE);
        INSTANC.addTransition(variable_chars, VARSTATE);
        INSTANCE.addTransition(variable_chars, VARSTATE);
        INSTANCEO.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        INT.addTransition(variable_chars, VARSTATE);
        INTE.addTransition(variable_chars, VARSTATE);
        INTER.addTransition(variable_chars, VARSTATE);
        INTERF.addTransition(variable_chars, VARSTATE);
        INTERFA.addTransition(variable_chars, VARSTATE);
        INTERFAC.addTransition(variable_chars, VARSTATE);
        L.addTransition(variable_chars, VARSTATE);
        LO.addTransition(variable_chars, VARSTATE);
        LON.addTransition(variable_chars, VARSTATE);
        N.addTransition(variable_chars, VARSTATE);
        NA.addTransition(variable_chars, VARSTATE);
        NAT.addTransition(variable_chars, VARSTATE);
        NATI.addTransition(variable_chars, VARSTATE);
        NATIV.addTransition(variable_chars, VARSTATE);
        N.addTransition(variable_chars, VARSTATE);
        NE.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PA.addTransition(variable_chars, VARSTATE);
        PAC.addTransition(variable_chars, VARSTATE);
        PACK.addTransition(variable_chars, VARSTATE);
        PACKA.addTransition(variable_chars, VARSTATE);
        PACKAG.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PR.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PR.addTransition(variable_chars, VARSTATE);
        PRO.addTransition(variable_chars, VARSTATE);
        PROT.addTransition(variable_chars, VARSTATE);
        PROTE.addTransition(variable_chars, VARSTATE);
        PROTEC.addTransition(variable_chars, VARSTATE);
        PROTECT.addTransition(variable_chars, VARSTATE);
        PROTECTE.addTransition(variable_chars, VARSTATE);
        PRI.addTransition(variable_chars, VARSTATE);
        PRIV.addTransition(variable_chars, VARSTATE);
        PRIVA.addTransition(variable_chars, VARSTATE);
        PRIVAT.addTransition(variable_chars, VARSTATE);
        PRIVATE.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PU.addTransition(variable_chars, VARSTATE);
        PUB.addTransition(variable_chars, VARSTATE);
        PUBL.addTransition(variable_chars, VARSTATE);
        PUBLI.addTransition(variable_chars, VARSTATE);
        R.addTransition(variable_chars, VARSTATE);
        RE.addTransition(variable_chars, VARSTATE);
        RET.addTransition(variable_chars, VARSTATE);
        RETU.addTransition(variable_chars, VARSTATE);
        RETUR.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SH.addTransition(variable_chars, VARSTATE);
        SHO.addTransition(variable_chars, VARSTATE);
        SHOR.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        ST.addTransition(variable_chars, VARSTATE);
        STA.addTransition(variable_chars, VARSTATE);
        STAT.addTransition(variable_chars, VARSTATE);
        STATI.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        ST.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SU.addTransition(variable_chars, VARSTATE);
        SUP.addTransition(variable_chars, VARSTATE);
        SUPE.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TH.addTransition(variable_chars, VARSTATE);
        THI.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TR.addTransition(variable_chars, VARSTATE);
        V.addTransition(variable_chars, VARSTATE);
        VO.addTransition(variable_chars, VARSTATE);
        VOI.addTransition(variable_chars, VARSTATE);
        V.addTransition(variable_chars, VARSTATE);
        VO.addTransition(variable_chars, VARSTATE);
        W.addTransition(variable_chars, VARSTATE);
        WH.addTransition(variable_chars, VARSTATE);
        WHI.addTransition(variable_chars, VARSTATE);
        WHIL.addTransition(variable_chars, VARSTATE);
        FA.addTransition(variable_chars, VARSTATE);
        FAL.addTransition(variable_chars, VARSTATE);
        FALS.addTransition(variable_chars, VARSTATE);
        TRU.addTransition(variable_chars, VARSTATE);
        NU.addTransition(variable_chars, VARSTATE);
        NUL.addTransition(variable_chars, VARSTATE);

        VARSTATE.addTransition(variable_chars, VARSTATE);
    }
}