package com.project.scanner;

@SuppressWarnings("SpellCheckingInspection")
class ScannerDFA {

    static private final String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static private final String lower = "abcdefghijklmnopqrstuvwxyz";
    static private final String zero = "0";
    static private final String decNumbers = "0123456789";
    static private final String hexNumbers = "0123456789ABCDFE";
    static private final String nonZeroDecNumbers = "123456789";
    static private final String octNumbers = "01234567";
    static private final String variable_symbols = "$_";
    static private final String variable_chars = upper + lower + variable_symbols + decNumbers;
    static private final String whitespace = " \t\n";

    static final State START_STATE = new State("Start", false, null);
    static final State ERRSTATE = new State("ERR", false, null);

    // States for each possible keyword.
    static private final State A = new State("a", true, Kind.VARIABLE);
    static private final State AB = new State("ab", true, Kind.VARIABLE);
    static private final State ABS = new State("abs", true, Kind.VARIABLE);
    static private final State ABST = new State("abst", true, Kind.VARIABLE);
    static private final State ABSTR = new State("abstr", true, Kind.VARIABLE);
    static private final State ABSTRA = new State("abstra", true, Kind.VARIABLE);
    static private final State ABSTRAC = new State("abstrac", true, Kind.VARIABLE);
    static private final State ABSTRACT = new State("abstract", true, Kind.ABSTRACT);
    static private final State AS = new State("as", true, Kind.VARIABLE);
    static private final State ASS = new State("ass", true, Kind.VARIABLE);
    static private final State ASSE = new State("asse", true, Kind.VARIABLE);
    static private final State ASSER = new State("asser", true, Kind.VARIABLE);
    static private final State ASSERT = new State("assert", true, Kind.ASSERT);
    static private final State B = new State("b", true, Kind.VARIABLE);
    static private final State BO = new State("bo", true, Kind.VARIABLE);
    static private final State BOO = new State("boo", true, Kind.VARIABLE);
    static private final State BOOL = new State("bool", true, Kind.VARIABLE);
    static private final State BOOLE = new State("boole", true, Kind.VARIABLE);
    static private final State BOOLEA = new State("boolea", true, Kind.VARIABLE);
    static private final State BOOLEAN = new State("boolean", true, Kind.BOOLEAN);
    static private final State BR = new State("br", true, Kind.VARIABLE);
    static private final State BRE = new State("bre", true, Kind.VARIABLE);
    static private final State BREA = new State("brea", true, Kind.VARIABLE);
    static private final State BREAK = new State("break", true, Kind.BREAK);
    static private final State BY = new State("by", true, Kind.VARIABLE);
    static private final State BYT = new State("byt", true, Kind.VARIABLE);
    static private final State BYTE = new State("byte", true, Kind.BYTE);
    static private final State C = new State("c", true, Kind.VARIABLE);
    static private final State CA = new State("ca", true, Kind.VARIABLE);
    static private final State CAS = new State("cas", true, Kind.VARIABLE);
    static private final State CASE = new State("case", true, Kind.CASE);
    static private final State CAT = new State("cat", true, Kind.VARIABLE);
    static private final State CATC = new State("catc", true, Kind.VARIABLE);
    static private final State CATCH = new State("catch", true, Kind.CATCH);
    static private final State CH = new State("ch", true, Kind.VARIABLE);
    static private final State CHA = new State("cha", true, Kind.VARIABLE);
    static private final State CHAR = new State("char", true, Kind.CHAR);
    static private final State CL = new State("cl", true, Kind.VARIABLE);
    static private final State CLA = new State("cla", true, Kind.VARIABLE);
    static private final State CLAS = new State("clas", true, Kind.VARIABLE);
    static private final State CLASS = new State("class", true, Kind.CLASS);
    static private final State CO = new State("co", true, Kind.VARIABLE);
    static private final State CON = new State("con", true, Kind.VARIABLE);
    static private final State CONT = new State("cont", true, Kind.VARIABLE);
    static private final State CONTI = new State("conti", true, Kind.VARIABLE);
    static private final State CONTIN = new State("contin", true, Kind.VARIABLE);
    static private final State CONTINU = new State("continu", true, Kind.VARIABLE);
    static private final State CONTINUE = new State("continue", true, Kind.CONTINUE);
    static private final State CONS = new State("cons", true, Kind.VARIABLE);
    static private final State CONST = new State("const", true, Kind.CONST);
    static private final State D = new State("d", true, Kind.VARIABLE);
    static private final State DE = new State("de", true, Kind.VARIABLE);
    static private final State DEF = new State("def", true, Kind.VARIABLE);
    static private final State DEFA = new State("defa", true, Kind.VARIABLE);
    static private final State DEFAU = new State("defau", true, Kind.VARIABLE);
    static private final State DEFAUL = new State("defaul", true, Kind.VARIABLE);
    static private final State DEFAULT = new State("default", true, Kind.DEFAULT);
    static private final State DO = new State("do", true, Kind.DO);
    static private final State DOU = new State("dou", true, Kind.VARIABLE);
    static private final State DOUB = new State("doub", true, Kind.VARIABLE);
    static private final State DOUBL = new State("doubl", true, Kind.VARIABLE);
    static private final State DOUBLE = new State("double", true, Kind.DOUBLE);
    static private final State E = new State("e", true, Kind.VARIABLE);
    static private final State EL = new State("el", true, Kind.VARIABLE);
    static private final State ELS = new State("els", true, Kind.VARIABLE);
    static private final State ELSE = new State("else", true, Kind.ELSE);
    static private final State EN = new State("en", true, Kind.VARIABLE);
    static private final State ENU = new State("enu", true, Kind.VARIABLE);
    static private final State ENUM = new State("enum", true, Kind.ENUM);
    static private final State EX = new State("ex", true, Kind.VARIABLE);
    static private final State EXP = new State("exp", true, Kind.VARIABLE);
    static private final State EXPO = new State("expo", true, Kind.VARIABLE);
    static private final State EXPOR = new State("expor", true, Kind.VARIABLE);
    static private final State EXPORT = new State("export", true, Kind.VARIABLE);
    static private final State EXPORTS = new State("exports", true, Kind.EXPORTS);
    static private final State EXT = new State("ext", true, Kind.VARIABLE);
    static private final State EXTE = new State("exte", true, Kind.VARIABLE);
    static private final State EXTEN = new State("exten", true, Kind.VARIABLE);
    static private final State EXTEND = new State("extend", true, Kind.VARIABLE);
    static private final State EXTENDS = new State("extends", true, Kind.EXTENDS);
    static private final State F = new State("f", true, Kind.VARIABLE);
    static private final State FI = new State("fi", true, Kind.VARIABLE);
    static private final State FIN = new State("fin", true, Kind.VARIABLE);
    static private final State FINA = new State("fina", true, Kind.VARIABLE);
    static private final State FINAL = new State("final", true, Kind.FINAL);
    static private final State FINALL = new State("finall", true, Kind.VARIABLE);
    static private final State FINALLY = new State("finally", true, Kind.FINALLY);
    static private final State FL = new State("fl", true, Kind.VARIABLE);
    static private final State FLO = new State("flo", true, Kind.VARIABLE);
    static private final State FLOA = new State("floa", true, Kind.VARIABLE);
    static private final State FLOAT = new State("float", true, Kind.FLOAT);
    static private final State FO = new State("fo", true, Kind.VARIABLE);
    static private final State FOR = new State("for", true, Kind.FOR);
    static private final State G = new State("g", true, Kind.VARIABLE);
    static private final State GO = new State("go", true, Kind.VARIABLE);
    static private final State GOT = new State("got", true, Kind.VARIABLE);
    static private final State GOTO = new State("goto", true, Kind.GOTO);
    static private final State I = new State("i", true, Kind.VARIABLE);
    static private final State IF = new State("if", true, Kind.IF);
    static private final State IM = new State("im", true, Kind.VARIABLE);
    static private final State IMP = new State("imp", true, Kind.VARIABLE);
    static private final State IMPL = new State("impl", true, Kind.VARIABLE);
    static private final State IMPLE = new State("imple", true, Kind.VARIABLE);
    static private final State IMPLEM = new State("implem", true, Kind.VARIABLE);
    static private final State IMPLEME = new State("impleme", true, Kind.VARIABLE);
    static private final State IMPLEMEN = new State("implemen", true, Kind.VARIABLE);
    static private final State IMPLEMENT = new State("implement", true, Kind.VARIABLE);
    static private final State IMPLEMENTS = new State("implements", true, Kind.IMPLEMENTS);
    static private final State IMPO = new State("impo", true, Kind.VARIABLE);
    static private final State IMPOR = new State("impor", true, Kind.VARIABLE);
    static private final State IMPORT = new State("import", true, Kind.IMPORT);
    static private final State IN = new State("in", true, Kind.VARIABLE);
    static private final State INS = new State("ins", true, Kind.VARIABLE);
    static private final State INST = new State("inst", true, Kind.VARIABLE);
    static private final State INSTA = new State("insta", true, Kind.VARIABLE);
    static private final State INSTAN = new State("instan", true, Kind.VARIABLE);
    static private final State INSTANC = new State("instanc", true, Kind.VARIABLE);
    static private final State INSTANCE = new State("instance", true, Kind.VARIABLE);
    static private final State INSTANCEO = new State("instanceo", true, Kind.VARIABLE);
    static private final State INSTANCEOF = new State("instanceof", true, Kind.INSTANCEOF);
    static private final State INT = new State("int", true, Kind.INT);
    static private final State INTE = new State("inte", true, Kind.VARIABLE);
    static private final State INTER = new State("inter", true, Kind.VARIABLE);
    static private final State INTERF = new State("interf", true, Kind.VARIABLE);
    static private final State INTERFA = new State("interfa", true, Kind.VARIABLE);
    static private final State INTERFAC = new State("interfac", true, Kind.VARIABLE);
    static private final State INTERFACE = new State("interface", true, Kind.INTERFACE);
    static private final State L = new State("l", true, Kind.VARIABLE);
    static private final State LO = new State("lo", true, Kind.VARIABLE);
    static private final State LON = new State("lon", true, Kind.VARIABLE);
    static private final State LONG = new State("long", true, Kind.LONG);
    static private final State M = new State("m", true, Kind.VARIABLE);
    static private final State MO = new State("mo", true, Kind.VARIABLE);
    static private final State MOD = new State("mod", true, Kind.VARIABLE);
    static private final State MODU = new State("modu", true, Kind.VARIABLE);
    static private final State MODUL = new State("modul", true, Kind.VARIABLE);
    static private final State MODULE = new State("module", true, Kind.MODULE);
    static private final State N = new State("n", true, Kind.VARIABLE);
    static private final State NA = new State("na", true, Kind.VARIABLE);
    static private final State NAT = new State("nat", true, Kind.VARIABLE);
    static private final State NATI = new State("nati", true, Kind.VARIABLE);
    static private final State NATIV = new State("nativ", true, Kind.VARIABLE);
    static private final State NATIVE = new State("native", true, Kind.NATIVE);
    static private final State NE = new State("ne", true, Kind.VARIABLE);
    static private final State NEW = new State("new", true, Kind.NEW);
    static private final State P = new State("p", true, Kind.VARIABLE);
    static private final State PA = new State("pa", true, Kind.VARIABLE);
    static private final State PAC = new State("pac", true, Kind.VARIABLE);
    static private final State PACK = new State("pack", true, Kind.VARIABLE);
    static private final State PACKA = new State("packa", true, Kind.VARIABLE);
    static private final State PACKAG = new State("packag", true, Kind.VARIABLE);
    static private final State PACKAGE = new State("package", true, Kind.PACKAGE);
    static private final State PR = new State("pr", true, Kind.VARIABLE);
    static private final State PRI = new State("pri", true, Kind.VARIABLE);
    static private final State PRIV = new State("priv", true, Kind.VARIABLE);
    static private final State PRIVA = new State("priva", true, Kind.VARIABLE);
    static private final State PRIVAT = new State("privat", true, Kind.VARIABLE);
    static private final State PRIVATE = new State("private", true, Kind.PRIVATE);
    static private final State PRO = new State("pro", true, Kind.VARIABLE);
    static private final State PROT = new State("prot", true, Kind.VARIABLE);
    static private final State PROTE = new State("prote", true, Kind.VARIABLE);
    static private final State PROTEC = new State("protec", true, Kind.VARIABLE);
    static private final State PROTECT = new State("protect", true, Kind.VARIABLE);
    static private final State PROTECTE = new State("protecte", true, Kind.VARIABLE);
    static private final State PROTECTED = new State("protected", true, Kind.PROTECTED);
    static private final State PU = new State("pu", true, Kind.VARIABLE);
    static private final State PUB = new State("pub", true, Kind.VARIABLE);
    static private final State PUBL = new State("publ", true, Kind.VARIABLE);
    static private final State PUBLI = new State("publi", true, Kind.VARIABLE);
    static private final State PUBLIC = new State("public", true, Kind.PUBLIC);
    static private final State R = new State("r", true, Kind.VARIABLE);
    static private final State RE = new State("re", true, Kind.VARIABLE);
    static private final State REQ = new State("req", true, Kind.VARIABLE);
    static private final State REQU = new State("requ", true, Kind.VARIABLE);
    static private final State REQUI = new State("requi", true, Kind.VARIABLE);
    static private final State REQUIR = new State("requir", true, Kind.VARIABLE);
    static private final State REQUIRE = new State("require", true, Kind.VARIABLE);
    static private final State REQUIRES = new State("requires", true, Kind.REQUIRES);
    static private final State RET = new State("ret", true, Kind.VARIABLE);
    static private final State RETU = new State("retu", true, Kind.VARIABLE);
    static private final State RETUR = new State("retur", true, Kind.VARIABLE);
    static private final State RETURN = new State("return", true, Kind.RETURN);
    static private final State S = new State("s", true, Kind.VARIABLE);
    static private final State SH = new State("sh", true, Kind.VARIABLE);
    static private final State SHO = new State("sho", true, Kind.VARIABLE);
    static private final State SHOR = new State("shor", true, Kind.VARIABLE);
    static private final State SHORT = new State("short", true, Kind.SHORT);
    static private final State ST = new State("st", true, Kind.VARIABLE);
    static private final State STA = new State("sta", true, Kind.VARIABLE);
    static private final State STAT = new State("stat", true, Kind.VARIABLE);
    static private final State STATI = new State("stati", true, Kind.VARIABLE);
    static private final State STATIC = new State("static", true, Kind.STATIC);
    static private final State STR = new State("str", true, Kind.VARIABLE);
    static private final State STRI = new State("stri", true, Kind.VARIABLE);
    static private final State STRIC = new State("stric", true, Kind.VARIABLE);
    static private final State STRICT = new State("strict", true, Kind.VARIABLE);
    static private final State STRICTF = new State("strictf", true, Kind.VARIABLE);
    static private final State STRICTFP = new State("strictfp", true, Kind.STRICTFP);
    static private final State SU = new State("su", true, Kind.VARIABLE);
    static private final State SUP = new State("sup", true, Kind.VARIABLE);
    static private final State SUPE = new State("supe", true, Kind.VARIABLE);
    static private final State SUPER = new State("super", true, Kind.SUPER);
    static private final State SW = new State("sw", true, Kind.VARIABLE);
    static private final State SWI = new State("swi", true, Kind.VARIABLE);
    static private final State SWIT = new State("swit", true, Kind.VARIABLE);
    static private final State SWITC = new State("switc", true, Kind.VARIABLE);
    static private final State SWITCH = new State("switch", true, Kind.SWITCH);
    static private final State SY = new State("sy", true, Kind.VARIABLE);
    static private final State SYN = new State("syn", true, Kind.VARIABLE);
    static private final State SYNC = new State("sync", true, Kind.VARIABLE);
    static private final State SYNCH = new State("synch", true, Kind.VARIABLE);
    static private final State SYNCHR = new State("synchr", true, Kind.VARIABLE);
    static private final State SYNCHRO = new State("synchro", true, Kind.VARIABLE);
    static private final State SYNCHRON = new State("synchron", true, Kind.VARIABLE);
    static private final State SYNCHRONI = new State("synchroni", true, Kind.VARIABLE);
    static private final State SYNCHRONIZ = new State("synchroniz", true, Kind.VARIABLE);
    static private final State SYNCHRONIZE = new State("synchronize", true, Kind.VARIABLE);
    static private final State SYNCHRONIZED = new State("synchronized", true, Kind.SYNCHRONIZED);
    static private final State T = new State("t", true, Kind.VARIABLE);
    static private final State TH = new State("th", true, Kind.VARIABLE);
    static private final State THI = new State("thi", true, Kind.VARIABLE);
    static private final State THIS = new State("this", true, Kind.THIS);
    static private final State THR = new State("thr", true, Kind.VARIABLE);
    static private final State THRO = new State("thro", true, Kind.VARIABLE);
    static private final State THROW = new State("throw", true, Kind.THROW);
    static private final State THROWS = new State("throws", true, Kind.THROWS);
    static private final State TR = new State("tr", true, Kind.VARIABLE);
    static private final State TRA = new State("tra", true, Kind.VARIABLE);
    static private final State TRAN = new State("tran", true, Kind.VARIABLE);
    static private final State TRANS = new State("trans", true, Kind.VARIABLE);
    static private final State TRANSI = new State("transi", true, Kind.VARIABLE);
    static private final State TRANSIE = new State("transie", true, Kind.VARIABLE);
    static private final State TRANSIEN = new State("transien", true, Kind.VARIABLE);
    static private final State TRANSIENT = new State("transient", true, Kind.TRANSIENT);
    static private final State TRY = new State("try", true, Kind.TRY);
    static private final State V = new State("v", true, Kind.VARIABLE);
    static private final State VA = new State("va", true, Kind.VARIABLE);
    static private final State VAR = new State("var", true, Kind.VAR);
    static private final State VO = new State("vo", true, Kind.VARIABLE);
    static private final State VOI = new State("voi", true, Kind.VARIABLE);
    static private final State VOID = new State("void", true, Kind.VOID);
    static private final State VOL = new State("vol", true, Kind.VARIABLE);
    static private final State VOLA = new State("vola", true, Kind.VARIABLE);
    static private final State VOLAT = new State("volat", true, Kind.VARIABLE);
    static private final State VOLATI = new State("volati", true, Kind.VARIABLE);
    static private final State VOLATIL = new State("volatil", true, Kind.VARIABLE);
    static private final State VOLATILE = new State("volatile", true, Kind.VOLATILE);
    static private final State W = new State("w", true, Kind.VARIABLE);
    static private final State WH = new State("wh", true, Kind.VARIABLE);
    static private final State WHI = new State("whi", true, Kind.VARIABLE);
    static private final State WHIL = new State("whil", true, Kind.VARIABLE);
    static private final State WHILE = new State("while", true, Kind.WHILE);

    // DFA states for each possible literal keyword.
    static private final State FA = new State("FA", true, Kind.VARIABLE);
    static private final State FAL = new State("FAL", true, Kind.VARIABLE);
    static private final State FALS = new State("FALS", true, Kind.VARIABLE);
    static private final State FALSE = new State("FALSE", true, Kind.FALSE);
    static private final State TRU = new State("TRU", true, Kind.VARIABLE);
    static private final State TRUE = new State("TRUE", true, Kind.TRUE);
    static private final State NU = new State("NU", true, Kind.VARIABLE);
    static private final State NUL = new State("NUL", true, Kind.VARIABLE);
    static private final State NULL = new State("NULL", true, Kind.NULL);

    // State for variables.
    static private final State VARSTATE = new State("varstate", true, Kind.VARIABLE);

    // States for integer literals.
    static private final State ZERO = new State("zero", true, Kind.DECNUMINT);
    static private final State HEXSTART = new State("hextart", false, null);
    static private final State DECNUMINT = new State("decnumint", true, Kind.DECNUMINT);
    static private final State DECNUMLONG = new State("decnumlong", true, Kind.DECNUMLONG);
    static private final State OCTNUMINT = new State("octnumint", true, Kind.OCTNUMINT);
    static private final State OCTNUMLONG = new State("octnumlong", true, Kind.OCTNUMLONG);
    static private final State HEXNUMINT = new State("hexnumint", true, Kind.HEXNUMINT);
    static private final State HEXNUMLONG = new State("hexnumlong", true, Kind.HEXNUMLONG);

    // State for whitespace.
    static private final State WHITESPACE = new State("whitespace", true, null);

    // State for all types of parantheses.
    static private final State PAREN_OPEN = new State("(", true, Kind.PAREN_OPEN);
    static private final State PAREN_CLOSE = new State(")", true, Kind.PAREN_CLOSE);
    static private final State SQUARE_BRACKET_OPEN = new State("[", true, Kind.SQUARE_BRACKET_OPEN);
    static private final State SQUARE_BRACKET_CLOSE = new State("]", true, Kind.SQUARE_BRACKET_CLOSE);
    static private final State CURLY_BRACKET_OPEN = new State("{", true, Kind.CURLY_BRACKET_OPEN);
    static private final State CURLY_BRACKET_CLOSE = new State("}", true, Kind.CURLY_BRACKET_CLOSE);

    // States for all special symbols.
    static private final State PLUS = new State("+", true, Kind.PLUS);
    static private final State MINUS = new State("-", true, Kind.MINUS);
    static private final State STAR = new State("*", true, Kind.STAR);
    static private final State SLASH = new State("/", true, Kind.SLASH);
    static private final State MODULUS = new State("%", true, Kind.MODULUS);
    static private final State INCREMENT = new State("++", true, Kind.INCREMENT);
    static private final State DECREMENT = new State("--", true, Kind.DECREMENT);
    static private final State EQUAL = new State("=", true, Kind.EQUAL);
    static private final State EQUALEQUAL = new State("==", true, Kind.EQUALEQUAL);
    static private final State NOTEQUAL = new State("!=", true, Kind.NOTEQUAL);
    static private final State GREATER = new State(">", true, Kind.GREATER);
    static private final State LESS = new State("<", true, Kind.LESS);
    static private final State GREATEREQUAL = new State(">=", true, Kind.GREATEREQUAL);
    static private final State LESSEQUAL = new State("<=", true, Kind.LESSEQUAL);
    static private final State AMPERSAND = new State("&", true, Kind.AMPERSAND);
    static private final State BAR = new State("|", true, Kind.BAR);
    static private final State AND = new State("&&", true, Kind.AND);
    static private final State OR = new State("||", true, Kind.OR);
    static private final State UPARROW = new State("^", true, Kind.UPARROW);
    static private final State TILDE = new State("~", true, Kind.TILDE);
    static private final State LEFTSHIFT = new State("<<", true, Kind.LEFTSHIFT);
    static private final State RIGHTSHIFT = new State(">>", true, Kind.RIGHTSHIFT);
    static private final State ZEROFILLRIGHTSHIFT = new State(">>>", true, Kind.ZEROFILLRIGHTSHIFT);
    static private final State EXCLAMATION = new State("!", true, Kind.EXCLAMATION);
    static private final State PLUSEQUAL = new State("+=", true, Kind.PLUSEQUAL);
    static private final State MINUSEQUAL = new State("-=", true, Kind.MINUSEQUAL);
    static private final State STAREQUAL = new State("*=", true, Kind.STAREQUAL);
    static private final State SLASHEQUAL = new State("/=", true, Kind.SLASHEQUAL);
    static private final State MODEQUAL = new State("%=", true, Kind.MODEQUAL);
    static private final State LEFTSHIFTEQUAL = new State("<<=", true, Kind.LEFTSHIFTEQUAL);
    static private final State RIGHTSHIFTEQUAL = new State(">>=", true, Kind.RIGHTSHIFTEQUAL);
    static private final State AMPERSANDEQUAL = new State("&=", true, Kind.AMPERSANDEQUAL);
    static private final State ARROWEQUAL = new State("^=", true, Kind.ARROWEQUAL);
    static private final State BAREQUAL = new State("|=", true, Kind.BAREQUAL);
    static private final State QUESTIONMARK = new State("?", true, Kind.QUESTIONMARK);
    static private final State COLON = new State(":", true, Kind.COLON);
    static private final State DOT = new State(".", true, Kind.DOT);
    static private final State COMMA = new State(",", true, Kind.COMMA);
    static private final State SEMICOLON = new State(";", true, Kind.SEMICOLON);

    // State for comments, plus independently declared states.
    static private final State LINE_COMMENT = new State("LINE_COMMENT", true, null);
    static final State BLOCK_COMMENT = new State("BLOCK_COMMENT", true, null);
    static final State BLOCK_STAR = new State("BLOCK_STAR", true, null);
    static private final State BLOCK_END = new State("BLOCK_END", true, null);

    // States for floating point literals.
    static private final State DOUBLE_DOT = new State("DOUBLE_DOT", false, null);
    static private final State DOUBLENUM = new State("DOUBLENUM", true, Kind.DOUBLENUM);
    static private final State DOUBLENUMEND = new State("DOUBLENUMEND", true, Kind.DOUBLENUM);
    static private final State FLOATNUMEND = new State("FLOATNUMEND", true, Kind.FLOATNUM);
    static private final State MINUSDOT = new State("MINUSDOT", false, null);
    static private final State DOUBLEEXP = new State("DOUBLEEXP", false, null);
    static private final State DOUBLEEXPMINUS = new State("DOUBLEEXPMINUS", false, null);
    static private final State DOUBLEAFTEXP = new State("DOUBLEAFTEXP", true, Kind.DOUBLENUM);

    // States for character literals.
    static private final State CHARLIT = new State("CHARLIT", false, null);
    static private final State CHAREND = new State("CHAREND", true, Kind.CHARLIT);
    static private final State CHARESCP = new State("CHARESCP", false, null);

    // States for string literals.
    static private final State STRLIT = new State("STRLIT", false, null);
    static private final State STREND = new State("STREND", true, Kind.STRLIT);
    static private final State STRESCP = new State("STRESCP", false, null);

    static {
        // All transitions from the start state.
        START_STATE.addTransition(zero, ZERO);
        START_STATE.addTransition(nonZeroDecNumbers, DECNUMINT);
        START_STATE.addTransition("a", A);
        START_STATE.addTransition("b", B);
        START_STATE.addTransition("c", C);
        START_STATE.addTransition("d", D);
        START_STATE.addTransition("e", E);
        START_STATE.addTransition("f", F);
        START_STATE.addTransition("g", G);
        START_STATE.addTransition("i", I);
        START_STATE.addTransition("l", L);
        START_STATE.addTransition("m", M);
        START_STATE.addTransition("n", N);
        START_STATE.addTransition("p", P);
        START_STATE.addTransition("r", R);
        START_STATE.addTransition("s", S);
        START_STATE.addTransition("t", T);
        START_STATE.addTransition("v", V);
        START_STATE.addTransition("w", W);
        START_STATE.addTransition(upper + lower, VARSTATE);
        START_STATE.addTransition(whitespace, WHITESPACE);
        START_STATE.addTransition("(", PAREN_OPEN);
        START_STATE.addTransition(")", PAREN_CLOSE);
        START_STATE.addTransition("[", SQUARE_BRACKET_OPEN);
        START_STATE.addTransition("]", SQUARE_BRACKET_CLOSE);
        START_STATE.addTransition("{", CURLY_BRACKET_OPEN);
        START_STATE.addTransition("}", CURLY_BRACKET_CLOSE);
        START_STATE.addTransition(";", SEMICOLON);
        START_STATE.addTransition("!", EXCLAMATION);
        START_STATE.addTransition("%", MODULUS);
        START_STATE.addTransition("&", AMPERSAND);
        START_STATE.addTransition("*", STAR);
        START_STATE.addTransition("+", PLUS);
        START_STATE.addTransition("-", MINUS);
        START_STATE.addTransition("/", SLASH);
        START_STATE.addTransition(":", COLON);
        START_STATE.addTransition("<", LESS);
        START_STATE.addTransition("=", EQUAL);
        START_STATE.addTransition(">", GREATER);
        START_STATE.addTransition("?", QUESTIONMARK);
        START_STATE.addTransition("^", UPARROW);
        START_STATE.addTransition("|", BAR);
        START_STATE.addTransition("~", TILDE);
        START_STATE.addTransition(".", DOT);
        START_STATE.addTransition(",", COMMA);
        START_STATE.addTransition("\"", STRLIT);
        START_STATE.addTransition("'", CHARLIT);

        // Transitions for line comments.
        SLASH.addTransition("/", LINE_COMMENT);
        LINE_COMMENT.addTransition("\n", ERRSTATE);
        LINE_COMMENT.addTransition(null, LINE_COMMENT);

        // Transitions for block comments.
        SLASH.addTransition("*", BLOCK_COMMENT);
        BLOCK_COMMENT.addTransition("*", BLOCK_STAR);
        BLOCK_COMMENT.addTransition(null, BLOCK_COMMENT);
        BLOCK_STAR.addTransition("/", BLOCK_END);
        BLOCK_STAR.addTransition("*", BLOCK_STAR);
        BLOCK_STAR.addTransition(null, BLOCK_COMMENT);

        // All symbol transitions.
        AMPERSAND.addTransition("&&", AND);
        AMPERSAND.addTransition("=", AMPERSANDEQUAL);
        BAR.addTransition("=", BAREQUAL);
        BAR.addTransition("|", OR);
        EQUAL.addTransition("=", EQUALEQUAL);
        EXCLAMATION.addTransition("=", NOTEQUAL);
        GREATER.addTransition("=", GREATEREQUAL);
        GREATER.addTransition(">", RIGHTSHIFT);
        LEFTSHIFT.addTransition("=", LEFTSHIFTEQUAL);
        LESS.addTransition("<", LEFTSHIFT);
        LESS.addTransition("=", LESSEQUAL);
        MINUS.addTransition("-", DECREMENT);
        MINUS.addTransition("=", MINUSEQUAL);
        MODULUS.addTransition("=", MODEQUAL);
        PLUS.addTransition("+", INCREMENT);
        PLUS.addTransition("=", PLUSEQUAL);
        RIGHTSHIFT.addTransition("=", RIGHTSHIFTEQUAL);
        RIGHTSHIFT.addTransition(">", ZEROFILLRIGHTSHIFT);
        SLASH.addTransition("=", SLASHEQUAL);
        STAR.addTransition("=", STAREQUAL);
        UPARROW.addTransition("=", ARROWEQUAL);

        // All integer literal transitions.
        MINUS.addTransition(zero, ZERO);
        MINUS.addTransition(decNumbers, DECNUMINT);
        ZERO.addTransition(octNumbers, OCTNUMINT);
        ZERO.addTransition("xX", HEXSTART);
        HEXSTART.addTransition(hexNumbers, HEXNUMINT);
        DECNUMINT.addTransition(decNumbers, DECNUMINT);
        DECNUMINT.addTransition("lL", DECNUMLONG);
        HEXNUMINT.addTransition(hexNumbers, HEXNUMINT);
        HEXNUMINT.addTransition("lL", HEXNUMLONG);
        OCTNUMINT.addTransition(octNumbers, OCTNUMINT);
        OCTNUMINT.addTransition("lL", OCTNUMLONG);

        // All floating point literal transitions.
        DECNUMINT.addTransition("eE", DOUBLEEXP);
        ZERO.addTransition(".", DOUBLE_DOT);
        DOT.addTransition(decNumbers, DOUBLENUM);
        MINUS.addTransition(".", MINUSDOT);
        MINUSDOT.addTransition(decNumbers, DOUBLENUM);
        DECNUMINT.addTransition(".", DOUBLE_DOT);
        DOUBLE_DOT.addTransition(decNumbers, DOUBLENUM);
        DOUBLENUM.addTransition(decNumbers, DOUBLENUM);
        DOUBLENUM.addTransition("dD", DOUBLENUMEND);
        DOUBLENUM.addTransition("fF", FLOATNUMEND);
        DOUBLENUM.addTransition("eE", DOUBLEEXP);
        DOUBLEEXP.addTransition("-", DOUBLEEXPMINUS);
        DOUBLEEXP.addTransition(decNumbers, DOUBLEAFTEXP);
        DOUBLEEXPMINUS.addTransition(decNumbers, DOUBLEAFTEXP);
        DOUBLEAFTEXP.addTransition("dD", DOUBLENUMEND);
        DOUBLEAFTEXP.addTransition("fF", FLOATNUMEND);

        // All character literal transitions.
        CHARLIT.addTransition("'", CHAREND);
        CHARLIT.addTransition("\\", CHARESCP);
        CHARLIT.addTransition(null, CHARLIT);
        CHARESCP.addTransition(null, CHARLIT);

        // All string literal transitions.
        STRLIT.addTransition("\"", STREND);
        STRLIT.addTransition("\\", STRESCP);
        STRLIT.addTransition(null, STRLIT);
        STRESCP.addTransition(null, STRLIT);

        // All keyword literal transitions.
        F.addTransition("a", FA);
        FA.addTransition("l", FAL);
        FAL.addTransition("s", FALS);
        FALS.addTransition("e", FALSE);
        FALSE.addTransition(variable_chars, VARSTATE);
        TR.addTransition("u", TRU);
        TRU.addTransition("e", TRUE);
        TRUE.addTransition(variable_chars, VARSTATE);
        N.addTransition("u", NU);
        NU.addTransition("l", NUL);
        NUL.addTransition("l", NULL);
        NULL.addTransition(variable_chars, VARSTATE);

        // Whitespace.
        WHITESPACE.addTransition(whitespace, WHITESPACE);

        // All keyword transitions.
        A.addTransition("b", AB);
        AB.addTransition("s", ABS);
        ABS.addTransition("t", ABST);
        ABST.addTransition("r", ABSTR);
        ABSTR.addTransition("a", ABSTRA);
        ABSTRA.addTransition("c", ABSTRAC);
        ABSTRAC.addTransition("t", ABSTRACT);
        ABSTRACT.addTransition(variable_chars, VARSTATE);
        A.addTransition("s", AS);
        AS.addTransition("s", ASS);
        ASS.addTransition("e", ASSE);
        ASSE.addTransition("r", ASSER);
        ASSER.addTransition("t", ASSERT);
        ASSERT.addTransition(variable_chars, VARSTATE);
        B.addTransition("o", BO);
        BO.addTransition("o", BOO);
        BOO.addTransition("l", BOOL);
        BOOL.addTransition("e", BOOLE);
        BOOLE.addTransition("a", BOOLEA);
        BOOLEA.addTransition("n", BOOLEAN);
        BOOLEAN.addTransition(variable_chars, VARSTATE);
        B.addTransition("r", BR);
        BR.addTransition("e", BRE);
        BRE.addTransition("a", BREA);
        BREA.addTransition("k", BREAK);
        BREAK.addTransition(variable_chars, VARSTATE);
        B.addTransition("y", BY);
        BY.addTransition("t", BYT);
        BYT.addTransition("e", BYTE);
        BYTE.addTransition(variable_chars, VARSTATE);
        C.addTransition("a", CA);
        CA.addTransition("s", CAS);
        CAS.addTransition("e", CASE);
        CASE.addTransition(variable_chars, VARSTATE);
        C.addTransition("a", CA);
        CA.addTransition("t", CAT);
        CAT.addTransition("c", CATC);
        CATC.addTransition("h", CATCH);
        CATCH.addTransition(variable_chars, VARSTATE);
        C.addTransition("h", CH);
        CH.addTransition("a", CHA);
        CHA.addTransition("r", CHAR);
        CHAR.addTransition(variable_chars, VARSTATE);
        C.addTransition("l", CL);
        CL.addTransition("a", CLA);
        CLA.addTransition("s", CLAS);
        CLAS.addTransition("s", CLASS);
        CLASS.addTransition(variable_chars, VARSTATE);
        C.addTransition("o", CO);
        CO.addTransition("n", CON);
        CON.addTransition("t", CONT);
        CONT.addTransition("i", CONTI);
        CONTI.addTransition("n", CONTIN);
        CONTIN.addTransition("u", CONTINU);
        CONTINU.addTransition("e", CONTINUE);
        CONTINUE.addTransition(variable_chars, VARSTATE);
        C.addTransition("o", CO);
        CO.addTransition("n", CON);
        CON.addTransition("s", CONS);
        CONS.addTransition("t", CONST);
        CONST.addTransition(variable_chars, VARSTATE);
        D.addTransition("e", DE);
        DE.addTransition("f", DEF);
        DEF.addTransition("a", DEFA);
        DEFA.addTransition("u", DEFAU);
        DEFAU.addTransition("l", DEFAUL);
        DEFAUL.addTransition("t", DEFAULT);
        DEFAULT.addTransition(variable_chars, VARSTATE);
        D.addTransition("o", DO);
        DO.addTransition(variable_chars, VARSTATE);
        D.addTransition("o", DO);
        DO.addTransition("u", DOU);
        DOU.addTransition("b", DOUB);
        DOUB.addTransition("l", DOUBL);
        DOUBL.addTransition("e", DOUBLE);
        DOUBLE.addTransition(variable_chars, VARSTATE);
        E.addTransition("l", EL);
        EL.addTransition("s", ELS);
        ELS.addTransition("e", ELSE);
        ELSE.addTransition(variable_chars, VARSTATE);
        E.addTransition("n", EN);
        EN.addTransition("u", ENU);
        ENU.addTransition("m", ENUM);
        ENUM.addTransition(variable_chars, VARSTATE);
        E.addTransition("x", EX);
        EX.addTransition("p", EXP);
        EXP.addTransition("o", EXPO);
        EXPO.addTransition("r", EXPOR);
        EXPOR.addTransition("t", EXPORT);
        EXPORT.addTransition("s", EXPORTS);
        EXPORTS.addTransition(variable_chars, VARSTATE);
        E.addTransition("x", EX);
        EX.addTransition("t", EXT);
        EXT.addTransition("e", EXTE);
        EXTE.addTransition("n", EXTEN);
        EXTEN.addTransition("d", EXTEND);
        EXTEND.addTransition("s", EXTENDS);
        EXTENDS.addTransition(variable_chars, VARSTATE);
        F.addTransition("i", FI);
        FI.addTransition("n", FIN);
        FIN.addTransition("a", FINA);
        FINA.addTransition("l", FINAL);
        FINAL.addTransition(variable_chars, VARSTATE);
        F.addTransition("i", FI);
        FI.addTransition("n", FIN);
        FIN.addTransition("a", FINA);
        FINA.addTransition("l", FINAL);
        FINAL.addTransition("l", FINALL);
        FINALL.addTransition("y", FINALLY);
        FINALLY.addTransition(variable_chars, VARSTATE);
        F.addTransition("l", FL);
        FL.addTransition("o", FLO);
        FLO.addTransition("a", FLOA);
        FLOA.addTransition("t", FLOAT);
        FLOAT.addTransition(variable_chars, VARSTATE);
        F.addTransition("o", FO);
        FO.addTransition("r", FOR);
        FOR.addTransition(variable_chars, VARSTATE);
        G.addTransition("o", GO);
        GO.addTransition("t", GOT);
        GOT.addTransition("o", GOTO);
        GOTO.addTransition(variable_chars, VARSTATE);
        I.addTransition("f", IF);
        IF.addTransition(variable_chars, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("l", IMPL);
        IMPL.addTransition("e", IMPLE);
        IMPLE.addTransition("m", IMPLEM);
        IMPLEM.addTransition("e", IMPLEME);
        IMPLEME.addTransition("n", IMPLEMEN);
        IMPLEMEN.addTransition("t", IMPLEMENT);
        IMPLEMENT.addTransition("s", IMPLEMENTS);
        IMPLEMENTS.addTransition(variable_chars, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("o", IMPO);
        IMPO.addTransition("r", IMPOR);
        IMPOR.addTransition("t", IMPORT);
        IMPORT.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("s", INS);
        INS.addTransition("t", INST);
        INST.addTransition("a", INSTA);
        INSTA.addTransition("n", INSTAN);
        INSTAN.addTransition("c", INSTANC);
        INSTANC.addTransition("e", INSTANCE);
        INSTANCE.addTransition("o", INSTANCEO);
        INSTANCEO.addTransition("f", INSTANCEOF);
        INSTANCEOF.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INT.addTransition(variable_chars, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INT.addTransition("e", INTE);
        INTE.addTransition("r", INTER);
        INTER.addTransition("f", INTERF);
        INTERF.addTransition("a", INTERFA);
        INTERFA.addTransition("c", INTERFAC);
        INTERFAC.addTransition("e", INTERFACE);
        INTERFACE.addTransition(variable_chars, VARSTATE);
        L.addTransition("o", LO);
        LO.addTransition("n", LON);
        LON.addTransition("g", LONG);
        LONG.addTransition(variable_chars, VARSTATE);
        M.addTransition("o", MO);
        MO.addTransition("d", MOD);
        MOD.addTransition("u", MODU);
        MODU.addTransition("l", MODUL);
        MODUL.addTransition("e", MODULE);
        MODULE.addTransition(variable_chars, VARSTATE);
        N.addTransition("a", NA);
        NA.addTransition("t", NAT);
        NAT.addTransition("i", NATI);
        NATI.addTransition("v", NATIV);
        NATIV.addTransition("e", NATIVE);
        NATIVE.addTransition(variable_chars, VARSTATE);
        N.addTransition("e", NE);
        NE.addTransition("w", NEW);
        NEW.addTransition(variable_chars, VARSTATE);
        P.addTransition("a", PA);
        PA.addTransition("c", PAC);
        PAC.addTransition("k", PACK);
        PACK.addTransition("a", PACKA);
        PACKA.addTransition("g", PACKAG);
        PACKAG.addTransition("e", PACKAGE);
        PACKAGE.addTransition(variable_chars, VARSTATE);
        P.addTransition("r", PR);
        PR.addTransition("i", PRI);
        PRI.addTransition("v", PRIV);
        PRIV.addTransition("a", PRIVA);
        PRIVA.addTransition("t", PRIVAT);
        PRIVAT.addTransition("e", PRIVATE);
        PRIVATE.addTransition(variable_chars, VARSTATE);
        P.addTransition("r", PR);
        PR.addTransition("o", PRO);
        PRO.addTransition("t", PROT);
        PROT.addTransition("e", PROTE);
        PROTE.addTransition("c", PROTEC);
        PROTEC.addTransition("t", PROTECT);
        PROTECT.addTransition("e", PROTECTE);
        PROTECTE.addTransition("d", PROTECTED);
        PROTECTED.addTransition(variable_chars, VARSTATE);
        P.addTransition("u", PU);
        PU.addTransition("b", PUB);
        PUB.addTransition("l", PUBL);
        PUBL.addTransition("i", PUBLI);
        PUBLI.addTransition("c", PUBLIC);
        PUBLIC.addTransition(variable_chars, VARSTATE);
        R.addTransition("e", RE);
        RE.addTransition("q", REQ);
        REQ.addTransition("u", REQU);
        REQU.addTransition("i", REQUI);
        REQUI.addTransition("r", REQUIR);
        REQUIR.addTransition("e", REQUIRE);
        REQUIRE.addTransition("s", REQUIRES);
        REQUIRES.addTransition(variable_chars, VARSTATE);
        R.addTransition("e", RE);
        RE.addTransition("t", RET);
        RET.addTransition("u", RETU);
        RETU.addTransition("r", RETUR);
        RETUR.addTransition("n", RETURN);
        RETURN.addTransition(variable_chars, VARSTATE);
        S.addTransition("h", SH);
        SH.addTransition("o", SHO);
        SHO.addTransition("r", SHOR);
        SHOR.addTransition("t", SHORT);
        SHORT.addTransition(variable_chars, VARSTATE);
        S.addTransition("t", ST);
        ST.addTransition("a", STA);
        STA.addTransition("t", STAT);
        STAT.addTransition("i", STATI);
        STATI.addTransition("c", STATIC);
        STATIC.addTransition(variable_chars, VARSTATE);
        S.addTransition("t", ST);
        ST.addTransition("r", STR);
        STR.addTransition("i", STRI);
        STRI.addTransition("c", STRIC);
        STRIC.addTransition("t", STRICT);
        STRICT.addTransition("f", STRICTF);
        STRICTF.addTransition("p", STRICTFP);
        STRICTFP.addTransition(variable_chars, VARSTATE);
        S.addTransition("u", SU);
        SU.addTransition("p", SUP);
        SUP.addTransition("e", SUPE);
        SUPE.addTransition("r", SUPER);
        SUPER.addTransition(variable_chars, VARSTATE);
        S.addTransition("w", SW);
        SW.addTransition("i", SWI);
        SWI.addTransition("t", SWIT);
        SWIT.addTransition("c", SWITC);
        SWITC.addTransition("h", SWITCH);
        SWITCH.addTransition(variable_chars, VARSTATE);
        S.addTransition("y", SY);
        SY.addTransition("n", SYN);
        SYN.addTransition("c", SYNC);
        SYNC.addTransition("h", SYNCH);
        SYNCH.addTransition("r", SYNCHR);
        SYNCHR.addTransition("o", SYNCHRO);
        SYNCHRO.addTransition("n", SYNCHRON);
        SYNCHRON.addTransition("i", SYNCHRONI);
        SYNCHRONI.addTransition("z", SYNCHRONIZ);
        SYNCHRONIZ.addTransition("e", SYNCHRONIZE);
        SYNCHRONIZE.addTransition("d", SYNCHRONIZED);
        SYNCHRONIZED.addTransition(variable_chars, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("i", THI);
        THI.addTransition("s", THIS);
        THIS.addTransition(variable_chars, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("r", THR);
        THR.addTransition("o", THRO);
        THRO.addTransition("w", THROW);
        THROW.addTransition(variable_chars, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("r", THR);
        THR.addTransition("o", THRO);
        THRO.addTransition("w", THROW);
        THROW.addTransition("s", THROWS);
        THROWS.addTransition(variable_chars, VARSTATE);
        T.addTransition("r", TR);
        TR.addTransition("a", TRA);
        TRA.addTransition("n", TRAN);
        TRAN.addTransition("s", TRANS);
        TRANS.addTransition("i", TRANSI);
        TRANSI.addTransition("e", TRANSIE);
        TRANSIE.addTransition("n", TRANSIEN);
        TRANSIEN.addTransition("t", TRANSIENT);
        TRANSIENT.addTransition(variable_chars, VARSTATE);
        T.addTransition("r", TR);
        TR.addTransition("y", TRY);
        TRY.addTransition(variable_chars, VARSTATE);
        V.addTransition("a", VA);
        VA.addTransition("r", VAR);
        VAR.addTransition(variable_chars, VARSTATE);
        V.addTransition("o", VO);
        VO.addTransition("i", VOI);
        VOI.addTransition("d", VOID);
        VOID.addTransition(variable_chars, VARSTATE);
        V.addTransition("o", VO);
        VO.addTransition("l", VOL);
        VOL.addTransition("a", VOLA);
        VOLA.addTransition("t", VOLAT);
        VOLAT.addTransition("i", VOLATI);
        VOLATI.addTransition("l", VOLATIL);
        VOLATIL.addTransition("e", VOLATILE);
        VOLATILE.addTransition(variable_chars, VARSTATE);
        W.addTransition("h", WH);
        WH.addTransition("i", WHI);
        WHI.addTransition("l", WHIL);
        WHIL.addTransition("e", WHILE);
        WHILE.addTransition(variable_chars, VARSTATE);

        // All keywords could transition into a variable.
        A.addTransition(variable_chars, VARSTATE);
        AB.addTransition(variable_chars, VARSTATE);
        ABS.addTransition(variable_chars, VARSTATE);
        ABST.addTransition(variable_chars, VARSTATE);
        ABSTR.addTransition(variable_chars, VARSTATE);
        ABSTRA.addTransition(variable_chars, VARSTATE);
        ABSTRAC.addTransition(variable_chars, VARSTATE);
        A.addTransition(variable_chars, VARSTATE);
        AS.addTransition(variable_chars, VARSTATE);
        ASS.addTransition(variable_chars, VARSTATE);
        ASSE.addTransition(variable_chars, VARSTATE);
        ASSER.addTransition(variable_chars, VARSTATE);
        B.addTransition(variable_chars, VARSTATE);
        BO.addTransition(variable_chars, VARSTATE);
        BOO.addTransition(variable_chars, VARSTATE);
        BOOL.addTransition(variable_chars, VARSTATE);
        BOOLE.addTransition(variable_chars, VARSTATE);
        BOOLEA.addTransition(variable_chars, VARSTATE);
        B.addTransition(variable_chars, VARSTATE);
        BR.addTransition(variable_chars, VARSTATE);
        BRE.addTransition(variable_chars, VARSTATE);
        BREA.addTransition(variable_chars, VARSTATE);
        B.addTransition(variable_chars, VARSTATE);
        BY.addTransition(variable_chars, VARSTATE);
        BYT.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CA.addTransition(variable_chars, VARSTATE);
        CAS.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CA.addTransition(variable_chars, VARSTATE);
        CAT.addTransition(variable_chars, VARSTATE);
        CATC.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CH.addTransition(variable_chars, VARSTATE);
        CHA.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CL.addTransition(variable_chars, VARSTATE);
        CLA.addTransition(variable_chars, VARSTATE);
        CLAS.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CO.addTransition(variable_chars, VARSTATE);
        CON.addTransition(variable_chars, VARSTATE);
        CONT.addTransition(variable_chars, VARSTATE);
        CONTI.addTransition(variable_chars, VARSTATE);
        CONTIN.addTransition(variable_chars, VARSTATE);
        CONTINU.addTransition(variable_chars, VARSTATE);
        C.addTransition(variable_chars, VARSTATE);
        CO.addTransition(variable_chars, VARSTATE);
        CON.addTransition(variable_chars, VARSTATE);
        CONS.addTransition(variable_chars, VARSTATE);
        D.addTransition(variable_chars, VARSTATE);
        DE.addTransition(variable_chars, VARSTATE);
        DEF.addTransition(variable_chars, VARSTATE);
        DEFA.addTransition(variable_chars, VARSTATE);
        DEFAU.addTransition(variable_chars, VARSTATE);
        DEFAUL.addTransition(variable_chars, VARSTATE);
        D.addTransition(variable_chars, VARSTATE);
        D.addTransition(variable_chars, VARSTATE);
        DO.addTransition(variable_chars, VARSTATE);
        DOU.addTransition(variable_chars, VARSTATE);
        DOUB.addTransition(variable_chars, VARSTATE);
        DOUBL.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EL.addTransition(variable_chars, VARSTATE);
        ELS.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EN.addTransition(variable_chars, VARSTATE);
        ENU.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EX.addTransition(variable_chars, VARSTATE);
        EXP.addTransition(variable_chars, VARSTATE);
        EXPO.addTransition(variable_chars, VARSTATE);
        EXPOR.addTransition(variable_chars, VARSTATE);
        EXPORT.addTransition(variable_chars, VARSTATE);
        E.addTransition(variable_chars, VARSTATE);
        EX.addTransition(variable_chars, VARSTATE);
        EXT.addTransition(variable_chars, VARSTATE);
        EXTE.addTransition(variable_chars, VARSTATE);
        EXTEN.addTransition(variable_chars, VARSTATE);
        EXTEND.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FI.addTransition(variable_chars, VARSTATE);
        FIN.addTransition(variable_chars, VARSTATE);
        FINA.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FI.addTransition(variable_chars, VARSTATE);
        FIN.addTransition(variable_chars, VARSTATE);
        FINA.addTransition(variable_chars, VARSTATE);
        FINAL.addTransition(variable_chars, VARSTATE);
        FINALL.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FL.addTransition(variable_chars, VARSTATE);
        FLO.addTransition(variable_chars, VARSTATE);
        FLOA.addTransition(variable_chars, VARSTATE);
        F.addTransition(variable_chars, VARSTATE);
        FO.addTransition(variable_chars, VARSTATE);
        G.addTransition(variable_chars, VARSTATE);
        GO.addTransition(variable_chars, VARSTATE);
        GOT.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IM.addTransition(variable_chars, VARSTATE);
        IMP.addTransition(variable_chars, VARSTATE);
        IMPL.addTransition(variable_chars, VARSTATE);
        IMPLE.addTransition(variable_chars, VARSTATE);
        IMPLEM.addTransition(variable_chars, VARSTATE);
        IMPLEME.addTransition(variable_chars, VARSTATE);
        IMPLEMEN.addTransition(variable_chars, VARSTATE);
        IMPLEMENT.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IM.addTransition(variable_chars, VARSTATE);
        IMP.addTransition(variable_chars, VARSTATE);
        IMPO.addTransition(variable_chars, VARSTATE);
        IMPOR.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        INS.addTransition(variable_chars, VARSTATE);
        INST.addTransition(variable_chars, VARSTATE);
        INSTA.addTransition(variable_chars, VARSTATE);
        INSTAN.addTransition(variable_chars, VARSTATE);
        INSTANC.addTransition(variable_chars, VARSTATE);
        INSTANCE.addTransition(variable_chars, VARSTATE);
        INSTANCEO.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        I.addTransition(variable_chars, VARSTATE);
        IN.addTransition(variable_chars, VARSTATE);
        INT.addTransition(variable_chars, VARSTATE);
        INTE.addTransition(variable_chars, VARSTATE);
        INTER.addTransition(variable_chars, VARSTATE);
        INTERF.addTransition(variable_chars, VARSTATE);
        INTERFA.addTransition(variable_chars, VARSTATE);
        INTERFAC.addTransition(variable_chars, VARSTATE);
        L.addTransition(variable_chars, VARSTATE);
        LO.addTransition(variable_chars, VARSTATE);
        LON.addTransition(variable_chars, VARSTATE);
        M.addTransition(variable_chars, VARSTATE);
        MO.addTransition(variable_chars, VARSTATE);
        MOD.addTransition(variable_chars, VARSTATE);
        MODU.addTransition(variable_chars, VARSTATE);
        MODUL.addTransition(variable_chars, VARSTATE);
        N.addTransition(variable_chars, VARSTATE);
        NA.addTransition(variable_chars, VARSTATE);
        NAT.addTransition(variable_chars, VARSTATE);
        NATI.addTransition(variable_chars, VARSTATE);
        NATIV.addTransition(variable_chars, VARSTATE);
        N.addTransition(variable_chars, VARSTATE);
        NE.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PA.addTransition(variable_chars, VARSTATE);
        PAC.addTransition(variable_chars, VARSTATE);
        PACK.addTransition(variable_chars, VARSTATE);
        PACKA.addTransition(variable_chars, VARSTATE);
        PACKAG.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PR.addTransition(variable_chars, VARSTATE);
        PRI.addTransition(variable_chars, VARSTATE);
        PRIV.addTransition(variable_chars, VARSTATE);
        PRIVA.addTransition(variable_chars, VARSTATE);
        PRIVAT.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PR.addTransition(variable_chars, VARSTATE);
        PRO.addTransition(variable_chars, VARSTATE);
        PROT.addTransition(variable_chars, VARSTATE);
        PROTE.addTransition(variable_chars, VARSTATE);
        PROTEC.addTransition(variable_chars, VARSTATE);
        PROTECT.addTransition(variable_chars, VARSTATE);
        PROTECTE.addTransition(variable_chars, VARSTATE);
        P.addTransition(variable_chars, VARSTATE);
        PU.addTransition(variable_chars, VARSTATE);
        PUB.addTransition(variable_chars, VARSTATE);
        PUBL.addTransition(variable_chars, VARSTATE);
        PUBLI.addTransition(variable_chars, VARSTATE);
        R.addTransition(variable_chars, VARSTATE);
        RE.addTransition(variable_chars, VARSTATE);
        REQ.addTransition(variable_chars, VARSTATE);
        REQU.addTransition(variable_chars, VARSTATE);
        REQUI.addTransition(variable_chars, VARSTATE);
        REQUIR.addTransition(variable_chars, VARSTATE);
        REQUIRE.addTransition(variable_chars, VARSTATE);
        R.addTransition(variable_chars, VARSTATE);
        RE.addTransition(variable_chars, VARSTATE);
        RET.addTransition(variable_chars, VARSTATE);
        RETU.addTransition(variable_chars, VARSTATE);
        RETUR.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SH.addTransition(variable_chars, VARSTATE);
        SHO.addTransition(variable_chars, VARSTATE);
        SHOR.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        ST.addTransition(variable_chars, VARSTATE);
        STA.addTransition(variable_chars, VARSTATE);
        STAT.addTransition(variable_chars, VARSTATE);
        STATI.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        ST.addTransition(variable_chars, VARSTATE);
        STR.addTransition(variable_chars, VARSTATE);
        STRI.addTransition(variable_chars, VARSTATE);
        STRIC.addTransition(variable_chars, VARSTATE);
        STRICT.addTransition(variable_chars, VARSTATE);
        STRICTF.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SU.addTransition(variable_chars, VARSTATE);
        SUP.addTransition(variable_chars, VARSTATE);
        SUPE.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SW.addTransition(variable_chars, VARSTATE);
        SWI.addTransition(variable_chars, VARSTATE);
        SWIT.addTransition(variable_chars, VARSTATE);
        SWITC.addTransition(variable_chars, VARSTATE);
        S.addTransition(variable_chars, VARSTATE);
        SY.addTransition(variable_chars, VARSTATE);
        SYN.addTransition(variable_chars, VARSTATE);
        SYNC.addTransition(variable_chars, VARSTATE);
        SYNCH.addTransition(variable_chars, VARSTATE);
        SYNCHR.addTransition(variable_chars, VARSTATE);
        SYNCHRO.addTransition(variable_chars, VARSTATE);
        SYNCHRON.addTransition(variable_chars, VARSTATE);
        SYNCHRONI.addTransition(variable_chars, VARSTATE);
        SYNCHRONIZ.addTransition(variable_chars, VARSTATE);
        SYNCHRONIZE.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TH.addTransition(variable_chars, VARSTATE);
        THI.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TH.addTransition(variable_chars, VARSTATE);
        THR.addTransition(variable_chars, VARSTATE);
        THRO.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TH.addTransition(variable_chars, VARSTATE);
        THR.addTransition(variable_chars, VARSTATE);
        THRO.addTransition(variable_chars, VARSTATE);
        THROW.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TR.addTransition(variable_chars, VARSTATE);
        TRA.addTransition(variable_chars, VARSTATE);
        TRAN.addTransition(variable_chars, VARSTATE);
        TRANS.addTransition(variable_chars, VARSTATE);
        TRANSI.addTransition(variable_chars, VARSTATE);
        TRANSIE.addTransition(variable_chars, VARSTATE);
        TRANSIEN.addTransition(variable_chars, VARSTATE);
        T.addTransition(variable_chars, VARSTATE);
        TR.addTransition(variable_chars, VARSTATE);
        V.addTransition(variable_chars, VARSTATE);
        VA.addTransition(variable_chars, VARSTATE);
        V.addTransition(variable_chars, VARSTATE);
        VO.addTransition(variable_chars, VARSTATE);
        VOI.addTransition(variable_chars, VARSTATE);
        V.addTransition(variable_chars, VARSTATE);
        VO.addTransition(variable_chars, VARSTATE);
        VOL.addTransition(variable_chars, VARSTATE);
        VOLA.addTransition(variable_chars, VARSTATE);
        VOLAT.addTransition(variable_chars, VARSTATE);
        VOLATI.addTransition(variable_chars, VARSTATE);
        VOLATIL.addTransition(variable_chars, VARSTATE);
        W.addTransition(variable_chars, VARSTATE);
        WH.addTransition(variable_chars, VARSTATE);
        WHI.addTransition(variable_chars, VARSTATE);
        WHIL.addTransition(variable_chars, VARSTATE);
        FA.addTransition(variable_chars, VARSTATE);
        FAL.addTransition(variable_chars, VARSTATE);
        FALS.addTransition(variable_chars, VARSTATE);
        TRU.addTransition(variable_chars, VARSTATE);
        NU.addTransition(variable_chars, VARSTATE);
        NUL.addTransition(variable_chars, VARSTATE);

        VARSTATE.addTransition(variable_chars, VARSTATE);
    }
}