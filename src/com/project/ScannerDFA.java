package com.project;

@SuppressWarnings("SpellCheckingInspection")
class ScannerDFA {

    static State START_STATE = new State("Start", false, null);
    static State ERRSTATE = new State("ERR", false, null);

    static {
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = "abcdefghijklmnopqrstuvwxyz";
        String decNumbers = "0123456789";
        String octNumbers = "01234567";
        String hexNumbers = "0123456789ABCDFE";
        String notZeroNumbers = "123456789";
        String zero = "0";

        State A = new State("a", true, Kind.VARIABLE);
        State AB = new State("ab", true, Kind.VARIABLE);
        State ABS = new State("abs", true, Kind.VARIABLE);
        State ABST = new State("abst", true, Kind.VARIABLE);
        State ABSTR = new State("abstr", true, Kind.VARIABLE);
        State ABSTRA = new State("abstra", true, Kind.VARIABLE);
        State ABSTRAC = new State("abstrac", true, Kind.VARIABLE);
        State ABSTRACT = new State("abstract", true, Kind.ABSTRACT);
        State AS = new State("as", true, Kind.VARIABLE);
        State ASS = new State("ass", true, Kind.VARIABLE);
        State ASSE = new State("asse", true, Kind.VARIABLE);
        State ASSER = new State("asser", true, Kind.VARIABLE);
        State ASSERT = new State("assert", true, Kind.ASSERT);
        State B = new State("b", true, Kind.VARIABLE);
        State BO = new State("bo", true, Kind.VARIABLE);
        State BOO = new State("boo", true, Kind.VARIABLE);
        State BOOL = new State("bool", true, Kind.VARIABLE);
        State BOOLE = new State("boole", true, Kind.VARIABLE);
        State BOOLEA = new State("boolea", true, Kind.VARIABLE);
        State BOOLEAN = new State("boolean", true, Kind.BOOLEAN);
        State BR = new State("br", true, Kind.VARIABLE);
        State BRE = new State("bre", true, Kind.VARIABLE);
        State BREA = new State("brea", true, Kind.VARIABLE);
        State BREAK = new State("break", true, Kind.BREAK);
        State BY = new State("by", true, Kind.VARIABLE);
        State BYT = new State("byt", true, Kind.VARIABLE);
        State BYTE = new State("byte", true, Kind.BYTE);
        State C = new State("c", true, Kind.VARIABLE);
        State CA = new State("ca", true, Kind.VARIABLE);
        State CAS = new State("cas", true, Kind.VARIABLE);
        State CASE = new State("case", true, Kind.CASE);
        State CAT = new State("cat", true, Kind.VARIABLE);
        State CATC = new State("catc", true, Kind.VARIABLE);
        State CATCH = new State("catch", true, Kind.CATCH);
        State CH = new State("ch", true, Kind.VARIABLE);
        State CHA = new State("cha", true, Kind.VARIABLE);
        State CHAR = new State("char", true, Kind.CHAR);
        State CL = new State("cl", true, Kind.VARIABLE);
        State CLA = new State("cla", true, Kind.VARIABLE);
        State CLAS = new State("clas", true, Kind.VARIABLE);
        State CLASS = new State("class", true, Kind.CLASS);
        State CO = new State("co", true, Kind.VARIABLE);
        State CON = new State("con", true, Kind.VARIABLE);
        State CONT = new State("cont", true, Kind.VARIABLE);
        State CONTI = new State("conti", true, Kind.VARIABLE);
        State CONTIN = new State("contin", true, Kind.VARIABLE);
        State CONTINU = new State("continu", true, Kind.VARIABLE);
        State CONTINUE = new State("continue", true, Kind.CONTINUE);
        State CONS = new State("cons", true, Kind.VARIABLE);
        State CONST = new State("const", true, Kind.CONST);
        State D = new State("d", true, Kind.VARIABLE);
        State DE = new State("de", true, Kind.VARIABLE);
        State DEF = new State("def", true, Kind.VARIABLE);
        State DEFA = new State("defa", true, Kind.VARIABLE);
        State DEFAU = new State("defau", true, Kind.VARIABLE);
        State DEFAUL = new State("defaul", true, Kind.VARIABLE);
        State DEFAULT = new State("default", true, Kind.DEFAULT);
        State DO = new State("do", true, Kind.DO);
        State DOU = new State("dou", true, Kind.VARIABLE);
        State DOUB = new State("doub", true, Kind.VARIABLE);
        State DOUBL = new State("doubl", true, Kind.VARIABLE);
        State DOUBLE = new State("double", true, Kind.DOUBLE);
        State E = new State("e", true, Kind.VARIABLE);
        State EL = new State("el", true, Kind.VARIABLE);
        State ELS = new State("els", true, Kind.VARIABLE);
        State ELSE = new State("else", true, Kind.ELSE);
        State EN = new State("en", true, Kind.VARIABLE);
        State ENU = new State("enu", true, Kind.VARIABLE);
        State ENUM = new State("enum", true, Kind.ENUM);
        State EX = new State("ex", true, Kind.VARIABLE);
        State EXP = new State("exp", true, Kind.VARIABLE);
        State EXPO = new State("expo", true, Kind.VARIABLE);
        State EXPOR = new State("expor", true, Kind.VARIABLE);
        State EXPORT = new State("export", true, Kind.VARIABLE);
        State EXPORTS = new State("exports", true, Kind.EXPORTS);
        State EXT = new State("ext", true, Kind.VARIABLE);
        State EXTE = new State("exte", true, Kind.VARIABLE);
        State EXTEN = new State("exten", true, Kind.VARIABLE);
        State EXTEND = new State("extend", true, Kind.VARIABLE);
        State EXTENDS = new State("extends", true, Kind.EXTENDS);
        State F = new State("f", true, Kind.VARIABLE);
        State FI = new State("fi", true, Kind.VARIABLE);
        State FIN = new State("fin", true, Kind.VARIABLE);
        State FINA = new State("fina", true, Kind.VARIABLE);
        State FINAL = new State("final", true, Kind.FINAL);
        State FINALL = new State("finall", true, Kind.VARIABLE);
        State FINALLY = new State("finally", true, Kind.FINALLY);
        State FL = new State("fl", true, Kind.VARIABLE);
        State FLO = new State("flo", true, Kind.VARIABLE);
        State FLOA = new State("floa", true, Kind.VARIABLE);
        State FLOAT = new State("float", true, Kind.FLOAT);
        State FO = new State("fo", true, Kind.VARIABLE);
        State FOR = new State("for", true, Kind.FOR);
        State G = new State("g", true, Kind.VARIABLE);
        State GO = new State("go", true, Kind.VARIABLE);
        State GOT = new State("got", true, Kind.VARIABLE);
        State GOTO = new State("goto", true, Kind.GOTO);
        State I = new State("i", true, Kind.VARIABLE);
        State IF = new State("if", true, Kind.IF);
        State IM = new State("im", true, Kind.VARIABLE);
        State IMP = new State("imp", true, Kind.VARIABLE);
        State IMPL = new State("impl", true, Kind.VARIABLE);
        State IMPLE = new State("imple", true, Kind.VARIABLE);
        State IMPLEM = new State("implem", true, Kind.VARIABLE);
        State IMPLEME = new State("impleme", true, Kind.VARIABLE);
        State IMPLEMEN = new State("implemen", true, Kind.VARIABLE);
        State IMPLEMENT = new State("implement", true, Kind.VARIABLE);
        State IMPLEMENTS = new State("implements", true, Kind.IMPLEMENTS);
        State IMPO = new State("impo", true, Kind.VARIABLE);
        State IMPOR = new State("impor", true, Kind.VARIABLE);
        State IMPORT = new State("import", true, Kind.IMPORT);
        State IN = new State("in", true, Kind.VARIABLE);
        State INS = new State("ins", true, Kind.VARIABLE);
        State INST = new State("inst", true, Kind.VARIABLE);
        State INSTA = new State("insta", true, Kind.VARIABLE);
        State INSTAN = new State("instan", true, Kind.VARIABLE);
        State INSTANC = new State("instanc", true, Kind.VARIABLE);
        State INSTANCE = new State("instance", true, Kind.VARIABLE);
        State INSTANCEO = new State("instanceo", true, Kind.VARIABLE);
        State INSTANCEOF = new State("instanceof", true, Kind.INSTANCEOF);
        State INT = new State("int", true, Kind.INT);
        State INTE = new State("inte", true, Kind.VARIABLE);
        State INTER = new State("inter", true, Kind.VARIABLE);
        State INTERF = new State("interf", true, Kind.VARIABLE);
        State INTERFA = new State("interfa", true, Kind.VARIABLE);
        State INTERFAC = new State("interfac", true, Kind.VARIABLE);
        State INTERFACE = new State("interface", true, Kind.INTERFACE);
        State L = new State("l", true, Kind.VARIABLE);
        State LO = new State("lo", true, Kind.VARIABLE);
        State LON = new State("lon", true, Kind.VARIABLE);
        State LONG = new State("long", true, Kind.LONG);
        State M = new State("m", true, Kind.VARIABLE);
        State MO = new State("mo", true, Kind.VARIABLE);
        State MOD = new State("mod", true, Kind.VARIABLE);
        State MODU = new State("modu", true, Kind.VARIABLE);
        State MODUL = new State("modul", true, Kind.VARIABLE);
        State MODULE = new State("module", true, Kind.MODULE);
        State N = new State("n", true, Kind.VARIABLE);
        State NA = new State("na", true, Kind.VARIABLE);
        State NAT = new State("nat", true, Kind.VARIABLE);
        State NATI = new State("nati", true, Kind.VARIABLE);
        State NATIV = new State("nativ", true, Kind.VARIABLE);
        State NATIVE = new State("native", true, Kind.NATIVE);
        State NE = new State("ne", true, Kind.VARIABLE);
        State NEW = new State("new", true, Kind.NEW);
        State P = new State("p", true, Kind.VARIABLE);
        State PA = new State("pa", true, Kind.VARIABLE);
        State PAC = new State("pac", true, Kind.VARIABLE);
        State PACK = new State("pack", true, Kind.VARIABLE);
        State PACKA = new State("packa", true, Kind.VARIABLE);
        State PACKAG = new State("packag", true, Kind.VARIABLE);
        State PACKAGE = new State("package", true, Kind.PACKAGE);
        State PR = new State("pr", true, Kind.VARIABLE);
        State PRI = new State("pri", true, Kind.VARIABLE);
        State PRIV = new State("priv", true, Kind.VARIABLE);
        State PRIVA = new State("priva", true, Kind.VARIABLE);
        State PRIVAT = new State("privat", true, Kind.VARIABLE);
        State PRIVATE = new State("private", true, Kind.PRIVATE);
        State PRO = new State("pro", true, Kind.VARIABLE);
        State PROT = new State("prot", true, Kind.VARIABLE);
        State PROTE = new State("prote", true, Kind.VARIABLE);
        State PROTEC = new State("protec", true, Kind.VARIABLE);
        State PROTECT = new State("protect", true, Kind.VARIABLE);
        State PROTECTE = new State("protecte", true, Kind.VARIABLE);
        State PROTECTED = new State("protected", true, Kind.PROTECTED);
        State PU = new State("pu", true, Kind.VARIABLE);
        State PUB = new State("pub", true, Kind.VARIABLE);
        State PUBL = new State("publ", true, Kind.VARIABLE);
        State PUBLI = new State("publi", true, Kind.VARIABLE);
        State PUBLIC = new State("public", true, Kind.PUBLIC);
        State R = new State("r", true, Kind.VARIABLE);
        State RE = new State("re", true, Kind.VARIABLE);
        State REQ = new State("req", true, Kind.VARIABLE);
        State REQU = new State("requ", true, Kind.VARIABLE);
        State REQUI = new State("requi", true, Kind.VARIABLE);
        State REQUIR = new State("requir", true, Kind.VARIABLE);
        State REQUIRE = new State("require", true, Kind.VARIABLE);
        State REQUIRES = new State("requires", true, Kind.REQUIRES);
        State RET = new State("ret", true, Kind.VARIABLE);
        State RETU = new State("retu", true, Kind.VARIABLE);
        State RETUR = new State("retur", true, Kind.VARIABLE);
        State RETURN = new State("return", true, Kind.RETURN);
        State S = new State("s", true, Kind.VARIABLE);
        State SH = new State("sh", true, Kind.VARIABLE);
        State SHO = new State("sho", true, Kind.VARIABLE);
        State SHOR = new State("shor", true, Kind.VARIABLE);
        State SHORT = new State("short", true, Kind.SHORT);
        State ST = new State("st", true, Kind.VARIABLE);
        State STA = new State("sta", true, Kind.VARIABLE);
        State STAT = new State("stat", true, Kind.VARIABLE);
        State STATI = new State("stati", true, Kind.VARIABLE);
        State STATIC = new State("static", true, Kind.STATIC);
        State STR = new State("str", true, Kind.VARIABLE);
        State STRI = new State("stri", true, Kind.VARIABLE);
        State STRIC = new State("stric", true, Kind.VARIABLE);
        State STRICT = new State("strict", true, Kind.VARIABLE);
        State STRICTF = new State("strictf", true, Kind.VARIABLE);
        State STRICTFP = new State("strictfp", true, Kind.STRICTFP);
        State SU = new State("su", true, Kind.VARIABLE);
        State SUP = new State("sup", true, Kind.VARIABLE);
        State SUPE = new State("supe", true, Kind.VARIABLE);
        State SUPER = new State("super", true, Kind.SUPER);
        State SW = new State("sw", true, Kind.VARIABLE);
        State SWI = new State("swi", true, Kind.VARIABLE);
        State SWIT = new State("swit", true, Kind.VARIABLE);
        State SWITC = new State("switc", true, Kind.VARIABLE);
        State SWITCH = new State("switch", true, Kind.SWITCH);
        State SY = new State("sy", true, Kind.VARIABLE);
        State SYN = new State("syn", true, Kind.VARIABLE);
        State SYNC = new State("sync", true, Kind.VARIABLE);
        State SYNCH = new State("synch", true, Kind.VARIABLE);
        State SYNCHR = new State("synchr", true, Kind.VARIABLE);
        State SYNCHRO = new State("synchro", true, Kind.VARIABLE);
        State SYNCHRON = new State("synchron", true, Kind.VARIABLE);
        State SYNCHRONI = new State("synchroni", true, Kind.VARIABLE);
        State SYNCHRONIZ = new State("synchroniz", true, Kind.VARIABLE);
        State SYNCHRONIZE = new State("synchronize", true, Kind.VARIABLE);
        State SYNCHRONIZED = new State("synchronized", true, Kind.SYNCHRONIZED);
        State T = new State("t", true, Kind.VARIABLE);
        State TH = new State("th", true, Kind.VARIABLE);
        State THI = new State("thi", true, Kind.VARIABLE);
        State THIS = new State("this", true, Kind.THIS);
        State THR = new State("thr", true, Kind.VARIABLE);
        State THRO = new State("thro", true, Kind.VARIABLE);
        State THROW = new State("throw", true, Kind.THROW);
        State THROWS = new State("throws", true, Kind.THROWS);
        State TR = new State("tr", true, Kind.VARIABLE);
        State TRA = new State("tra", true, Kind.VARIABLE);
        State TRAN = new State("tran", true, Kind.VARIABLE);
        State TRANS = new State("trans", true, Kind.VARIABLE);
        State TRANSI = new State("transi", true, Kind.VARIABLE);
        State TRANSIE = new State("transie", true, Kind.VARIABLE);
        State TRANSIEN = new State("transien", true, Kind.VARIABLE);
        State TRANSIENT = new State("transient", true, Kind.TRANSIENT);
        State TRY = new State("try", true, Kind.TRY);
        State V = new State("v", true, Kind.VARIABLE);
        State VA = new State("va", true, Kind.VARIABLE);
        State VAR = new State("var", true, Kind.VAR);
        State VO = new State("vo", true, Kind.VARIABLE);
        State VOI = new State("voi", true, Kind.VARIABLE);
        State VOID = new State("void", true, Kind.VOID);
        State VOL = new State("vol", true, Kind.VARIABLE);
        State VOLA = new State("vola", true, Kind.VARIABLE);
        State VOLAT = new State("volat", true, Kind.VARIABLE);
        State VOLATI = new State("volati", true, Kind.VARIABLE);
        State VOLATIL = new State("volatil", true, Kind.VARIABLE);
        State VOLATILE = new State("volatile", true, Kind.VOLATILE);
        State W = new State("w", true, Kind.VARIABLE);
        State WH = new State("wh", true, Kind.VARIABLE);
        State WHI = new State("whi", true, Kind.VARIABLE);
        State WHIL = new State("whil", true, Kind.VARIABLE);
        State WHILE = new State("while", true, Kind.WHILE);

        State VARSTATE = new State("varstate", true, Kind.VARIABLE);

        State ZERO = new State("zero", true, Kind.DECNUM);
        State HEXSTART = new State("hextart", false, null);
        State DECNUM = new State("decnum", true, Kind.DECNUM);
        State OCTNUM = new State("octnum", true, Kind.OCTNUM);
        State HEXNUM = new State("hexnum", true, Kind.HEXNUM);

        START_STATE.addTransition(zero, ZERO);
        START_STATE.addTransition(notZeroNumbers, DECNUM);
        START_STATE.addTransition("a", A);
        START_STATE.addTransition("b", B);
        START_STATE.addTransition("c", C);
        START_STATE.addTransition("d", D);
        START_STATE.addTransition("e", E);
        START_STATE.addTransition("f", F);
        START_STATE.addTransition("g", G);
        START_STATE.addTransition("i", I);
        START_STATE.addTransition("l", L);
        START_STATE.addTransition("m", M);
        START_STATE.addTransition("n", N);
        START_STATE.addTransition("p", P);
        START_STATE.addTransition("r", R);
        START_STATE.addTransition("s", S);
        START_STATE.addTransition("t", T);
        START_STATE.addTransition("v", V);
        START_STATE.addTransition("w", W);
        START_STATE.addTransition(upper + lower, VARSTATE);

        ZERO.addTransition(octNumbers, OCTNUM);
        ZERO.addTransition("x", HEXSTART);
        HEXSTART.addTransition(hexNumbers, HEXNUM);
        DECNUM.addTransition(decNumbers, DECNUM);
        HEXNUM.addTransition(hexNumbers, HEXNUM);
        OCTNUM.addTransition(octNumbers, OCTNUM);

        A.addTransition("b", AB);
        AB.addTransition("s", ABS);
        ABS.addTransition("t", ABST);
        ABST.addTransition("r", ABSTR);
        ABSTR.addTransition("a", ABSTRA);
        ABSTRA.addTransition("c", ABSTRAC);
        ABSTRAC.addTransition("t", ABSTRACT);
        ABSTRACT.addTransition(upper + lower + decNumbers, VARSTATE);
        A.addTransition("s", AS);
        AS.addTransition("s", ASS);
        ASS.addTransition("e", ASSE);
        ASSE.addTransition("r", ASSER);
        ASSER.addTransition("t", ASSERT);
        ASSERT.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition("o", BO);
        BO.addTransition("o", BOO);
        BOO.addTransition("l", BOOL);
        BOOL.addTransition("e", BOOLE);
        BOOLE.addTransition("a", BOOLEA);
        BOOLEA.addTransition("n", BOOLEAN);
        BOOLEAN.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition("r", BR);
        BR.addTransition("e", BRE);
        BRE.addTransition("a", BREA);
        BREA.addTransition("k", BREAK);
        BREAK.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition("y", BY);
        BY.addTransition("t", BYT);
        BYT.addTransition("e", BYTE);
        BYTE.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("a", CA);
        CA.addTransition("s", CAS);
        CAS.addTransition("e", CASE);
        CASE.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("a", CA);
        CA.addTransition("t", CAT);
        CAT.addTransition("c", CATC);
        CATC.addTransition("h", CATCH);
        CATCH.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("h", CH);
        CH.addTransition("a", CHA);
        CHA.addTransition("r", CHAR);
        CHAR.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("l", CL);
        CL.addTransition("a", CLA);
        CLA.addTransition("s", CLAS);
        CLAS.addTransition("s", CLASS);
        CLASS.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("o", CO);
        CO.addTransition("n", CON);
        CON.addTransition("t", CONT);
        CONT.addTransition("i", CONTI);
        CONTI.addTransition("n", CONTIN);
        CONTIN.addTransition("u", CONTINU);
        CONTINU.addTransition("e", CONTINUE);
        CONTINUE.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition("o", CO);
        CO.addTransition("n", CON);
        CON.addTransition("s", CONS);
        CONS.addTransition("t", CONST);
        CONST.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition("e", DE);
        DE.addTransition("f", DEF);
        DEF.addTransition("a", DEFA);
        DEFA.addTransition("u", DEFAU);
        DEFAU.addTransition("l", DEFAUL);
        DEFAUL.addTransition("t", DEFAULT);
        DEFAULT.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition("o", DO);
        DO.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition("o", DO);
        DO.addTransition("u", DOU);
        DOU.addTransition("b", DOUB);
        DOUB.addTransition("l", DOUBL);
        DOUBL.addTransition("e", DOUBLE);
        DOUBLE.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition("l", EL);
        EL.addTransition("s", ELS);
        ELS.addTransition("e", ELSE);
        ELSE.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition("n", EN);
        EN.addTransition("u", ENU);
        ENU.addTransition("m", ENUM);
        ENUM.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition("x", EX);
        EX.addTransition("p", EXP);
        EXP.addTransition("o", EXPO);
        EXPO.addTransition("r", EXPOR);
        EXPOR.addTransition("t", EXPORT);
        EXPORT.addTransition("s", EXPORTS);
        EXPORTS.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition("x", EX);
        EX.addTransition("t", EXT);
        EXT.addTransition("e", EXTE);
        EXTE.addTransition("n", EXTEN);
        EXTEN.addTransition("d", EXTEND);
        EXTEND.addTransition("s", EXTENDS);
        EXTENDS.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition("i", FI);
        FI.addTransition("n", FIN);
        FIN.addTransition("a", FINA);
        FINA.addTransition("l", FINAL);
        FINAL.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition("i", FI);
        FI.addTransition("n", FIN);
        FIN.addTransition("a", FINA);
        FINA.addTransition("l", FINAL);
        FINAL.addTransition("l", FINALL);
        FINALL.addTransition("y", FINALLY);
        FINALLY.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition("l", FL);
        FL.addTransition("o", FLO);
        FLO.addTransition("a", FLOA);
        FLOA.addTransition("t", FLOAT);
        FLOAT.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition("o", FO);
        FO.addTransition("r", FOR);
        FOR.addTransition(upper + lower + decNumbers, VARSTATE);
        G.addTransition("o", GO);
        GO.addTransition("t", GOT);
        GOT.addTransition("o", GOTO);
        GOTO.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("f", IF);
        IF.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("l", IMPL);
        IMPL.addTransition("e", IMPLE);
        IMPLE.addTransition("m", IMPLEM);
        IMPLEM.addTransition("e", IMPLEME);
        IMPLEME.addTransition("n", IMPLEMEN);
        IMPLEMEN.addTransition("t", IMPLEMENT);
        IMPLEMENT.addTransition("s", IMPLEMENTS);
        IMPLEMENTS.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("m", IM);
        IM.addTransition("p", IMP);
        IMP.addTransition("o", IMPO);
        IMPO.addTransition("r", IMPOR);
        IMPOR.addTransition("t", IMPORT);
        IMPORT.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("s", INS);
        INS.addTransition("t", INST);
        INST.addTransition("a", INSTA);
        INSTA.addTransition("n", INSTAN);
        INSTAN.addTransition("c", INSTANC);
        INSTANC.addTransition("e", INSTANCE);
        INSTANCE.addTransition("o", INSTANCEO);
        INSTANCEO.addTransition("f", INSTANCEOF);
        INSTANCEOF.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INT.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition("n", IN);
        IN.addTransition("t", INT);
        INT.addTransition("e", INTE);
        INTE.addTransition("r", INTER);
        INTER.addTransition("f", INTERF);
        INTERF.addTransition("a", INTERFA);
        INTERFA.addTransition("c", INTERFAC);
        INTERFAC.addTransition("e", INTERFACE);
        INTERFACE.addTransition(upper + lower + decNumbers, VARSTATE);
        L.addTransition("o", LO);
        LO.addTransition("n", LON);
        LON.addTransition("g", LONG);
        LONG.addTransition(upper + lower + decNumbers, VARSTATE);
        M.addTransition("o", MO);
        MO.addTransition("d", MOD);
        MOD.addTransition("u", MODU);
        MODU.addTransition("l", MODUL);
        MODUL.addTransition("e", MODULE);
        MODULE.addTransition(upper + lower + decNumbers, VARSTATE);
        N.addTransition("a", NA);
        NA.addTransition("t", NAT);
        NAT.addTransition("i", NATI);
        NATI.addTransition("v", NATIV);
        NATIV.addTransition("e", NATIVE);
        NATIVE.addTransition(upper + lower + decNumbers, VARSTATE);
        N.addTransition("e", NE);
        NE.addTransition("w", NEW);
        NEW.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition("a", PA);
        PA.addTransition("c", PAC);
        PAC.addTransition("k", PACK);
        PACK.addTransition("a", PACKA);
        PACKA.addTransition("g", PACKAG);
        PACKAG.addTransition("e", PACKAGE);
        PACKAGE.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition("r", PR);
        PR.addTransition("i", PRI);
        PRI.addTransition("v", PRIV);
        PRIV.addTransition("a", PRIVA);
        PRIVA.addTransition("t", PRIVAT);
        PRIVAT.addTransition("e", PRIVATE);
        PRIVATE.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition("r", PR);
        PR.addTransition("o", PRO);
        PRO.addTransition("t", PROT);
        PROT.addTransition("e", PROTE);
        PROTE.addTransition("c", PROTEC);
        PROTEC.addTransition("t", PROTECT);
        PROTECT.addTransition("e", PROTECTE);
        PROTECTE.addTransition("d", PROTECTED);
        PROTECTED.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition("u", PU);
        PU.addTransition("b", PUB);
        PUB.addTransition("l", PUBL);
        PUBL.addTransition("i", PUBLI);
        PUBLI.addTransition("c", PUBLIC);
        PUBLIC.addTransition(upper + lower + decNumbers, VARSTATE);
        R.addTransition("e", RE);
        RE.addTransition("q", REQ);
        REQ.addTransition("u", REQU);
        REQU.addTransition("i", REQUI);
        REQUI.addTransition("r", REQUIR);
        REQUIR.addTransition("e", REQUIRE);
        REQUIRE.addTransition("s", REQUIRES);
        REQUIRES.addTransition(upper + lower + decNumbers, VARSTATE);
        R.addTransition("e", RE);
        RE.addTransition("t", RET);
        RET.addTransition("u", RETU);
        RETU.addTransition("r", RETUR);
        RETUR.addTransition("n", RETURN);
        RETURN.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("h", SH);
        SH.addTransition("o", SHO);
        SHO.addTransition("r", SHOR);
        SHOR.addTransition("t", SHORT);
        SHORT.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("t", ST);
        ST.addTransition("a", STA);
        STA.addTransition("t", STAT);
        STAT.addTransition("i", STATI);
        STATI.addTransition("c", STATIC);
        STATIC.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("t", ST);
        ST.addTransition("r", STR);
        STR.addTransition("i", STRI);
        STRI.addTransition("c", STRIC);
        STRIC.addTransition("t", STRICT);
        STRICT.addTransition("f", STRICTF);
        STRICTF.addTransition("p", STRICTFP);
        STRICTFP.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("u", SU);
        SU.addTransition("p", SUP);
        SUP.addTransition("e", SUPE);
        SUPE.addTransition("r", SUPER);
        SUPER.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("w", SW);
        SW.addTransition("i", SWI);
        SWI.addTransition("t", SWIT);
        SWIT.addTransition("c", SWITC);
        SWITC.addTransition("h", SWITCH);
        SWITCH.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition("y", SY);
        SY.addTransition("n", SYN);
        SYN.addTransition("c", SYNC);
        SYNC.addTransition("h", SYNCH);
        SYNCH.addTransition("r", SYNCHR);
        SYNCHR.addTransition("o", SYNCHRO);
        SYNCHRO.addTransition("n", SYNCHRON);
        SYNCHRON.addTransition("i", SYNCHRONI);
        SYNCHRONI.addTransition("z", SYNCHRONIZ);
        SYNCHRONIZ.addTransition("e", SYNCHRONIZE);
        SYNCHRONIZE.addTransition("d", SYNCHRONIZED);
        SYNCHRONIZED.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("i", THI);
        THI.addTransition("s", THIS);
        THIS.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("r", THR);
        THR.addTransition("o", THRO);
        THRO.addTransition("w", THROW);
        THROW.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition("h", TH);
        TH.addTransition("r", THR);
        THR.addTransition("o", THRO);
        THRO.addTransition("w", THROW);
        THROW.addTransition("s", THROWS);
        THROWS.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition("r", TR);
        TR.addTransition("a", TRA);
        TRA.addTransition("n", TRAN);
        TRAN.addTransition("s", TRANS);
        TRANS.addTransition("i", TRANSI);
        TRANSI.addTransition("e", TRANSIE);
        TRANSIE.addTransition("n", TRANSIEN);
        TRANSIEN.addTransition("t", TRANSIENT);
        TRANSIENT.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition("r", TR);
        TR.addTransition("y", TRY);
        TRY.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition("a", VA);
        VA.addTransition("r", VAR);
        VAR.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition("o", VO);
        VO.addTransition("i", VOI);
        VOI.addTransition("d", VOID);
        VOID.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition("o", VO);
        VO.addTransition("l", VOL);
        VOL.addTransition("a", VOLA);
        VOLA.addTransition("t", VOLAT);
        VOLAT.addTransition("i", VOLATI);
        VOLATI.addTransition("l", VOLATIL);
        VOLATIL.addTransition("e", VOLATILE);
        VOLATILE.addTransition(upper + lower + decNumbers, VARSTATE);
        W.addTransition("h", WH);
        WH.addTransition("i", WHI);
        WHI.addTransition("l", WHIL);
        WHIL.addTransition("e", WHILE);
        WHILE.addTransition(upper + lower + decNumbers, VARSTATE);

        A.addTransition(upper + lower + decNumbers, VARSTATE);
        AB.addTransition(upper + lower + decNumbers, VARSTATE);
        ABS.addTransition(upper + lower + decNumbers, VARSTATE);
        ABST.addTransition(upper + lower + decNumbers, VARSTATE);
        ABSTR.addTransition(upper + lower + decNumbers, VARSTATE);
        ABSTRA.addTransition(upper + lower + decNumbers, VARSTATE);
        ABSTRAC.addTransition(upper + lower + decNumbers, VARSTATE);
        A.addTransition(upper + lower + decNumbers, VARSTATE);
        AS.addTransition(upper + lower + decNumbers, VARSTATE);
        ASS.addTransition(upper + lower + decNumbers, VARSTATE);
        ASSE.addTransition(upper + lower + decNumbers, VARSTATE);
        ASSER.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition(upper + lower + decNumbers, VARSTATE);
        BO.addTransition(upper + lower + decNumbers, VARSTATE);
        BOO.addTransition(upper + lower + decNumbers, VARSTATE);
        BOOL.addTransition(upper + lower + decNumbers, VARSTATE);
        BOOLE.addTransition(upper + lower + decNumbers, VARSTATE);
        BOOLEA.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition(upper + lower + decNumbers, VARSTATE);
        BR.addTransition(upper + lower + decNumbers, VARSTATE);
        BRE.addTransition(upper + lower + decNumbers, VARSTATE);
        BREA.addTransition(upper + lower + decNumbers, VARSTATE);
        B.addTransition(upper + lower + decNumbers, VARSTATE);
        BY.addTransition(upper + lower + decNumbers, VARSTATE);
        BYT.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CA.addTransition(upper + lower + decNumbers, VARSTATE);
        CAS.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CA.addTransition(upper + lower + decNumbers, VARSTATE);
        CAT.addTransition(upper + lower + decNumbers, VARSTATE);
        CATC.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CH.addTransition(upper + lower + decNumbers, VARSTATE);
        CHA.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CL.addTransition(upper + lower + decNumbers, VARSTATE);
        CLA.addTransition(upper + lower + decNumbers, VARSTATE);
        CLAS.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CO.addTransition(upper + lower + decNumbers, VARSTATE);
        CON.addTransition(upper + lower + decNumbers, VARSTATE);
        CONT.addTransition(upper + lower + decNumbers, VARSTATE);
        CONTI.addTransition(upper + lower + decNumbers, VARSTATE);
        CONTIN.addTransition(upper + lower + decNumbers, VARSTATE);
        CONTINU.addTransition(upper + lower + decNumbers, VARSTATE);
        C.addTransition(upper + lower + decNumbers, VARSTATE);
        CO.addTransition(upper + lower + decNumbers, VARSTATE);
        CON.addTransition(upper + lower + decNumbers, VARSTATE);
        CONS.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition(upper + lower + decNumbers, VARSTATE);
        DE.addTransition(upper + lower + decNumbers, VARSTATE);
        DEF.addTransition(upper + lower + decNumbers, VARSTATE);
        DEFA.addTransition(upper + lower + decNumbers, VARSTATE);
        DEFAU.addTransition(upper + lower + decNumbers, VARSTATE);
        DEFAUL.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition(upper + lower + decNumbers, VARSTATE);
        D.addTransition(upper + lower + decNumbers, VARSTATE);
        DO.addTransition(upper + lower + decNumbers, VARSTATE);
        DOU.addTransition(upper + lower + decNumbers, VARSTATE);
        DOUB.addTransition(upper + lower + decNumbers, VARSTATE);
        DOUBL.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition(upper + lower + decNumbers, VARSTATE);
        EL.addTransition(upper + lower + decNumbers, VARSTATE);
        ELS.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition(upper + lower + decNumbers, VARSTATE);
        EN.addTransition(upper + lower + decNumbers, VARSTATE);
        ENU.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition(upper + lower + decNumbers, VARSTATE);
        EX.addTransition(upper + lower + decNumbers, VARSTATE);
        EXP.addTransition(upper + lower + decNumbers, VARSTATE);
        EXPO.addTransition(upper + lower + decNumbers, VARSTATE);
        EXPOR.addTransition(upper + lower + decNumbers, VARSTATE);
        EXPORT.addTransition(upper + lower + decNumbers, VARSTATE);
        E.addTransition(upper + lower + decNumbers, VARSTATE);
        EX.addTransition(upper + lower + decNumbers, VARSTATE);
        EXT.addTransition(upper + lower + decNumbers, VARSTATE);
        EXTE.addTransition(upper + lower + decNumbers, VARSTATE);
        EXTEN.addTransition(upper + lower + decNumbers, VARSTATE);
        EXTEND.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition(upper + lower + decNumbers, VARSTATE);
        FI.addTransition(upper + lower + decNumbers, VARSTATE);
        FIN.addTransition(upper + lower + decNumbers, VARSTATE);
        FINA.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition(upper + lower + decNumbers, VARSTATE);
        FI.addTransition(upper + lower + decNumbers, VARSTATE);
        FIN.addTransition(upper + lower + decNumbers, VARSTATE);
        FINA.addTransition(upper + lower + decNumbers, VARSTATE);
        FINAL.addTransition(upper + lower + decNumbers, VARSTATE);
        FINALL.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition(upper + lower + decNumbers, VARSTATE);
        FL.addTransition(upper + lower + decNumbers, VARSTATE);
        FLO.addTransition(upper + lower + decNumbers, VARSTATE);
        FLOA.addTransition(upper + lower + decNumbers, VARSTATE);
        F.addTransition(upper + lower + decNumbers, VARSTATE);
        FO.addTransition(upper + lower + decNumbers, VARSTATE);
        G.addTransition(upper + lower + decNumbers, VARSTATE);
        GO.addTransition(upper + lower + decNumbers, VARSTATE);
        GOT.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        IM.addTransition(upper + lower + decNumbers, VARSTATE);
        IMP.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPL.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPLE.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPLEM.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPLEME.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPLEMEN.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPLEMENT.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        IM.addTransition(upper + lower + decNumbers, VARSTATE);
        IMP.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPO.addTransition(upper + lower + decNumbers, VARSTATE);
        IMPOR.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        IN.addTransition(upper + lower + decNumbers, VARSTATE);
        INS.addTransition(upper + lower + decNumbers, VARSTATE);
        INST.addTransition(upper + lower + decNumbers, VARSTATE);
        INSTA.addTransition(upper + lower + decNumbers, VARSTATE);
        INSTAN.addTransition(upper + lower + decNumbers, VARSTATE);
        INSTANC.addTransition(upper + lower + decNumbers, VARSTATE);
        INSTANCE.addTransition(upper + lower + decNumbers, VARSTATE);
        INSTANCEO.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        IN.addTransition(upper + lower + decNumbers, VARSTATE);
        I.addTransition(upper + lower + decNumbers, VARSTATE);
        IN.addTransition(upper + lower + decNumbers, VARSTATE);
        INT.addTransition(upper + lower + decNumbers, VARSTATE);
        INTE.addTransition(upper + lower + decNumbers, VARSTATE);
        INTER.addTransition(upper + lower + decNumbers, VARSTATE);
        INTERF.addTransition(upper + lower + decNumbers, VARSTATE);
        INTERFA.addTransition(upper + lower + decNumbers, VARSTATE);
        INTERFAC.addTransition(upper + lower + decNumbers, VARSTATE);
        L.addTransition(upper + lower + decNumbers, VARSTATE);
        LO.addTransition(upper + lower + decNumbers, VARSTATE);
        LON.addTransition(upper + lower + decNumbers, VARSTATE);
        M.addTransition(upper + lower + decNumbers, VARSTATE);
        MO.addTransition(upper + lower + decNumbers, VARSTATE);
        MOD.addTransition(upper + lower + decNumbers, VARSTATE);
        MODU.addTransition(upper + lower + decNumbers, VARSTATE);
        MODUL.addTransition(upper + lower + decNumbers, VARSTATE);
        N.addTransition(upper + lower + decNumbers, VARSTATE);
        NA.addTransition(upper + lower + decNumbers, VARSTATE);
        NAT.addTransition(upper + lower + decNumbers, VARSTATE);
        NATI.addTransition(upper + lower + decNumbers, VARSTATE);
        NATIV.addTransition(upper + lower + decNumbers, VARSTATE);
        N.addTransition(upper + lower + decNumbers, VARSTATE);
        NE.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition(upper + lower + decNumbers, VARSTATE);
        PA.addTransition(upper + lower + decNumbers, VARSTATE);
        PAC.addTransition(upper + lower + decNumbers, VARSTATE);
        PACK.addTransition(upper + lower + decNumbers, VARSTATE);
        PACKA.addTransition(upper + lower + decNumbers, VARSTATE);
        PACKAG.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition(upper + lower + decNumbers, VARSTATE);
        PR.addTransition(upper + lower + decNumbers, VARSTATE);
        PRI.addTransition(upper + lower + decNumbers, VARSTATE);
        PRIV.addTransition(upper + lower + decNumbers, VARSTATE);
        PRIVA.addTransition(upper + lower + decNumbers, VARSTATE);
        PRIVAT.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition(upper + lower + decNumbers, VARSTATE);
        PR.addTransition(upper + lower + decNumbers, VARSTATE);
        PRO.addTransition(upper + lower + decNumbers, VARSTATE);
        PROT.addTransition(upper + lower + decNumbers, VARSTATE);
        PROTE.addTransition(upper + lower + decNumbers, VARSTATE);
        PROTEC.addTransition(upper + lower + decNumbers, VARSTATE);
        PROTECT.addTransition(upper + lower + decNumbers, VARSTATE);
        PROTECTE.addTransition(upper + lower + decNumbers, VARSTATE);
        P.addTransition(upper + lower + decNumbers, VARSTATE);
        PU.addTransition(upper + lower + decNumbers, VARSTATE);
        PUB.addTransition(upper + lower + decNumbers, VARSTATE);
        PUBL.addTransition(upper + lower + decNumbers, VARSTATE);
        PUBLI.addTransition(upper + lower + decNumbers, VARSTATE);
        R.addTransition(upper + lower + decNumbers, VARSTATE);
        RE.addTransition(upper + lower + decNumbers, VARSTATE);
        REQ.addTransition(upper + lower + decNumbers, VARSTATE);
        REQU.addTransition(upper + lower + decNumbers, VARSTATE);
        REQUI.addTransition(upper + lower + decNumbers, VARSTATE);
        REQUIR.addTransition(upper + lower + decNumbers, VARSTATE);
        REQUIRE.addTransition(upper + lower + decNumbers, VARSTATE);
        R.addTransition(upper + lower + decNumbers, VARSTATE);
        RE.addTransition(upper + lower + decNumbers, VARSTATE);
        RET.addTransition(upper + lower + decNumbers, VARSTATE);
        RETU.addTransition(upper + lower + decNumbers, VARSTATE);
        RETUR.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        SH.addTransition(upper + lower + decNumbers, VARSTATE);
        SHO.addTransition(upper + lower + decNumbers, VARSTATE);
        SHOR.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        ST.addTransition(upper + lower + decNumbers, VARSTATE);
        STA.addTransition(upper + lower + decNumbers, VARSTATE);
        STAT.addTransition(upper + lower + decNumbers, VARSTATE);
        STATI.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        ST.addTransition(upper + lower + decNumbers, VARSTATE);
        STR.addTransition(upper + lower + decNumbers, VARSTATE);
        STRI.addTransition(upper + lower + decNumbers, VARSTATE);
        STRIC.addTransition(upper + lower + decNumbers, VARSTATE);
        STRICT.addTransition(upper + lower + decNumbers, VARSTATE);
        STRICTF.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        SU.addTransition(upper + lower + decNumbers, VARSTATE);
        SUP.addTransition(upper + lower + decNumbers, VARSTATE);
        SUPE.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        SW.addTransition(upper + lower + decNumbers, VARSTATE);
        SWI.addTransition(upper + lower + decNumbers, VARSTATE);
        SWIT.addTransition(upper + lower + decNumbers, VARSTATE);
        SWITC.addTransition(upper + lower + decNumbers, VARSTATE);
        S.addTransition(upper + lower + decNumbers, VARSTATE);
        SY.addTransition(upper + lower + decNumbers, VARSTATE);
        SYN.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNC.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCH.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHR.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHRO.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHRON.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHRONI.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHRONIZ.addTransition(upper + lower + decNumbers, VARSTATE);
        SYNCHRONIZE.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition(upper + lower + decNumbers, VARSTATE);
        TH.addTransition(upper + lower + decNumbers, VARSTATE);
        THI.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition(upper + lower + decNumbers, VARSTATE);
        TH.addTransition(upper + lower + decNumbers, VARSTATE);
        THR.addTransition(upper + lower + decNumbers, VARSTATE);
        THRO.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition(upper + lower + decNumbers, VARSTATE);
        TH.addTransition(upper + lower + decNumbers, VARSTATE);
        THR.addTransition(upper + lower + decNumbers, VARSTATE);
        THRO.addTransition(upper + lower + decNumbers, VARSTATE);
        THROW.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition(upper + lower + decNumbers, VARSTATE);
        TR.addTransition(upper + lower + decNumbers, VARSTATE);
        TRA.addTransition(upper + lower + decNumbers, VARSTATE);
        TRAN.addTransition(upper + lower + decNumbers, VARSTATE);
        TRANS.addTransition(upper + lower + decNumbers, VARSTATE);
        TRANSI.addTransition(upper + lower + decNumbers, VARSTATE);
        TRANSIE.addTransition(upper + lower + decNumbers, VARSTATE);
        TRANSIEN.addTransition(upper + lower + decNumbers, VARSTATE);
        T.addTransition(upper + lower + decNumbers, VARSTATE);
        TR.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition(upper + lower + decNumbers, VARSTATE);
        VA.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition(upper + lower + decNumbers, VARSTATE);
        VO.addTransition(upper + lower + decNumbers, VARSTATE);
        VOI.addTransition(upper + lower + decNumbers, VARSTATE);
        V.addTransition(upper + lower + decNumbers, VARSTATE);
        VO.addTransition(upper + lower + decNumbers, VARSTATE);
        VOL.addTransition(upper + lower + decNumbers, VARSTATE);
        VOLA.addTransition(upper + lower + decNumbers, VARSTATE);
        VOLAT.addTransition(upper + lower + decNumbers, VARSTATE);
        VOLATI.addTransition(upper + lower + decNumbers, VARSTATE);
        VOLATIL.addTransition(upper + lower + decNumbers, VARSTATE);
        W.addTransition(upper + lower + decNumbers, VARSTATE);
        WH.addTransition(upper + lower + decNumbers, VARSTATE);
        WHI.addTransition(upper + lower + decNumbers, VARSTATE);
        WHIL.addTransition(upper + lower + decNumbers, VARSTATE);

        VARSTATE.addTransition(upper + lower + decNumbers, VARSTATE);
    }
}
